{
    "name": "harness",
    "displayName": "Harness",
    "description": "A Pulumi package for creating and managing Harness  resources.",
    "keywords": [
        "pulumi",
        "harness",
        "lbrlabs"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`harness` Terraform Provider](https://github.com/harness/terraform-provider-harness).",
    "repository": "https://github.com/lbrlabs/pulumi-harness",
    "logoUrl": "https://raw.githubusercontent.com/lbrlabs/pulumi-harness/master/assets/logo.svg",
    "pluginDownloadURL": "github://api.github.com/lbrlabs",
    "publisher": "lbrlabs",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "Lbrlabs.PulumiPackage"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/lbrlabs/pulumi-harness/sdk/go/harness"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Harness  resources.",
            "packageName": "@lbrlabs/pulumi-harness",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/harness/terraform-provider-harness)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-harness` repo](https://github.com/lbrlabs/pulumi-harness/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-harness` repo](https://github.com/harness/terraform-provider-harness/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "lbrlabs_pulumi_harness",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/harness/terraform-provider-harness)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-harness` repo](https://github.com/lbrlabs/pulumi-harness/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-harness` repo](https://github.com/harness/terraform-provider-harness/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "accountId": {
                "type": "string",
                "description": "The Harness account id. This can also be set using the `HARNESS_ACCOUNT_ID` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_ACCOUNT_ID"
                    ]
                }
            },
            "apiKey": {
                "type": "string",
                "description": "The Harness API key. This can also be set using the `HARNESS_API_KEY` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_API_KEY"
                    ]
                }
            },
            "endpoint": {
                "type": "string",
                "description": "The URL of the Harness API endpoint. The default is `https://app.harness.io/gateway`. This can also be set using the\n`HARNESS_ENDPOINT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_ENDPOINT"
                    ]
                }
            },
            "platformApiKey": {
                "type": "string",
                "description": "The API key for the Harness next gen platform. This can also be set using the `HARNESS_PLATFORM_API_KEY` environment\nvariable.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_PLATFORM_API_KEY"
                    ]
                }
            }
        },
        "defaults": [
            "accountId",
            "endpoint"
        ]
    },
    "types": {
        "harness:cloudprovider/AwsAssumeCrossAccountRole:AwsAssumeCrossAccountRole": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "This is an IAM role in the target deployment AWS account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "roleArn"
            ]
        },
        "harness:cloudprovider/AwsUsageScope:AwsUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:cloudprovider/DatacenterUsageScope:DatacenterUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:cloudprovider/GcpUsageScope:GcpUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:cloudprovider/KubernetesAuthentication:KubernetesAuthentication": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Delegate selectors to inherit the GCP credentials from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "oidc": {
                    "$ref": "#/types/harness:cloudprovider/KubernetesAuthenticationOidc:KubernetesAuthenticationOidc",
                    "description": "Service account configuration for connecting to the Kubernetes cluster\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceAccount": {
                    "$ref": "#/types/harness:cloudprovider/KubernetesAuthenticationServiceAccount:KubernetesAuthenticationServiceAccount",
                    "description": "Username and password for authentication to the cluster\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:cloudprovider/KubernetesAuthenticationUsernamePassword:KubernetesAuthenticationUsernamePassword",
                    "description": "Username and password for authentication to the cluster\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:cloudprovider/KubernetesAuthenticationOidc:KubernetesAuthenticationOidc": {
            "properties": {
                "clientIdSecretName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecretSecretName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "identityProviderUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passwordSecretName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clientIdSecretName",
                "identityProviderUrl",
                "masterUrl",
                "passwordSecretName",
                "username"
            ]
        },
        "harness:cloudprovider/KubernetesAuthenticationServiceAccount:KubernetesAuthenticationServiceAccount": {
            "properties": {
                "caCertificateSecretName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceAccountTokenSecretName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "serviceAccountTokenSecretName"
            ]
        },
        "harness:cloudprovider/KubernetesAuthenticationUsernamePassword:KubernetesAuthenticationUsernamePassword": {
            "properties": {
                "masterUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passwordSecretName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameSecretName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "passwordSecretName"
            ]
        },
        "harness:cloudprovider/KubernetesUsageScope:KubernetesUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:index/EncryptedTextUsageScope:EncryptedTextUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:index/EnvironmentVariableOverride:EnvironmentVariableOverride": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "description": "The name of the service\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the service variable. Valid values are `TEXT` and `ENCRYPTED_TEXT`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value of the service variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:index/GitConnectorCommitDetails:GitConnectorCommitDetails": {
            "properties": {
                "authorEmailId": {
                    "type": "string",
                    "description": "The email id of the author\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authorName": {
                    "type": "string",
                    "description": "The name of the author\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "Commit message\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:index/GitConnectorUsageScope:GitConnectorUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:index/InfrastructureDefinitionAwsAmi:InfrastructureDefinitionAwsAmi": {
            "properties": {
                "amiDeploymentType": {
                    "type": "string",
                    "description": "The ami deployment type to use. Valid options are AWS_ASG, SPOTINST\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "asgIdentifiesWorkload": {
                    "type": "boolean",
                    "description": "Flag to indicate whether the autoscaling group identifies the workload.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoscalingGroupName": {
                    "type": "string",
                    "description": "The name of the autoscaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "classicLoadbalancers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The classic load balancers to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostnameConvention": {
                    "type": "string",
                    "description": "The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "The region to deploy to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spotinstCloudProviderName": {
                    "type": "string",
                    "description": "The name of the SpotInst cloud provider to connect with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spotinstConfigJson": {
                    "type": "string",
                    "description": "The SpotInst configuration to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stageClassicLoadbalancers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The staging classic load balancers to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stageTargetGroupArns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The staging classic load balancers to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupArns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ARN's of the target groups.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useTrafficShift": {
                    "type": "boolean",
                    "description": "Flag to enable traffic shifting.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "amiDeploymentType",
                "cloudProviderName",
                "region"
            ]
        },
        "harness:index/InfrastructureDefinitionAwsEcs:InfrastructureDefinitionAwsEcs": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Flag to assign a public IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the ECS cluster to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "executionRole": {
                    "type": "string",
                    "description": "The ARN of the role to use for execution.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "launchType": {
                    "type": "string",
                    "description": "The type of launch configuration to use. Valid options are FARGATE\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "The region to deploy to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ids to apply to the ecs service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The subnet ids to apply to the ecs service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC ids to use when selecting the instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "clusterName",
                "launchType",
                "region"
            ]
        },
        "harness:index/InfrastructureDefinitionAwsLambda:InfrastructureDefinitionAwsLambda": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iamRole": {
                    "type": "string",
                    "description": "The IAM role to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "The region to deploy to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ids to apply to the ecs service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The subnet ids to apply to the ecs service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC ids to use when selecting the instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "region"
            ]
        },
        "harness:index/InfrastructureDefinitionAwsSsh:InfrastructureDefinitionAwsSsh": {
            "properties": {
                "autoscalingGroupName": {
                    "type": "string",
                    "description": "The name of the autoscaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "desiredCapacity": {
                    "type": "integer",
                    "description": "The desired capacity of the auto scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostConnectionAttrsName": {
                    "type": "string",
                    "description": "The name of the host connection attributes to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostConnectionType": {
                    "type": "string",
                    "description": "The type of host connection to use. Valid options are PRIVATE*DNS, PUBLIC*DNS, PRIVATE*IP, PUBLIC*IP\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostnameConvention": {
                    "type": "string",
                    "description": "The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadbalancerName": {
                    "type": "string",
                    "description": "The name of the load balancer to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "The region to deploy to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsSshTag:InfrastructureDefinitionAwsSshTag"
                    },
                    "description": "The tags to use when selecting the instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The VPC ids to use when selecting the instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "hostConnectionType",
                "region"
            ]
        },
        "harness:index/InfrastructureDefinitionAwsSshTag:InfrastructureDefinitionAwsSshTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "harness:index/InfrastructureDefinitionAwsWinrm:InfrastructureDefinitionAwsWinrm": {
            "properties": {
                "autoscalingGroupName": {
                    "type": "string",
                    "description": "The name of the autoscaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "desiredCapacity": {
                    "type": "integer",
                    "description": "The desired capacity of the autoscaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostConnectionAttrsName": {
                    "type": "string",
                    "description": "The name of the host connection attributes to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostConnectionType": {
                    "type": "string",
                    "description": "The type of host connection to use. Valid options are PRIVATE*DNS, PUBLIC*DNS, PRIVATE*IP, PUBLIC*IP\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostnameConvention": {
                    "type": "string",
                    "description": "The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadbalancerName": {
                    "type": "string",
                    "description": "The name of the load balancer to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "The region to deploy to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoscalingGroupName",
                "cloudProviderName",
                "hostConnectionAttrsName",
                "hostConnectionType",
                "region"
            ]
        },
        "harness:index/InfrastructureDefinitionAzureVmss:InfrastructureDefinitionAzureVmss": {
            "properties": {
                "authType": {
                    "type": "string",
                    "description": "The type of authentication to use. Valid options are SSH*PUBLIC*KEY.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "baseName": {
                    "type": "string",
                    "description": "Base name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The type of deployment. Valid options are NATIVE_VMSS\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostConnectionAttrsName": {
                    "type": "string",
                    "description": "The name of the host connection attributes to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroupName": {
                    "type": "string",
                    "description": "The name of the resource group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "The unique id of the azure subscription.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "The username to connect with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authType",
                "baseName",
                "cloudProviderName",
                "deploymentType",
                "resourceGroupName",
                "subscriptionId",
                "username"
            ]
        },
        "harness:index/InfrastructureDefinitionAzureWebapp:InfrastructureDefinitionAzureWebapp": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The name of the resource group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "The unique id of the azure subscription.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "resourceGroup",
                "subscriptionId"
            ]
        },
        "harness:index/InfrastructureDefinitionDatacenterSsh:InfrastructureDefinitionDatacenterSsh": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostConnectionAttributesName": {
                    "type": "string",
                    "description": "The name of the SSH connection attributes to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of hosts to deploy to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "hostConnectionAttributesName",
                "hostnames"
            ]
        },
        "harness:index/InfrastructureDefinitionDatacenterWinrm:InfrastructureDefinitionDatacenterWinrm": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of hosts to deploy to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "winrmConnectionAttributesName": {
                    "type": "string",
                    "description": "The name of the WinRM connection attributes to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "hostnames",
                "winrmConnectionAttributesName"
            ]
        },
        "harness:index/InfrastructureDefinitionKubernetes:InfrastructureDefinitionKubernetes": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace in Kubernetes to deploy to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "releaseName": {
                    "type": "string",
                    "description": "The naming convention of the release. When using Helm Native the default is ${infra.kubernetes.infraId}. For standard Kubernetes manifests the default is release-${infra.kubernetes.infraId}\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "namespace",
                "releaseName"
            ]
        },
        "harness:index/InfrastructureDefinitionKubernetesGcp:InfrastructureDefinitionKubernetesGcp": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the cluster being deployed to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace in Kubernetes to deploy to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "releaseName": {
                    "type": "string",
                    "description": "The naming convention of the release.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "clusterName",
                "namespace",
                "releaseName"
            ]
        },
        "harness:index/InfrastructureDefinitionTanzu:InfrastructureDefinitionTanzu": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organization": {
                    "type": "string",
                    "description": "The PCF organization to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "space": {
                    "type": "string",
                    "description": "The PCF space to deploy to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "organization",
                "space"
            ]
        },
        "harness:index/SshCredentialKerberosAuthentication:SshCredentialKerberosAuthentication": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Port to use for Kerberos authentication\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "principal": {
                    "type": "string",
                    "description": "Name of the principal for authentication\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "realm": {
                    "type": "string",
                    "description": "Realm associated with the Kerberos authentication\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "tgtGenerationMethod": {
                    "$ref": "#/types/harness:index/SshCredentialKerberosAuthenticationTgtGenerationMethod:SshCredentialKerberosAuthenticationTgtGenerationMethod",
                    "description": "TGT generation method\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "port",
                "principal",
                "realm"
            ]
        },
        "harness:index/SshCredentialKerberosAuthenticationTgtGenerationMethod:SshCredentialKerberosAuthenticationTgtGenerationMethod": {
            "properties": {
                "kerberosPasswordId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "keyTabFilePath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "harness:index/SshCredentialSshAuthentication:SshCredentialSshAuthentication": {
            "properties": {
                "inlineSsh": {
                    "$ref": "#/types/harness:index/SshCredentialSshAuthenticationInlineSsh:SshCredentialSshAuthenticationInlineSsh",
                    "description": "Inline SSH authentication configuration. Only ond of `passphrase_secret_id` or `ssh_key_file_id` should be used\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverPassword": {
                    "$ref": "#/types/harness:index/SshCredentialSshAuthenticationServerPassword:SshCredentialSshAuthenticationServerPassword",
                    "description": "Server password authentication configuration\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "sshKeyFile": {
                    "$ref": "#/types/harness:index/SshCredentialSshAuthenticationSshKeyFile:SshCredentialSshAuthenticationSshKeyFile",
                    "description": "Use ssh key file for authentication\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "The username to use when connecting to ssh\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "port",
                "username"
            ]
        },
        "harness:index/SshCredentialSshAuthenticationInlineSsh:SshCredentialSshAuthenticationInlineSsh": {
            "properties": {
                "passphraseSecretId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyFileId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sshKeyFileId"
            ]
        },
        "harness:index/SshCredentialSshAuthenticationServerPassword:SshCredentialSshAuthenticationServerPassword": {
            "properties": {
                "passwordSecretId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "passwordSecretId"
            ]
        },
        "harness:index/SshCredentialSshAuthenticationSshKeyFile:SshCredentialSshAuthenticationSshKeyFile": {
            "properties": {
                "passphraseSecretId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "harness:index/SshCredentialUsageScope:SshCredentialUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:index/UserGroupLdapSettings:UserGroupLdapSettings": {
            "properties": {
                "groupDn": {
                    "type": "string",
                    "description": "The group DN of the LDAP user group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupName": {
                    "type": "string",
                    "description": "The group name of the LDAP user group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ssoProviderId": {
                    "type": "string",
                    "description": "The ID of the SSO provider.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:index/UserGroupNotificationSettings:UserGroupNotificationSettings": {
            "properties": {
                "groupEmailAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The email addresses of the user group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "microsoftTeamsWebhookUrl": {
                    "type": "string",
                    "description": "The Microsoft Teams webhook URL of the user group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendMailToNewMembers": {
                    "type": "boolean",
                    "description": "Indicates whether an email is sent when a new user is added to the group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendNotificationsToMembers": {
                    "type": "boolean",
                    "description": "Enable this setting to have notifications sent to the members of this group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slackChannel": {
                    "type": "string",
                    "description": "The Slack channel to send notifications to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slackWebhookUrl": {
                    "type": "string",
                    "description": "The Slack webhook URL to send notifications to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:index/UserGroupPermissions:UserGroupPermissions": {
            "properties": {
                "accountPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appPermissions": {
                    "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissions:UserGroupPermissionsAppPermissions",
                    "description": "Application specific permissions\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:index/UserGroupPermissionsAppPermissions:UserGroupPermissionsAppPermissions": {
            "properties": {
                "alls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsAll:UserGroupPermissionsAppPermissionsAll"
                    },
                    "description": "The permission to perform actions against all resources.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deployments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsDeployment:UserGroupPermissionsAppPermissionsDeployment"
                    },
                    "description": "Permission configuration to perform actions against deployments.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsEnvironment:UserGroupPermissionsAppPermissionsEnvironment"
                    },
                    "description": "Permission configuration to perform actions against workflows.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pipelines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsPipeline:UserGroupPermissionsAppPermissionsPipeline"
                    },
                    "description": "Permission configuration to perform actions against pipelines.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provisioners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsProvisioner:UserGroupPermissionsAppPermissionsProvisioner"
                    },
                    "description": "Permission configuration to perform actions against provisioners.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsService:UserGroupPermissionsAppPermissionsService"
                    },
                    "description": "Permission configuration to perform actions against services.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "templates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsTemplate:UserGroupPermissionsAppPermissionsTemplate"
                    },
                    "description": "Permission configuration to perform actions against templates.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workflows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsWorkflow:UserGroupPermissionsAppPermissionsWorkflow"
                    },
                    "description": "Permission configuration to perform actions against workflows.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:index/UserGroupPermissionsAppPermissionsAll:UserGroupPermissionsAppPermissionsAll": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsDeployment:UserGroupPermissionsAppPermissionsDeployment": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "envIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions",
                "filters"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsEnvironment:UserGroupPermissionsAppPermissionsEnvironment": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "envIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions",
                "filters"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsPipeline:UserGroupPermissionsAppPermissionsPipeline": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "envIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions",
                "filters"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsProvisioner:UserGroupPermissionsAppPermissionsProvisioner": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provisionerIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsService:UserGroupPermissionsAppPermissionsService": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsTemplate:UserGroupPermissionsAppPermissionsTemplate": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "templateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsWorkflow:UserGroupPermissionsAppPermissionsWorkflow": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions",
                "filters"
            ]
        },
        "harness:index/UserGroupSamlSettings:UserGroupSamlSettings": {
            "properties": {
                "groupName": {
                    "type": "string",
                    "description": "The group name of the SAML user group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ssoProviderId": {
                    "type": "string",
                    "description": "The ID of the SSO provider.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:index/getEncryptedTextUsageScope:getEncryptedTextUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:index/getEnvironmentVariableOverride:getEnvironmentVariableOverride": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "description": "The name of the service\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the service variable. Valid values are `TEXT` and `ENCRYPTED_TEXT`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value of the service variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "serviceName",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:index/getGitConnectorCommitDetail:getGitConnectorCommitDetail": {
            "properties": {
                "authorEmailId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authorName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authorEmailId",
                "authorName",
                "message"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:index/getSecretManagerUsageScope:getSecretManagerUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:index/getSshCredentialUsageScope:getSshCredentialUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/AppDynamicsConnectorApiToken:AppDynamicsConnectorApiToken": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client id used for connecting to App Dynamics.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecretRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the App Dynamics client secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecretRef"
            ]
        },
        "harness:platform/AppDynamicsConnectorUsernamePassword:AppDynamicsConnectorUsernamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username"
            ]
        },
        "harness:platform/ArtifactoryConnectorCredentials:ArtifactoryConnectorCredentials": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/AwsCCConnectorCrossAccountAccess:AwsCCConnectorCrossAccountAccess": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "The external id of the role to use for cross-account access. This is a random unique value to provide additional secure authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "The ARN of the role to use for cross-account access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalId",
                "roleArn"
            ]
        },
        "harness:platform/AwsConnectorCrossAccountAccess:AwsConnectorCrossAccountAccess": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the role that you want to assume. This is an IAM role in the target AWS account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "roleArn"
            ]
        },
        "harness:platform/AwsConnectorInheritFromDelegate:AwsConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The delegates to inherit the credentials from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ]
        },
        "harness:platform/AwsConnectorIrsa:AwsConnectorIrsa": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The delegates to inherit the credentials from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ]
        },
        "harness:platform/AwsConnectorManual:AwsConnectorManual": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "AWS access key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the aws access key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect only use delegates with these tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the aws secret key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "secretKeyRef"
            ]
        },
        "harness:platform/AwsKmsConnectorCredentials:AwsKmsConnectorCredentials": {
            "properties": {
                "assumeRole": {
                    "$ref": "#/types/harness:platform/AwsKmsConnectorCredentialsAssumeRole:AwsKmsConnectorCredentialsAssumeRole",
                    "description": "Connect using STS assume role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inheritFromDelegate": {
                    "type": "boolean",
                    "description": "Inherit the credentials from from the delegate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "manual": {
                    "$ref": "#/types/harness:platform/AwsKmsConnectorCredentialsManual:AwsKmsConnectorCredentialsManual",
                    "description": "Specify the AWS key and secret used for authenticating.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/AwsKmsConnectorCredentialsAssumeRole:AwsKmsConnectorCredentialsAssumeRole": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration",
                "roleArn"
            ]
        },
        "harness:platform/AwsKmsConnectorCredentialsManual:AwsKmsConnectorCredentialsManual": {
            "properties": {
                "accessKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessKeyRef",
                "secretKeyRef"
            ]
        },
        "harness:platform/AwsSecretManagerConnectorCredentials:AwsSecretManagerConnectorCredentials": {
            "properties": {
                "assumeRole": {
                    "$ref": "#/types/harness:platform/AwsSecretManagerConnectorCredentialsAssumeRole:AwsSecretManagerConnectorCredentialsAssumeRole",
                    "description": "Connect using STS assume role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inheritFromDelegate": {
                    "type": "boolean",
                    "description": "Inherit the credentials from from the delegate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "manual": {
                    "$ref": "#/types/harness:platform/AwsSecretManagerConnectorCredentialsManual:AwsSecretManagerConnectorCredentialsManual",
                    "description": "Specify the AWS key and secret used for authenticating.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/AwsSecretManagerConnectorCredentialsAssumeRole:AwsSecretManagerConnectorCredentialsAssumeRole": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration",
                "roleArn"
            ]
        },
        "harness:platform/AwsSecretManagerConnectorCredentialsManual:AwsSecretManagerConnectorCredentialsManual": {
            "properties": {
                "accessKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessKeyRef",
                "secretKeyRef"
            ]
        },
        "harness:platform/BitbucketConnectorApiAuthentication:BitbucketConnectorApiAuthentication": {
            "properties": {
                "tokenRef": {
                    "type": "string",
                    "description": "Personal access token for interacting with the BitBucket api.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "The username used for connecting to the api.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the username.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "tokenRef"
            ]
        },
        "harness:platform/BitbucketConnectorCredentials:BitbucketConnectorCredentials": {
            "properties": {
                "http": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorCredentialsHttp:BitbucketConnectorCredentialsHttp",
                    "description": "Authenticate using Username and password over http(s) for the connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorCredentialsSsh:BitbucketConnectorCredentialsSsh",
                    "description": "Authenticate using SSH for the connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/BitbucketConnectorCredentialsHttp:BitbucketConnectorCredentialsHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/BitbucketConnectorCredentialsSsh:BitbucketConnectorCredentialsSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ]
        },
        "harness:platform/DockerConnectorCredentials:DockerConnectorCredentials": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "The reference to the password to use for the docker registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "The username to use for the docker registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "description": "The reference to the username to use for the docker registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/GcpConnectorInheritFromDelegate:GcpConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The delegates to inherit the credentials from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ]
        },
        "harness:platform/GcpConnectorManual:GcpConnectorManual": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The delegates to connect with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the secret key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors",
                "secretKeyRef"
            ]
        },
        "harness:platform/GitConnectorCredentials:GitConnectorCredentials": {
            "properties": {
                "http": {
                    "$ref": "#/types/harness:platform/GitConnectorCredentialsHttp:GitConnectorCredentialsHttp",
                    "description": "Authenticate using Username and password over http(s) for the connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/GitConnectorCredentialsSsh:GitConnectorCredentialsSsh",
                    "description": "Authenticate using SSH for the connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/GitConnectorCredentialsHttp:GitConnectorCredentialsHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/GitConnectorCredentialsSsh:GitConnectorCredentialsSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ]
        },
        "harness:platform/GithubConnectorApiAuthentication:GithubConnectorApiAuthentication": {
            "properties": {
                "githubApp": {
                    "$ref": "#/types/harness:platform/GithubConnectorApiAuthenticationGithubApp:GithubConnectorApiAuthenticationGithubApp",
                    "description": "Configuration for using the github app for interacting with the github api.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenRef": {
                    "type": "string",
                    "description": "Personal access token for interacting with the github api.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/GithubConnectorApiAuthenticationGithubApp:GithubConnectorApiAuthenticationGithubApp": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "installationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "applicationId",
                "installationId",
                "privateKeyRef"
            ]
        },
        "harness:platform/GithubConnectorCredentials:GithubConnectorCredentials": {
            "properties": {
                "http": {
                    "$ref": "#/types/harness:platform/GithubConnectorCredentialsHttp:GithubConnectorCredentialsHttp",
                    "description": "Authenticate using Username and password over http(s) for the connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/GithubConnectorCredentialsSsh:GithubConnectorCredentialsSsh",
                    "description": "Authenticate using SSH for the connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/GithubConnectorCredentialsHttp:GithubConnectorCredentialsHttp": {
            "properties": {
                "tokenRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "tokenRef"
            ]
        },
        "harness:platform/GithubConnectorCredentialsSsh:GithubConnectorCredentialsSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ]
        },
        "harness:platform/GitlabConnectorApiAuthentication:GitlabConnectorApiAuthentication": {
            "properties": {
                "tokenRef": {
                    "type": "string",
                    "description": "Personal access token for interacting with the gitlab api.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "tokenRef"
            ]
        },
        "harness:platform/GitlabConnectorCredentials:GitlabConnectorCredentials": {
            "properties": {
                "http": {
                    "$ref": "#/types/harness:platform/GitlabConnectorCredentialsHttp:GitlabConnectorCredentialsHttp",
                    "description": "Authenticate using Username and password over http(s) for the connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/GitlabConnectorCredentialsSsh:GitlabConnectorCredentialsSsh",
                    "description": "Authenticate using SSH for the connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/GitlabConnectorCredentialsHttp:GitlabConnectorCredentialsHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/GitlabConnectorCredentialsSsh:GitlabConnectorCredentialsSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ]
        },
        "harness:platform/HelmConnectorCredentials:HelmConnectorCredentials": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/KubernetesConnectorClientKeyCert:KubernetesConnectorClientKeyCert": {
            "properties": {
                "caCertRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the CA certificate for the connector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCertRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client certificate for the connector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKeyAlgorithm": {
                    "type": "string",
                    "description": "The algorithm used to generate the client key for the connector. Valid values are RSA, EC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKeyPassphraseRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client key passphrase for the connector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKeyRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client key for the connector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clientCertRef",
                "clientKeyAlgorithm",
                "clientKeyRef",
                "masterUrl"
            ]
        },
        "harness:platform/KubernetesConnectorInheritFromDelegate:KubernetesConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Selectors to use for the delegate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ]
        },
        "harness:platform/KubernetesConnectorOpenidConnect:KubernetesConnectorOpenidConnect": {
            "properties": {
                "clientIdRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client ID for the connector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuerUrl": {
                    "type": "string",
                    "description": "The URL of the OpenID Connect issuer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the password for the connector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Scopes to request for the connector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client secret for the connector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "Username for the connector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the username for the connector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clientIdRef",
                "issuerUrl",
                "masterUrl",
                "passwordRef"
            ]
        },
        "harness:platform/KubernetesConnectorServiceAccount:KubernetesConnectorServiceAccount": {
            "properties": {
                "masterUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceAccountTokenRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the service account token for the connector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "serviceAccountTokenRef"
            ]
        },
        "harness:platform/KubernetesConnectorUsernamePassword:KubernetesConnectorUsernamePassword": {
            "properties": {
                "masterUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the password for the connector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "Username for the connector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the username for the connector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "passwordRef"
            ]
        },
        "harness:platform/NexusConnectorCredentials:NexusConnectorCredentials": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/ResourceGroupIncludedScope:ResourceGroupIncludedScope": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier of the account\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filter": {
                    "type": "string",
                    "description": "Can be one of these 2 EXCLUDING*CHILD*SCOPES or INCLUDING*CHILD*SCOPES\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filter"
            ]
        },
        "harness:platform/ResourceGroupResourceFilter:ResourceGroupResourceFilter": {
            "properties": {
                "includeAllResources": {
                    "type": "boolean",
                    "description": "Include all resource or not\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupResourceFilterResource:ResourceGroupResourceFilterResource"
                    },
                    "description": "Resources for a resource group\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/ResourceGroupResourceFilterResource:ResourceGroupResourceFilterResource": {
            "properties": {
                "attributeFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupResourceFilterResourceAttributeFilter:ResourceGroupResourceFilterResourceAttributeFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "identifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resourceType"
            ]
        },
        "harness:platform/ResourceGroupResourceFilterResourceAttributeFilter:ResourceGroupResourceFilterResourceAttributeFilter": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "attributeValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/SecretSshkeyKerberos:SecretSshkeyKerberos": {
            "properties": {
                "principal": {
                    "type": "string",
                    "description": "Username to use for authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "realm": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tgtGenerationMethod": {
                    "type": "string",
                    "description": "Method to generate tgt\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tgtKeyTabFilePathSpec": {
                    "$ref": "#/types/harness:platform/SecretSshkeyKerberosTgtKeyTabFilePathSpec:SecretSshkeyKerberosTgtKeyTabFilePathSpec",
                    "description": "Authenticate to App Dynamics using username and password.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tgtPasswordSpec": {
                    "$ref": "#/types/harness:platform/SecretSshkeyKerberosTgtPasswordSpec:SecretSshkeyKerberosTgtPasswordSpec",
                    "description": "Authenticate to App Dynamics using username and password.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "principal",
                "realm"
            ]
        },
        "harness:platform/SecretSshkeyKerberosTgtKeyTabFilePathSpec:SecretSshkeyKerberosTgtKeyTabFilePathSpec": {
            "properties": {
                "keyPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/SecretSshkeyKerberosTgtPasswordSpec:SecretSshkeyKerberosTgtPasswordSpec": {
            "properties": {
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/SecretSshkeySsh:SecretSshkeySsh": {
            "properties": {
                "credentialType": {
                    "type": "string",
                    "description": "This specifies SSH credential type as Password, KeyPath or KeyReference\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshPasswordCredential": {
                    "$ref": "#/types/harness:platform/SecretSshkeySshSshPasswordCredential:SecretSshkeySshSshPasswordCredential",
                    "description": "SSH credential of type keyReference\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshkeyPathCredential": {
                    "$ref": "#/types/harness:platform/SecretSshkeySshSshkeyPathCredential:SecretSshkeySshSshkeyPathCredential",
                    "description": "SSH credential of type keyPath\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshkeyReferenceCredential": {
                    "$ref": "#/types/harness:platform/SecretSshkeySshSshkeyReferenceCredential:SecretSshkeySshSshkeyReferenceCredential",
                    "description": "SSH credential of type keyReference\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "credentialType"
            ]
        },
        "harness:platform/SecretSshkeySshSshPasswordCredential:SecretSshkeySshSshPasswordCredential": {
            "properties": {
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password",
                "userName"
            ]
        },
        "harness:platform/SecretSshkeySshSshkeyPathCredential:SecretSshkeySshSshkeyPathCredential": {
            "properties": {
                "encryptedPassphrase": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "keyPath",
                "userName"
            ]
        },
        "harness:platform/SecretSshkeySshSshkeyReferenceCredential:SecretSshkeySshSshkeyReferenceCredential": {
            "properties": {
                "encryptedPassphrase": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "userName"
            ]
        },
        "harness:platform/UsergroupNotificationConfig:UsergroupNotificationConfig": {
            "properties": {
                "groupEmail": {
                    "type": "string",
                    "description": "Group email\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "microsoftTeamsWebhookUrl": {
                    "type": "string",
                    "description": "Url of Microsoft teams webhook\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pagerDutyKey": {
                    "type": "string",
                    "description": "Pager duty key\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slackWebhookUrl": {
                    "type": "string",
                    "description": "Url of slack webhook\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/getAppDynamicsConnectorApiToken:getAppDynamicsConnectorApiToken": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecretRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecretRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAppDynamicsConnectorUsernamePassword:getAppDynamicsConnectorUsernamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getArtifactoryConnectorCredential:getArtifactoryConnectorCredential": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsCCConnectorCrossAccountAccess:getAwsCCConnectorCrossAccountAccess": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalId",
                "roleArn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsConnectorCrossAccountAccess:getAwsConnectorCrossAccountAccess": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalId",
                "roleArn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsConnectorInheritFromDelegate:getAwsConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsConnectorIrsa:getAwsConnectorIrsa": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsConnectorManual:getAwsConnectorManual": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "accessKeyRef",
                "delegateSelectors",
                "secretKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsKmsConnectorCredential:getAwsKmsConnectorCredential": {
            "properties": {
                "assumeRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAwsKmsConnectorCredentialAssumeRole:getAwsKmsConnectorCredentialAssumeRole"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inheritFromDelegate": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "manuals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAwsKmsConnectorCredentialManual:getAwsKmsConnectorCredentialManual"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assumeRoles",
                "inheritFromDelegate",
                "manuals"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsKmsConnectorCredentialAssumeRole:getAwsKmsConnectorCredentialAssumeRole": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration",
                "externalId",
                "roleArn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsKmsConnectorCredentialManual:getAwsKmsConnectorCredentialManual": {
            "properties": {
                "accessKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessKeyRef",
                "secretKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsSecretManagerConnectorCredential:getAwsSecretManagerConnectorCredential": {
            "properties": {
                "assumeRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAwsSecretManagerConnectorCredentialAssumeRole:getAwsSecretManagerConnectorCredentialAssumeRole"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inheritFromDelegate": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "manuals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAwsSecretManagerConnectorCredentialManual:getAwsSecretManagerConnectorCredentialManual"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assumeRoles",
                "inheritFromDelegate",
                "manuals"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsSecretManagerConnectorCredentialAssumeRole:getAwsSecretManagerConnectorCredentialAssumeRole": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration",
                "externalId",
                "roleArn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsSecretManagerConnectorCredentialManual:getAwsSecretManagerConnectorCredentialManual": {
            "properties": {
                "accessKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessKeyRef",
                "secretKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getBitbucketConnectorApiAuthentication:getBitbucketConnectorApiAuthentication": {
            "properties": {
                "tokenRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "tokenRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getBitbucketConnectorCredential:getBitbucketConnectorCredential": {
            "properties": {
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getBitbucketConnectorCredentialHttp:getBitbucketConnectorCredentialHttp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getBitbucketConnectorCredentialSsh:getBitbucketConnectorCredentialSsh"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "https",
                "sshes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getBitbucketConnectorCredentialHttp:getBitbucketConnectorCredentialHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getBitbucketConnectorCredentialSsh:getBitbucketConnectorCredentialSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getDockerConnectorCredential:getDockerConnectorCredential": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGcpConnectorInheritFromDelegate:getGcpConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGcpConnectorManual:getGcpConnectorManual": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors",
                "secretKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitConnectorCredential:getGitConnectorCredential": {
            "properties": {
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitConnectorCredentialHttp:getGitConnectorCredentialHttp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitConnectorCredentialSsh:getGitConnectorCredentialSsh"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "https",
                "sshes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitConnectorCredentialHttp:getGitConnectorCredentialHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitConnectorCredentialSsh:getGitConnectorCredentialSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGithubConnectorApiAuthentication:getGithubConnectorApiAuthentication": {
            "properties": {
                "githubApps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGithubConnectorApiAuthenticationGithubApp:getGithubConnectorApiAuthenticationGithubApp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "githubApps",
                "tokenRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGithubConnectorApiAuthenticationGithubApp:getGithubConnectorApiAuthenticationGithubApp": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "installationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "applicationId",
                "installationId",
                "privateKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGithubConnectorCredential:getGithubConnectorCredential": {
            "properties": {
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGithubConnectorCredentialHttp:getGithubConnectorCredentialHttp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGithubConnectorCredentialSsh:getGithubConnectorCredentialSsh"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "https",
                "sshes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGithubConnectorCredentialHttp:getGithubConnectorCredentialHttp": {
            "properties": {
                "tokenRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "tokenRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGithubConnectorCredentialSsh:getGithubConnectorCredentialSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitlabConnectorApiAuthentication:getGitlabConnectorApiAuthentication": {
            "properties": {
                "tokenRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "tokenRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitlabConnectorCredential:getGitlabConnectorCredential": {
            "properties": {
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitlabConnectorCredentialHttp:getGitlabConnectorCredentialHttp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitlabConnectorCredentialSsh:getGitlabConnectorCredentialSsh"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "https",
                "sshes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitlabConnectorCredentialHttp:getGitlabConnectorCredentialHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "tokenRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitlabConnectorCredentialSsh:getGitlabConnectorCredentialSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getHelmConnectorCredential:getHelmConnectorCredential": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getKubernetesConnectorClientKeyCert:getKubernetesConnectorClientKeyCert": {
            "properties": {
                "caCertRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCertRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKeyAlgorithm": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKeyPassphraseRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKeyRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "caCertRef",
                "clientCertRef",
                "clientKeyAlgorithm",
                "clientKeyPassphraseRef",
                "clientKeyRef",
                "masterUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getKubernetesConnectorInheritFromDelegate:getKubernetesConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Selectors to use for the delegate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getKubernetesConnectorOpenidConnect:getKubernetesConnectorOpenidConnect": {
            "properties": {
                "clientIdRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuerUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passwordRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clientIdRef",
                "issuerUrl",
                "masterUrl",
                "passwordRef",
                "scopes",
                "secretRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getKubernetesConnectorServiceAccount:getKubernetesConnectorServiceAccount": {
            "properties": {
                "masterUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceAccountTokenRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "serviceAccountTokenRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getKubernetesConnectorUsernamePassword:getKubernetesConnectorUsernamePassword": {
            "properties": {
                "masterUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passwordRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getNexusConnectorCredential:getNexusConnectorCredential": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getResourceGroupIncludedScope:getResourceGroupIncludedScope": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier of the account\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "filter",
                "orgId",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getResourceGroupResourceFilter:getResourceGroupResourceFilter": {
            "properties": {
                "includeAllResources": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getResourceGroupResourceFilterResource:getResourceGroupResourceFilterResource"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "includeAllResources",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getResourceGroupResourceFilterResource:getResourceGroupResourceFilterResource": {
            "properties": {
                "attributeFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getResourceGroupResourceFilterResourceAttributeFilter:getResourceGroupResourceFilterResourceAttributeFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "identifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attributeFilters",
                "identifiers",
                "resourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getResourceGroupResourceFilterResourceAttributeFilter:getResourceGroupResourceFilterResourceAttributeFilter": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "attributeValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValues"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeyKerbero:getSecretSshkeyKerbero": {
            "properties": {
                "principal": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "realm": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tgtGenerationMethod": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tgtKeyTabFilePathSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getSecretSshkeyKerberoTgtKeyTabFilePathSpec:getSecretSshkeyKerberoTgtKeyTabFilePathSpec"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tgtPasswordSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getSecretSshkeyKerberoTgtPasswordSpec:getSecretSshkeyKerberoTgtPasswordSpec"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "principal",
                "realm",
                "tgtGenerationMethod",
                "tgtKeyTabFilePathSpecs",
                "tgtPasswordSpecs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeyKerberoTgtKeyTabFilePathSpec:getSecretSshkeyKerberoTgtKeyTabFilePathSpec": {
            "properties": {
                "keyPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "keyPath"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeyKerberoTgtPasswordSpec:getSecretSshkeyKerberoTgtPasswordSpec": {
            "properties": {
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeySsh:getSecretSshkeySsh": {
            "properties": {
                "credentialType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshPasswordCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getSecretSshkeySshSshPasswordCredential:getSecretSshkeySshSshPasswordCredential"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshkeyPathCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getSecretSshkeySshSshkeyPathCredential:getSecretSshkeySshSshkeyPathCredential"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshkeyReferenceCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getSecretSshkeySshSshkeyReferenceCredential:getSecretSshkeySshSshkeyReferenceCredential"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "credentialType",
                "sshPasswordCredentials",
                "sshkeyPathCredentials",
                "sshkeyReferenceCredentials"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeySshSshPasswordCredential:getSecretSshkeySshSshPasswordCredential": {
            "properties": {
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password",
                "userName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeySshSshkeyPathCredential:getSecretSshkeySshSshkeyPathCredential": {
            "properties": {
                "encryptedPassphrase": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "encryptedPassphrase",
                "keyPath",
                "userName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeySshSshkeyReferenceCredential:getSecretSshkeySshSshkeyReferenceCredential": {
            "properties": {
                "encryptedAssphrase": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "encryptedAssphrase",
                "key",
                "userName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getUsergroupNotificationConfig:getUsergroupNotificationConfig": {
            "properties": {
                "groupEmail": {
                    "type": "string",
                    "description": "Group email\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "microsoftTeamsWebhookUrl": {
                    "type": "string",
                    "description": "Url of Microsoft teams webhook\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pagerDutyKey": {
                    "type": "string",
                    "description": "Pager duty key\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slackWebhookUrl": {
                    "type": "string",
                    "description": "Url of slack webhook\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "groupEmail",
                "microsoftTeamsWebhookUrl",
                "pagerDutyKey",
                "slackWebhookUrl",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:service/AmiVariable:AmiVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/CodedeployVariable:CodedeployVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/EcsVariable:EcsVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/HelmVariable:HelmVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/KubernetesVariable:KubernetesVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/LambdaVariable:LambdaVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/SshVariable:SshVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/TanzuVariable:TanzuVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/WinrmVariable:WinrmVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the harness package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accountId": {
                "type": "string",
                "description": "The Harness account id. This can also be set using the `HARNESS_ACCOUNT_ID` environment variable.\n"
            },
            "apiKey": {
                "type": "string",
                "description": "The Harness API key. This can also be set using the `HARNESS_API_KEY` environment variable.\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The URL of the Harness API endpoint. The default is `https://app.harness.io/gateway`. This can also be set using the\n`HARNESS_ENDPOINT` environment variable.\n"
            },
            "platformApiKey": {
                "type": "string",
                "description": "The API key for the Harness next gen platform. This can also be set using the `HARNESS_PLATFORM_API_KEY` environment\nvariable.\n"
            }
        },
        "inputProperties": {
            "accountId": {
                "type": "string",
                "description": "The Harness account id. This can also be set using the `HARNESS_ACCOUNT_ID` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_ACCOUNT_ID"
                    ]
                }
            },
            "apiKey": {
                "type": "string",
                "description": "The Harness API key. This can also be set using the `HARNESS_API_KEY` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_API_KEY"
                    ]
                }
            },
            "endpoint": {
                "type": "string",
                "description": "The URL of the Harness API endpoint. The default is `https://app.harness.io/gateway`. This can also be set using the\n`HARNESS_ENDPOINT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_ENDPOINT"
                    ]
                }
            },
            "platformApiKey": {
                "type": "string",
                "description": "The API key for the Harness next gen platform. This can also be set using the `HARNESS_PLATFORM_API_KEY` environment\nvariable.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_PLATFORM_API_KEY"
                    ]
                }
            }
        }
    },
    "resources": {
        "harness:cloudprovider/aws:Aws": {
            "description": "Resource for creating an AWS cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst awsAccessKey = new harness.EncryptedText(\"awsAccessKey\", {\n    value: \"\u003cACCESS_KEY_ID\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst awsSecretKey = new harness.EncryptedText(\"awsSecretKey\", {\n    value: \"\u003cSECRET_KEY_ID\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst aws = new harness.cloudprovider.Aws(\"aws\", {\n    accessKeyIdSecretName: awsAccessKey.name,\n    secretAccessKeySecretName: awsSecretKey.name,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\naws_access_key = harness.EncryptedText(\"awsAccessKey\",\n    value=\"\u003cACCESS_KEY_ID\u003e\",\n    secret_manager_id=default.id)\naws_secret_key = harness.EncryptedText(\"awsSecretKey\",\n    value=\"\u003cSECRET_KEY_ID\u003e\",\n    secret_manager_id=default.id)\naws = harness.cloudprovider.Aws(\"aws\",\n    access_key_id_secret_name=aws_access_key.name,\n    secret_access_key_secret_name=aws_secret_key.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var awsAccessKey = new Harness.EncryptedText(\"awsAccessKey\", new()\n    {\n        Value = \"\u003cACCESS_KEY_ID\u003e\",\n        SecretManagerId = @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult).Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var awsSecretKey = new Harness.EncryptedText(\"awsSecretKey\", new()\n    {\n        Value = \"\u003cSECRET_KEY_ID\u003e\",\n        SecretManagerId = @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult).Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var aws = new Harness.Cloudprovider.Aws(\"aws\", new()\n    {\n        AccessKeyIdSecretName = awsAccessKey.Name,\n        SecretAccessKeySecretName = awsSecretKey.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tawsAccessKey, err := harness.NewEncryptedText(ctx, \"awsAccessKey\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"\u003cACCESS_KEY_ID\u003e\"),\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tawsSecretKey, err := harness.NewEncryptedText(ctx, \"awsSecretKey\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"\u003cSECRET_KEY_ID\u003e\"),\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudprovider.NewAws(ctx, \"aws\", \u0026cloudprovider.AwsArgs{\n\t\t\tAccessKeyIdSecretName:     awsAccessKey.Name,\n\t\t\tSecretAccessKeySecretName: awsSecretKey.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.cloudprovider.Aws;\nimport com.pulumi.harness.cloudprovider.AwsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var awsAccessKey = new EncryptedText(\"awsAccessKey\", EncryptedTextArgs.builder()        \n            .value(\"\u003cACCESS_KEY_ID\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var awsSecretKey = new EncryptedText(\"awsSecretKey\", EncryptedTextArgs.builder()        \n            .value(\"\u003cSECRET_KEY_ID\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var aws = new Aws(\"aws\", AwsArgs.builder()        \n            .accessKeyIdSecretName(awsAccessKey.name())\n            .secretAccessKeySecretName(awsSecretKey.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  awsAccessKey:\n    type: harness:EncryptedText\n    properties:\n      value: \u003cACCESS_KEY_ID\u003e\n      secretManagerId: ${default.id}\n  awsSecretKey:\n    type: harness:EncryptedText\n    properties:\n      value: \u003cSECRET_KEY_ID\u003e\n      secretManagerId: ${default.id}\n  aws:\n    type: harness:cloudprovider:Aws\n    properties:\n      accessKeyIdSecretName: ${awsAccessKey.name}\n      secretAccessKeySecretName: ${awsSecretKey.name}\nvariables:\n  default:\n    Fn::Invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness aws cloud provider id.\n\n```sh\n $ pulumi import harness:cloudprovider/aws:Aws example \u003cprovider_id\u003e\n```\n\n ",
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The plain text AWS access key id.\n"
                },
                "accessKeyIdSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the AWS access key id\n"
                },
                "assumeCrossAccountRole": {
                    "$ref": "#/types/harness:cloudprovider/AwsAssumeCrossAccountRole:AwsAssumeCrossAccountRole",
                    "description": "Configuration for assuming a cross account role.\n"
                },
                "delegateSelector": {
                    "type": "string",
                    "description": "Select the Delegate to use via one of its Selectors.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "secretAccessKeySecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the AWS secret access key.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/AwsUsageScope:AwsUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "useEc2IamCredentials": {
                    "type": "boolean",
                    "description": "Use the EC2 Instance Profile for Service Accounts.\n"
                },
                "useIrsa": {
                    "type": "boolean",
                    "description": "Use the AWS IAM Role for Service Accounts.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The plain text AWS access key id.\n"
                },
                "accessKeyIdSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the AWS access key id\n"
                },
                "assumeCrossAccountRole": {
                    "$ref": "#/types/harness:cloudprovider/AwsAssumeCrossAccountRole:AwsAssumeCrossAccountRole",
                    "description": "Configuration for assuming a cross account role.\n"
                },
                "delegateSelector": {
                    "type": "string",
                    "description": "Select the Delegate to use via one of its Selectors.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "secretAccessKeySecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the AWS secret access key.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/AwsUsageScope:AwsUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "useEc2IamCredentials": {
                    "type": "boolean",
                    "description": "Use the EC2 Instance Profile for Service Accounts.\n"
                },
                "useIrsa": {
                    "type": "boolean",
                    "description": "Use the AWS IAM Role for Service Accounts.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Aws resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "The plain text AWS access key id.\n"
                    },
                    "accessKeyIdSecretName": {
                        "type": "string",
                        "description": "The name of the Harness secret containing the AWS access key id\n"
                    },
                    "assumeCrossAccountRole": {
                        "$ref": "#/types/harness:cloudprovider/AwsAssumeCrossAccountRole:AwsAssumeCrossAccountRole",
                        "description": "Configuration for assuming a cross account role.\n"
                    },
                    "delegateSelector": {
                        "type": "string",
                        "description": "Select the Delegate to use via one of its Selectors.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretAccessKeySecretName": {
                        "type": "string",
                        "description": "The name of the Harness secret containing the AWS secret access key.\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:cloudprovider/AwsUsageScope:AwsUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    },
                    "useEc2IamCredentials": {
                        "type": "boolean",
                        "description": "Use the EC2 Instance Profile for Service Accounts.\n"
                    },
                    "useIrsa": {
                        "type": "boolean",
                        "description": "Use the AWS IAM Role for Service Accounts.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/azure:Azure": {
            "description": "Resource for creating an Azure cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst azureKey = new harness.EncryptedText(\"azureKey\", {\n    value: \"\u003cAZURE_KEY\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst azure = new harness.cloudprovider.Azure(\"azure\", {\n    clientId: \"\u003cAZURE_CLIENT_ID\u003e\",\n    tenantId: \"\u003cAZURE_TENANT_ID\u003e\",\n    key: azureKey.name,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\nazure_key = harness.EncryptedText(\"azureKey\",\n    value=\"\u003cAZURE_KEY\u003e\",\n    secret_manager_id=default.id)\nazure = harness.cloudprovider.Azure(\"azure\",\n    client_id=\"\u003cAZURE_CLIENT_ID\u003e\",\n    tenant_id=\"\u003cAZURE_TENANT_ID\u003e\",\n    key=azure_key.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var azureKey = new Harness.EncryptedText(\"azureKey\", new()\n    {\n        Value = \"\u003cAZURE_KEY\u003e\",\n        SecretManagerId = @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult).Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var azure = new Harness.Cloudprovider.Azure(\"azure\", new()\n    {\n        ClientId = \"\u003cAZURE_CLIENT_ID\u003e\",\n        TenantId = \"\u003cAZURE_TENANT_ID\u003e\",\n        Key = azureKey.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tazureKey, err := harness.NewEncryptedText(ctx, \"azureKey\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"\u003cAZURE_KEY\u003e\"),\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudprovider.NewAzure(ctx, \"azure\", \u0026cloudprovider.AzureArgs{\n\t\t\tClientId: pulumi.String(\"\u003cAZURE_CLIENT_ID\u003e\"),\n\t\t\tTenantId: pulumi.String(\"\u003cAZURE_TENANT_ID\u003e\"),\n\t\t\tKey:      azureKey.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.cloudprovider.Azure;\nimport com.pulumi.harness.cloudprovider.AzureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var azureKey = new EncryptedText(\"azureKey\", EncryptedTextArgs.builder()        \n            .value(\"\u003cAZURE_KEY\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var azure = new Azure(\"azure\", AzureArgs.builder()        \n            .clientId(\"\u003cAZURE_CLIENT_ID\u003e\")\n            .tenantId(\"\u003cAZURE_TENANT_ID\u003e\")\n            .key(azureKey.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  azureKey:\n    type: harness:EncryptedText\n    properties:\n      value: \u003cAZURE_KEY\u003e\n      secretManagerId: ${default.id}\n  azure:\n    type: harness:cloudprovider:Azure\n    properties:\n      clientId: \u003cAZURE_CLIENT_ID\u003e\n      tenantId: \u003cAZURE_TENANT_ID\u003e\n      key: ${azureKey.name}\nvariables:\n  default:\n    Fn::Invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness azure cloud provider id.\n\n```sh\n $ pulumi import harness:cloudprovider/azure:Azure example \u003cprovider_id\u003e\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client id for the Azure application\n"
                },
                "environmentType": {
                    "type": "string",
                    "description": "The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Name of the Harness secret containing the key for the Azure application\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The tenant id for the Azure application\n"
                }
            },
            "required": [
                "clientId",
                "key",
                "name",
                "tenantId"
            ],
            "inputProperties": {
                "clientId": {
                    "type": "string",
                    "description": "The client id for the Azure application\n"
                },
                "environmentType": {
                    "type": "string",
                    "description": "The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Name of the Harness secret containing the key for the Azure application\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The tenant id for the Azure application\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "key",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Azure resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "The client id for the Azure application\n"
                    },
                    "environmentType": {
                        "type": "string",
                        "description": "The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The Name of the Harness secret containing the key for the Azure application\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The tenant id for the Azure application\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/datacenter:Datacenter": {
            "description": "Resource for creating a physical data center cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.cloudprovider.Datacenter(\"example\", {});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.cloudprovider.Datacenter(\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Cloudprovider.Datacenter(\"example\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudprovider.NewDatacenter(ctx, \"example\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.cloudprovider.Datacenter;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Datacenter(\"example\");\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:cloudprovider:Datacenter\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness datacenter cloud provider id.\n\n```sh\n $ pulumi import harness:cloudprovider/datacenter:Datacenter example \u003cprovider_id\u003e\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/DatacenterUsageScope:DatacenterUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/DatacenterUsageScope:DatacenterUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Datacenter resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:cloudprovider/DatacenterUsageScope:DatacenterUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/gcp:Gcp": {
            "description": "Resource for creating a GCP cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n",
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Delegate selectors to use for this provider.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "secretFileId": {
                    "type": "string",
                    "description": "The id of the secret containing the GCP credentials\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of GCP configuration.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/GcpUsageScope:GcpUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Delegate selectors to use for this provider.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "secretFileId": {
                    "type": "string",
                    "description": "The id of the secret containing the GCP credentials\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of GCP configuration.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/GcpUsageScope:GcpUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Gcp resources.\n",
                "properties": {
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Delegate selectors to use for this provider.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretFileId": {
                        "type": "string",
                        "description": "The id of the secret containing the GCP credentials\n"
                    },
                    "skipValidation": {
                        "type": "boolean",
                        "description": "Skip validation of GCP configuration.\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:cloudprovider/GcpUsageScope:GcpUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/kubernetes:Kubernetes": {
            "description": "Resource for creating a Kubernetes cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst username = new harness.EncryptedText(\"username\", {\n    value: \"\u003cUSERNAME\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst password = new harness.EncryptedText(\"password\", {\n    value: \"\u003cPASSWORD\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst example = new harness.cloudprovider.Kubernetes(\"example\", {\n    skipValidation: true,\n    authentication: {\n        usernamePassword: {\n            masterUrl: \"https://localhost.com\",\n            usernameSecretName: username.name,\n            passwordSecretName: password.name,\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\nusername = harness.EncryptedText(\"username\",\n    value=\"\u003cUSERNAME\u003e\",\n    secret_manager_id=default.id)\npassword = harness.EncryptedText(\"password\",\n    value=\"\u003cPASSWORD\u003e\",\n    secret_manager_id=default.id)\nexample = harness.cloudprovider.Kubernetes(\"example\",\n    skip_validation=True,\n    authentication=harness.cloudprovider.KubernetesAuthenticationArgs(\n        username_password=harness.cloudprovider.KubernetesAuthenticationUsernamePasswordArgs(\n            master_url=\"https://localhost.com\",\n            username_secret_name=username.name,\n            password_secret_name=password.name,\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var username = new Harness.EncryptedText(\"username\", new()\n    {\n        Value = \"\u003cUSERNAME\u003e\",\n        SecretManagerId = @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult).Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var password = new Harness.EncryptedText(\"password\", new()\n    {\n        Value = \"\u003cPASSWORD\u003e\",\n        SecretManagerId = @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult).Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var example = new Harness.Cloudprovider.Kubernetes(\"example\", new()\n    {\n        SkipValidation = true,\n        Authentication = new Harness.Cloudprovider.Inputs.KubernetesAuthenticationArgs\n        {\n            UsernamePassword = new Harness.Cloudprovider.Inputs.KubernetesAuthenticationUsernamePasswordArgs\n            {\n                MasterUrl = \"https://localhost.com\",\n                UsernameSecretName = username.Name,\n                PasswordSecretName = password.Name,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tusername, err := harness.NewEncryptedText(ctx, \"username\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"\u003cUSERNAME\u003e\"),\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpassword, err := harness.NewEncryptedText(ctx, \"password\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"\u003cPASSWORD\u003e\"),\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudprovider.NewKubernetes(ctx, \"example\", \u0026cloudprovider.KubernetesArgs{\n\t\t\tSkipValidation: pulumi.Bool(true),\n\t\t\tAuthentication: \u0026cloudprovider.KubernetesAuthenticationArgs{\n\t\t\t\tUsernamePassword: \u0026cloudprovider.KubernetesAuthenticationUsernamePasswordArgs{\n\t\t\t\t\tMasterUrl:          pulumi.String(\"https://localhost.com\"),\n\t\t\t\t\tUsernameSecretName: username.Name,\n\t\t\t\t\tPasswordSecretName: password.Name,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.cloudprovider.Kubernetes;\nimport com.pulumi.harness.cloudprovider.KubernetesArgs;\nimport com.pulumi.harness.cloudprovider.inputs.KubernetesAuthenticationArgs;\nimport com.pulumi.harness.cloudprovider.inputs.KubernetesAuthenticationUsernamePasswordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var username = new EncryptedText(\"username\", EncryptedTextArgs.builder()        \n            .value(\"\u003cUSERNAME\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var password = new EncryptedText(\"password\", EncryptedTextArgs.builder()        \n            .value(\"\u003cPASSWORD\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var example = new Kubernetes(\"example\", KubernetesArgs.builder()        \n            .skipValidation(true)\n            .authentication(KubernetesAuthenticationArgs.builder()\n                .usernamePassword(KubernetesAuthenticationUsernamePasswordArgs.builder()\n                    .masterUrl(\"https://localhost.com\")\n                    .usernameSecretName(username.name())\n                    .passwordSecretName(password.name())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  username:\n    type: harness:EncryptedText\n    properties:\n      value: \u003cUSERNAME\u003e\n      secretManagerId: ${default.id}\n  password:\n    type: harness:EncryptedText\n    properties:\n      value: \u003cPASSWORD\u003e\n      secretManagerId: ${default.id}\n  example:\n    type: harness:cloudprovider:Kubernetes\n    properties:\n      skipValidation: true\n      authentication:\n        usernamePassword:\n          masterUrl: https://localhost.com\n          usernameSecretName: ${username.name}\n          passwordSecretName: ${password.name}\nvariables:\n  default:\n    Fn::Invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness kubernetes cloud provider id.\n\n```sh\n $ pulumi import harness:cloudprovider/kubernetes:Kubernetes example \u003cprovider_id\u003e\n```\n\n ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/harness:cloudprovider/KubernetesAuthentication:KubernetesAuthentication",
                    "description": "Authentication configuration for the Kubernetes cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of Kubernetes configuration.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/KubernetesUsageScope:KubernetesUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "required": [
                "authentication",
                "name"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/harness:cloudprovider/KubernetesAuthentication:KubernetesAuthentication",
                    "description": "Authentication configuration for the Kubernetes cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of Kubernetes configuration.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/KubernetesUsageScope:KubernetesUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "requiredInputs": [
                "authentication"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Kubernetes resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/harness:cloudprovider/KubernetesAuthentication:KubernetesAuthentication",
                        "description": "Authentication configuration for the Kubernetes cluster\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "skipValidation": {
                        "type": "boolean",
                        "description": "Skip validation of Kubernetes configuration.\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:cloudprovider/KubernetesUsageScope:KubernetesUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/spot:Spot": {
            "description": "Resource for creating a Spot cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst spotToken = new harness.EncryptedText(\"spotToken\", {\n    secretManagerId: _default.then(_default =\u003e _default.id),\n    value: \"\u003cSPOT_TOKEN\u003e\",\n});\nconst example = new harness.cloudprovider.Spot(\"example\", {\n    accountId: \"\u003cSPOT_ACCOUNT_ID\u003e\",\n    tokenSecretName: spotToken.name,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\nspot_token = harness.EncryptedText(\"spotToken\",\n    secret_manager_id=default.id,\n    value=\"\u003cSPOT_TOKEN\u003e\")\nexample = harness.cloudprovider.Spot(\"example\",\n    account_id=\"\u003cSPOT_ACCOUNT_ID\u003e\",\n    token_secret_name=spot_token.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var spotToken = new Harness.EncryptedText(\"spotToken\", new()\n    {\n        SecretManagerId = @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult).Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n        Value = \"\u003cSPOT_TOKEN\u003e\",\n    });\n\n    var example = new Harness.Cloudprovider.Spot(\"example\", new()\n    {\n        AccountId = \"\u003cSPOT_ACCOUNT_ID\u003e\",\n        TokenSecretName = spotToken.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tspotToken, err := harness.NewEncryptedText(ctx, \"spotToken\", \u0026harness.EncryptedTextArgs{\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t\tValue:           pulumi.String(\"\u003cSPOT_TOKEN\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudprovider.NewSpot(ctx, \"example\", \u0026cloudprovider.SpotArgs{\n\t\t\tAccountId:       pulumi.String(\"\u003cSPOT_ACCOUNT_ID\u003e\"),\n\t\t\tTokenSecretName: spotToken.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.cloudprovider.Spot;\nimport com.pulumi.harness.cloudprovider.SpotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var spotToken = new EncryptedText(\"spotToken\", EncryptedTextArgs.builder()        \n            .secretManagerId(default_.id())\n            .value(\"\u003cSPOT_TOKEN\u003e\")\n            .build());\n\n        var example = new Spot(\"example\", SpotArgs.builder()        \n            .accountId(\"\u003cSPOT_ACCOUNT_ID\u003e\")\n            .tokenSecretName(spotToken.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  spotToken:\n    type: harness:EncryptedText\n    properties:\n      secretManagerId: ${default.id}\n      value: \u003cSPOT_TOKEN\u003e\n  example:\n    type: harness:cloudprovider:Spot\n    properties:\n      accountId: \u003cSPOT_ACCOUNT_ID\u003e\n      tokenSecretName: ${spotToken.name}\nvariables:\n  default:\n    Fn::Invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness Spot cloud provider id.\n\n```sh\n $ pulumi import harness:cloudprovider/spot:Spot example \u003cprovider_id\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The Spot account ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "tokenSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the spot account token\n"
                }
            },
            "required": [
                "accountId",
                "name",
                "tokenSecretName"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "The Spot account ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "tokenSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the spot account token\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "tokenSecretName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Spot resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The Spot account ID\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "tokenSecretName": {
                        "type": "string",
                        "description": "The name of the Harness secret containing the spot account token\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/tanzu:Tanzu": {
            "description": "Resource for creating a Tanzu cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst tanzuPassword = new harness.EncryptedText(\"tanzuPassword\", {\n    value: \"\u003cPASSWORD\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst example = new harness.cloudprovider.Tanzu(\"example\", {\n    endpoint: \"https://endpoint.com\",\n    skipValidation: true,\n    username: \"\u003cUSERNAME\u003e\",\n    passwordSecretName: tanzuPassword.name,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\ntanzu_password = harness.EncryptedText(\"tanzuPassword\",\n    value=\"\u003cPASSWORD\u003e\",\n    secret_manager_id=default.id)\nexample = harness.cloudprovider.Tanzu(\"example\",\n    endpoint=\"https://endpoint.com\",\n    skip_validation=True,\n    username=\"\u003cUSERNAME\u003e\",\n    password_secret_name=tanzu_password.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var tanzuPassword = new Harness.EncryptedText(\"tanzuPassword\", new()\n    {\n        Value = \"\u003cPASSWORD\u003e\",\n        SecretManagerId = @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult).Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var example = new Harness.Cloudprovider.Tanzu(\"example\", new()\n    {\n        Endpoint = \"https://endpoint.com\",\n        SkipValidation = true,\n        Username = \"\u003cUSERNAME\u003e\",\n        PasswordSecretName = tanzuPassword.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttanzuPassword, err := harness.NewEncryptedText(ctx, \"tanzuPassword\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"\u003cPASSWORD\u003e\"),\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudprovider.NewTanzu(ctx, \"example\", \u0026cloudprovider.TanzuArgs{\n\t\t\tEndpoint:           pulumi.String(\"https://endpoint.com\"),\n\t\t\tSkipValidation:     pulumi.Bool(true),\n\t\t\tUsername:           pulumi.String(\"\u003cUSERNAME\u003e\"),\n\t\t\tPasswordSecretName: tanzuPassword.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.cloudprovider.Tanzu;\nimport com.pulumi.harness.cloudprovider.TanzuArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var tanzuPassword = new EncryptedText(\"tanzuPassword\", EncryptedTextArgs.builder()        \n            .value(\"\u003cPASSWORD\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var example = new Tanzu(\"example\", TanzuArgs.builder()        \n            .endpoint(\"https://endpoint.com\")\n            .skipValidation(true)\n            .username(\"\u003cUSERNAME\u003e\")\n            .passwordSecretName(tanzuPassword.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tanzuPassword:\n    type: harness:EncryptedText\n    properties:\n      value: \u003cPASSWORD\u003e\n      secretManagerId: ${default.id}\n  example:\n    type: harness:cloudprovider:Tanzu\n    properties:\n      endpoint: https://endpoint.com\n      skipValidation: true\n      username: \u003cUSERNAME\u003e\n      passwordSecretName: ${tanzuPassword.name}\nvariables:\n  default:\n    Fn::Invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness Tanzu cloud provider id.\n\n```sh\n $ pulumi import harness:cloudprovider/tanzu:Tanzu example \u003cprovider_id\u003e\n```\n\n ",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "The url of the Tanzu platform.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "passwordSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the password to use to authenticate to Tanzu.\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of Tanzu configuration.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use to authenticate to Tanzu.\n"
                },
                "usernameSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the username to authenticate to Tanzu with.\n"
                }
            },
            "required": [
                "endpoint",
                "name",
                "passwordSecretName"
            ],
            "inputProperties": {
                "endpoint": {
                    "type": "string",
                    "description": "The url of the Tanzu platform.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "passwordSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the password to use to authenticate to Tanzu.\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of Tanzu configuration.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use to authenticate to Tanzu.\n"
                },
                "usernameSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the username to authenticate to Tanzu with.\n"
                }
            },
            "requiredInputs": [
                "endpoint",
                "passwordSecretName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tanzu resources.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "The url of the Tanzu platform.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "passwordSecretName": {
                        "type": "string",
                        "description": "The name of the Harness secret containing the password to use to authenticate to Tanzu.\n"
                    },
                    "skipValidation": {
                        "type": "boolean",
                        "description": "Skip validation of Tanzu configuration.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username to use to authenticate to Tanzu.\n"
                    },
                    "usernameSecretName": {
                        "type": "string",
                        "description": "The name of the Harness secret containing the username to authenticate to Tanzu with.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/addUserToGroup:AddUserToGroup": {
            "description": "Resource for adding a user to a group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst exampleUser = harness.getUser({\n    email: \"testuser@example.com\",\n});\nconst admin = new harness.UserGroup(\"admin\", {});\nconst exampleAddUserToGroups = new harness.AddUserToGroup(\"exampleAddUserToGroups\", {\n    groupId: admin.id,\n    userId: data.harness_user.test.id,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\nexample_user = harness.get_user(email=\"testuser@example.com\")\nadmin = harness.UserGroup(\"admin\")\nexample_add_user_to_groups = harness.AddUserToGroup(\"exampleAddUserToGroups\",\n    group_id=admin.id,\n    user_id=data[\"harness_user\"][\"test\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUser = Harness.GetUser.Invoke(new()\n    {\n        Email = \"testuser@example.com\",\n    });\n\n    var admin = new Harness.UserGroup(\"admin\");\n\n    var exampleAddUserToGroups = new Harness.AddUserToGroup(\"exampleAddUserToGroups\", new()\n    {\n        GroupId = admin.Id,\n        UserId = data.Harness_user.Test.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.LookupUser(ctx, \u0026GetUserArgs{\n\t\t\tEmail: pulumi.StringRef(\"testuser@example.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tadmin, err := harness.NewUserGroup(ctx, \"admin\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewAddUserToGroup(ctx, \"exampleAddUserToGroups\", \u0026harness.AddUserToGroupArgs{\n\t\t\tGroupId: admin.ID(),\n\t\t\tUserId:  pulumi.Any(data.Harness_user.Test.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetUserArgs;\nimport com.pulumi.harness.UserGroup;\nimport com.pulumi.harness.AddUserToGroup;\nimport com.pulumi.harness.AddUserToGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUser = HarnessFunctions.getUser(GetUserArgs.builder()\n            .email(\"testuser@example.com\")\n            .build());\n\n        var admin = new UserGroup(\"admin\");\n\n        var exampleAddUserToGroups = new AddUserToGroup(\"exampleAddUserToGroups\", AddUserToGroupArgs.builder()        \n            .groupId(admin.id())\n            .userId(data.harness_user().test().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  admin:\n    type: harness:UserGroup\n  exampleAddUserToGroups:\n    type: harness:AddUserToGroup\n    properties:\n      groupId: ${admin.id}\n      userId: ${data.harness_user.test.id}\nvariables:\n  exampleUser:\n    Fn::Invoke:\n      Function: harness:getUser\n      Arguments:\n        email: testuser@example.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness user and user group id\n\n```sh\n $ pulumi import harness:index/addUserToGroup:AddUserToGroup example_admin \u003cuser_id\u003e/\u003cgroup_id\u003e\n```\n\n ",
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "Unique identifier of the user.\n"
                }
            },
            "required": [
                "groupId",
                "userId"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "string",
                    "description": "The name of the user.\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "Unique identifier of the user.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "groupId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AddUserToGroup resources.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "The name of the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "Unique identifier of the user.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "harness:index/application:Application": {
            "description": "Resource for creating a Harness application\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst myapp = new harness.Application(\"myapp\", {\n    description: \"This is my first Harness application\",\n    tags: [\n        \"mytag:myvalue\",\n        \"team:development\",\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nmyapp = harness.Application(\"myapp\",\n    description=\"This is my first Harness application\",\n    tags=[\n        \"mytag:myvalue\",\n        \"team:development\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Harness.Application(\"myapp\", new()\n    {\n        Description = \"This is my first Harness application\",\n        Tags = new[]\n        {\n            \"mytag:myvalue\",\n            \"team:development\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.NewApplication(ctx, \"myapp\", \u0026harness.ApplicationArgs{\n\t\t\tDescription: pulumi.String(\"This is my first Harness application\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"mytag:myvalue\"),\n\t\t\t\tpulumi.String(\"team:development\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.ApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Application(\"myapp\", ApplicationArgs.builder()        \n            .description(\"This is my first Harness application\")\n            .tags(            \n                \"mytag:myvalue\",\n                \"team:development\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: harness:Application\n    properties:\n      description: This is my first Harness application\n      tags:\n        - mytag:myvalue\n        - team:development\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id\n\n```sh\n $ pulumi import harness:index/application:Application myapp Xyz123\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The application description\n"
                },
                "gitSyncConnectorId": {
                    "type": "string",
                    "description": "The id of the git sync connector\n"
                },
                "gitSyncEnabled": {
                    "type": "boolean",
                    "description": "True if git sync is enabled on this application\n"
                },
                "isManualTriggerAuthorized": {
                    "type": "boolean",
                    "description": "When this is set to true, all manual triggers will require API Key authorization\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "required": [
                "gitSyncConnectorId",
                "gitSyncEnabled",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The application description\n"
                },
                "isManualTriggerAuthorized": {
                    "type": "boolean",
                    "description": "When this is set to true, all manual triggers will require API Key authorization\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Application resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The application description\n"
                    },
                    "gitSyncConnectorId": {
                        "type": "string",
                        "description": "The id of the git sync connector\n"
                    },
                    "gitSyncEnabled": {
                        "type": "boolean",
                        "description": "True if git sync is enabled on this application\n"
                    },
                    "isManualTriggerAuthorized": {
                        "type": "boolean",
                        "description": "When this is set to true, all manual triggers will require API Key authorization\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the application\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/applicationGitSync:ApplicationGitSync": {
            "description": "Resource for configuring application git sync.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst githubToken = new harness.EncryptedText(\"githubToken\", {\n    value: \"\u003cTOKEN\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst myrepo = new harness.GitConnector(\"myrepo\", {\n    url: \"https://github.com/someorg/myrepo\",\n    branch: \"main\",\n    generateWebhookUrl: true,\n    username: \"someuser\",\n    passwordSecretId: githubToken.id,\n    urlType: \"REPO\",\n});\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleApplicationGitSync = new harness.ApplicationGitSync(\"exampleApplicationGitSync\", {\n    appId: exampleApplication.id,\n    connectorId: myrepo.id,\n    branch: \"main\",\n    enabled: false,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\ngithub_token = harness.EncryptedText(\"githubToken\",\n    value=\"\u003cTOKEN\u003e\",\n    secret_manager_id=default.id)\nmyrepo = harness.GitConnector(\"myrepo\",\n    url=\"https://github.com/someorg/myrepo\",\n    branch=\"main\",\n    generate_webhook_url=True,\n    username=\"someuser\",\n    password_secret_id=github_token.id,\n    url_type=\"REPO\")\nexample_application = harness.Application(\"exampleApplication\")\nexample_application_git_sync = harness.ApplicationGitSync(\"exampleApplicationGitSync\",\n    app_id=example_application.id,\n    connector_id=myrepo.id,\n    branch=\"main\",\n    enabled=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var githubToken = new Harness.EncryptedText(\"githubToken\", new()\n    {\n        Value = \"\u003cTOKEN\u003e\",\n        SecretManagerId = @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult).Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var myrepo = new Harness.GitConnector(\"myrepo\", new()\n    {\n        Url = \"https://github.com/someorg/myrepo\",\n        Branch = \"main\",\n        GenerateWebhookUrl = true,\n        Username = \"someuser\",\n        PasswordSecretId = githubToken.Id,\n        UrlType = \"REPO\",\n    });\n\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleApplicationGitSync = new Harness.ApplicationGitSync(\"exampleApplicationGitSync\", new()\n    {\n        AppId = exampleApplication.Id,\n        ConnectorId = myrepo.Id,\n        Branch = \"main\",\n        Enabled = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgithubToken, err := harness.NewEncryptedText(ctx, \"githubToken\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"\u003cTOKEN\u003e\"),\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyrepo, err := harness.NewGitConnector(ctx, \"myrepo\", \u0026harness.GitConnectorArgs{\n\t\t\tUrl:                pulumi.String(\"https://github.com/someorg/myrepo\"),\n\t\t\tBranch:             pulumi.String(\"main\"),\n\t\t\tGenerateWebhookUrl: pulumi.Bool(true),\n\t\t\tUsername:           pulumi.String(\"someuser\"),\n\t\t\tPasswordSecretId:   githubToken.ID(),\n\t\t\tUrlType:            pulumi.String(\"REPO\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewApplicationGitSync(ctx, \"exampleApplicationGitSync\", \u0026harness.ApplicationGitSyncArgs{\n\t\t\tAppId:       exampleApplication.ID(),\n\t\t\tConnectorId: myrepo.ID(),\n\t\t\tBranch:      pulumi.String(\"main\"),\n\t\t\tEnabled:     pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.GitConnector;\nimport com.pulumi.harness.GitConnectorArgs;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.ApplicationGitSync;\nimport com.pulumi.harness.ApplicationGitSyncArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var githubToken = new EncryptedText(\"githubToken\", EncryptedTextArgs.builder()        \n            .value(\"\u003cTOKEN\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var myrepo = new GitConnector(\"myrepo\", GitConnectorArgs.builder()        \n            .url(\"https://github.com/someorg/myrepo\")\n            .branch(\"main\")\n            .generateWebhookUrl(true)\n            .username(\"someuser\")\n            .passwordSecretId(githubToken.id())\n            .urlType(\"REPO\")\n            .build());\n\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleApplicationGitSync = new ApplicationGitSync(\"exampleApplicationGitSync\", ApplicationGitSyncArgs.builder()        \n            .appId(exampleApplication.id())\n            .connectorId(myrepo.id())\n            .branch(\"main\")\n            .enabled(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  githubToken:\n    type: harness:EncryptedText\n    properties:\n      value: \u003cTOKEN\u003e\n      secretManagerId: ${default.id}\n  myrepo:\n    type: harness:GitConnector\n    properties:\n      url: https://github.com/someorg/myrepo\n      branch: main\n      generateWebhookUrl: true\n      username: someuser\n      passwordSecretId: ${githubToken.id}\n      urlType: REPO\n  exampleApplication:\n    type: harness:Application\n  exampleApplicationGitSync:\n    type: harness:ApplicationGitSync\n    properties:\n      appId: ${exampleApplication.id}\n      connectorId: ${myrepo.id}\n      branch: main\n      enabled: false\nvariables:\n  default:\n    Fn::Invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id\n\n```sh\n $ pulumi import harness:index/applicationGitSync:ApplicationGitSync myapp Xyz123\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "The branch of the git repository to sync to.\n"
                },
                "connectorId": {
                    "type": "string",
                    "description": "The id of the git connector to use.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not to enable git sync.\n"
                },
                "repositoryName": {
                    "type": "string",
                    "description": "The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.\n"
                }
            },
            "required": [
                "appId",
                "branch",
                "connectorId"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "The branch of the git repository to sync to.\n"
                },
                "connectorId": {
                    "type": "string",
                    "description": "The id of the git connector to use.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not to enable git sync.\n"
                },
                "repositoryName": {
                    "type": "string",
                    "description": "The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.\n"
                }
            },
            "requiredInputs": [
                "appId",
                "branch",
                "connectorId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationGitSync resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application.\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "The branch of the git repository to sync to.\n"
                    },
                    "connectorId": {
                        "type": "string",
                        "description": "The id of the git connector to use.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether or not to enable git sync.\n"
                    },
                    "repositoryName": {
                        "type": "string",
                        "description": "The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/delegateApproval:DelegateApproval": {
            "description": "Resource for approving or rejecting delegates.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst testDelegate = harness.getDelegate({\n    name: \"my-delegate\",\n});\nconst testDelegateApproval = new harness.DelegateApproval(\"testDelegateApproval\", {\n    delegateId: testDelegate.then(testDelegate =\u003e testDelegate.id),\n    approve: true,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ntest_delegate = harness.get_delegate(name=\"my-delegate\")\ntest_delegate_approval = harness.DelegateApproval(\"testDelegateApproval\",\n    delegate_id=test_delegate.id,\n    approve=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testDelegate = Harness.GetDelegate.Invoke(new()\n    {\n        Name = \"my-delegate\",\n    });\n\n    var testDelegateApproval = new Harness.DelegateApproval(\"testDelegateApproval\", new()\n    {\n        DelegateId = testDelegate.Apply(getDelegateResult =\u003e getDelegateResult.Id),\n        Approve = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestDelegate, err := harness.GetDelegate(ctx, \u0026GetDelegateArgs{\n\t\t\tName: pulumi.StringRef(\"my-delegate\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewDelegateApproval(ctx, \"testDelegateApproval\", \u0026harness.DelegateApprovalArgs{\n\t\t\tDelegateId: pulumi.String(testDelegate.Id),\n\t\t\tApprove:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetDelegateArgs;\nimport com.pulumi.harness.DelegateApproval;\nimport com.pulumi.harness.DelegateApprovalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testDelegate = HarnessFunctions.getDelegate(GetDelegateArgs.builder()\n            .name(\"my-delegate\")\n            .build());\n\n        var testDelegateApproval = new DelegateApproval(\"testDelegateApproval\", DelegateApprovalArgs.builder()        \n            .delegateId(testDelegate.applyValue(getDelegateResult -\u003e getDelegateResult.id()))\n            .approve(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testDelegateApproval:\n    type: harness:DelegateApproval\n    properties:\n      delegateId: ${testDelegate.id}\n      approve: true\nvariables:\n  testDelegate:\n    Fn::Invoke:\n      Function: harness:getDelegate\n      Arguments:\n        name: my-delegate\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport the status of the delegate approval.\n\n```sh\n $ pulumi import harness:index/delegateApproval:DelegateApproval example \u003cdelegate_id\u003e\n```\n\n ",
            "properties": {
                "approve": {
                    "type": "boolean",
                    "description": "Whether or not to approve the delegate.\n"
                },
                "delegateId": {
                    "type": "string",
                    "description": "The id of the delegate.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the delegate.\n"
                }
            },
            "required": [
                "approve",
                "delegateId",
                "status"
            ],
            "inputProperties": {
                "approve": {
                    "type": "boolean",
                    "description": "Whether or not to approve the delegate.\n",
                    "willReplaceOnChanges": true
                },
                "delegateId": {
                    "type": "string",
                    "description": "The id of the delegate.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "approve",
                "delegateId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DelegateApproval resources.\n",
                "properties": {
                    "approve": {
                        "type": "boolean",
                        "description": "Whether or not to approve the delegate.\n",
                        "willReplaceOnChanges": true
                    },
                    "delegateId": {
                        "type": "string",
                        "description": "The id of the delegate.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the delegate.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/encryptedText:EncryptedText": {
            "description": "Resource for creating an encrypted text secret\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst example = new harness.EncryptedText(\"example\", {\n    value: \"someval\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n    usageScopes: [\n        {\n            environmentFilterType: \"PRODUCTION_ENVIRONMENTS\",\n        },\n        {\n            environmentFilterType: \"NON_PRODUCTION_ENVIRONMENTS\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\nexample = harness.EncryptedText(\"example\",\n    value=\"someval\",\n    secret_manager_id=default.id,\n    usage_scopes=[\n        harness.EncryptedTextUsageScopeArgs(\n            environment_filter_type=\"PRODUCTION_ENVIRONMENTS\",\n        ),\n        harness.EncryptedTextUsageScopeArgs(\n            environment_filter_type=\"NON_PRODUCTION_ENVIRONMENTS\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var example = new Harness.EncryptedText(\"example\", new()\n    {\n        Value = \"someval\",\n        SecretManagerId = @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult).Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n        UsageScopes = new[]\n        {\n            new Harness.Inputs.EncryptedTextUsageScopeArgs\n            {\n                EnvironmentFilterType = \"PRODUCTION_ENVIRONMENTS\",\n            },\n            new Harness.Inputs.EncryptedTextUsageScopeArgs\n            {\n                EnvironmentFilterType = \"NON_PRODUCTION_ENVIRONMENTS\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewEncryptedText(ctx, \"example\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"someval\"),\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t\tUsageScopes: EncryptedTextUsageScopeArray{\n\t\t\t\t\u0026EncryptedTextUsageScopeArgs{\n\t\t\t\t\tEnvironmentFilterType: pulumi.String(\"PRODUCTION_ENVIRONMENTS\"),\n\t\t\t\t},\n\t\t\t\t\u0026EncryptedTextUsageScopeArgs{\n\t\t\t\t\tEnvironmentFilterType: pulumi.String(\"NON_PRODUCTION_ENVIRONMENTS\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.inputs.EncryptedTextUsageScopeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var example = new EncryptedText(\"example\", EncryptedTextArgs.builder()        \n            .value(\"someval\")\n            .secretManagerId(default_.id())\n            .usageScopes(            \n                EncryptedTextUsageScopeArgs.builder()\n                    .environmentFilterType(\"PRODUCTION_ENVIRONMENTS\")\n                    .build(),\n                EncryptedTextUsageScopeArgs.builder()\n                    .environmentFilterType(\"NON_PRODUCTION_ENVIRONMENTS\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:EncryptedText\n    properties:\n      value: someval\n      secretManagerId: ${default.id}\n      usageScopes:\n        - environmentFilterType: PRODUCTION_ENVIRONMENTS\n        - environmentFilterType: NON_PRODUCTION_ENVIRONMENTS\nvariables:\n  default:\n    Fn::Invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness encrypted text format. NOTEThe secret value cannot be decrypted and imported.\n\n```sh\n $ pulumi import harness:index/encryptedText:EncryptedText example \u003csecret_id\u003e\n```\n\n ",
            "properties": {
                "inheritScopesFromSecretManager": {
                    "type": "boolean",
                    "description": "Boolean that indicates whether or not to inherit the usage scopes from the secret manager\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the encrypted text secret\n"
                },
                "scopedToAccount": {
                    "type": "boolean",
                    "description": "Boolean that indicates whether or not the secret is scoped to the account\n"
                },
                "secretManagerId": {
                    "type": "string",
                    "description": "The id of the secret manager to associate the secret with. Once set, this field cannot be changed.\n"
                },
                "secretReference": {
                    "type": "string",
                    "description": "Name of the existing secret. If you already have secrets created in a secrets manager such as HashiCorp Vault or AWS Secrets Manager, you do not need to re-create the existing secrets in Harness.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/EncryptedTextUsageScope:EncryptedTextUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the secret.\n",
                    "secret": true
                }
            },
            "required": [
                "name",
                "secretManagerId"
            ],
            "inputProperties": {
                "inheritScopesFromSecretManager": {
                    "type": "boolean",
                    "description": "Boolean that indicates whether or not to inherit the usage scopes from the secret manager\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the encrypted text secret\n"
                },
                "scopedToAccount": {
                    "type": "boolean",
                    "description": "Boolean that indicates whether or not the secret is scoped to the account\n"
                },
                "secretManagerId": {
                    "type": "string",
                    "description": "The id of the secret manager to associate the secret with. Once set, this field cannot be changed.\n",
                    "willReplaceOnChanges": true
                },
                "secretReference": {
                    "type": "string",
                    "description": "Name of the existing secret. If you already have secrets created in a secrets manager such as HashiCorp Vault or AWS Secrets Manager, you do not need to re-create the existing secrets in Harness.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/EncryptedTextUsageScope:EncryptedTextUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the secret.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "secretManagerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EncryptedText resources.\n",
                "properties": {
                    "inheritScopesFromSecretManager": {
                        "type": "boolean",
                        "description": "Boolean that indicates whether or not to inherit the usage scopes from the secret manager\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the encrypted text secret\n"
                    },
                    "scopedToAccount": {
                        "type": "boolean",
                        "description": "Boolean that indicates whether or not the secret is scoped to the account\n"
                    },
                    "secretManagerId": {
                        "type": "string",
                        "description": "The id of the secret manager to associate the secret with. Once set, this field cannot be changed.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretReference": {
                        "type": "string",
                        "description": "Name of the existing secret. If you already have secrets created in a secrets manager such as HashiCorp Vault or AWS Secrets Manager, you do not need to re-create the existing secrets in Harness.\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/EncryptedTextUsageScope:EncryptedTextUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the secret.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "harness:index/environment:Environment": {
            "description": "Resource for creating an environment\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst testApplication = new harness.Application(\"testApplication\", {});\nconst testKubernetes = new harness.service.Kubernetes(\"testKubernetes\", {\n    appId: testApplication.id,\n    helmVersion: \"V2\",\n    description: \"description\",\n    variables: [\n        {\n            name: \"test\",\n            value: \"test_value\",\n            type: \"TEXT\",\n        },\n        {\n            name: \"test2\",\n            value: \"test_value2\",\n            type: \"TEXT\",\n        },\n    ],\n});\nconst testEnvironment = new harness.Environment(\"testEnvironment\", {\n    appId: testApplication.id,\n    type: `%[2]s`,\n    variableOverrides: [\n        {\n            serviceName: testKubernetes.name,\n            name: \"test\",\n            value: \"override\",\n            type: \"TEXT\",\n        },\n        {\n            serviceName: testKubernetes.name,\n            name: \"test2\",\n            value: \"override2\",\n            type: \"TEXT\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest_application = harness.Application(\"testApplication\")\ntest_kubernetes = harness.service.Kubernetes(\"testKubernetes\",\n    app_id=test_application.id,\n    helm_version=\"V2\",\n    description=\"description\",\n    variables=[\n        harness.service.KubernetesVariableArgs(\n            name=\"test\",\n            value=\"test_value\",\n            type=\"TEXT\",\n        ),\n        harness.service.KubernetesVariableArgs(\n            name=\"test2\",\n            value=\"test_value2\",\n            type=\"TEXT\",\n        ),\n    ])\ntest_environment = harness.Environment(\"testEnvironment\",\n    app_id=test_application.id,\n    type=\"%[2]s\",\n    variable_overrides=[\n        harness.EnvironmentVariableOverrideArgs(\n            service_name=test_kubernetes.name,\n            name=\"test\",\n            value=\"override\",\n            type=\"TEXT\",\n        ),\n        harness.EnvironmentVariableOverrideArgs(\n            service_name=test_kubernetes.name,\n            name=\"test2\",\n            value=\"override2\",\n            type=\"TEXT\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testApplication = new Harness.Application(\"testApplication\");\n\n    var testKubernetes = new Harness.Service.Kubernetes(\"testKubernetes\", new()\n    {\n        AppId = testApplication.Id,\n        HelmVersion = \"V2\",\n        Description = \"description\",\n        Variables = new[]\n        {\n            new Harness.Service.Inputs.KubernetesVariableArgs\n            {\n                Name = \"test\",\n                Value = \"test_value\",\n                Type = \"TEXT\",\n            },\n            new Harness.Service.Inputs.KubernetesVariableArgs\n            {\n                Name = \"test2\",\n                Value = \"test_value2\",\n                Type = \"TEXT\",\n            },\n        },\n    });\n\n    var testEnvironment = new Harness.Environment(\"testEnvironment\", new()\n    {\n        AppId = testApplication.Id,\n        Type = \"%[2]s\",\n        VariableOverrides = new[]\n        {\n            new Harness.Inputs.EnvironmentVariableOverrideArgs\n            {\n                ServiceName = testKubernetes.Name,\n                Name = \"test\",\n                Value = \"override\",\n                Type = \"TEXT\",\n            },\n            new Harness.Inputs.EnvironmentVariableOverrideArgs\n            {\n                ServiceName = testKubernetes.Name,\n                Name = \"test2\",\n                Value = \"override2\",\n                Type = \"TEXT\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestApplication, err := harness.NewApplication(ctx, \"testApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestKubernetes, err := service.NewKubernetes(ctx, \"testKubernetes\", \u0026service.KubernetesArgs{\n\t\t\tAppId:       testApplication.ID(),\n\t\t\tHelmVersion: pulumi.String(\"V2\"),\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tVariables: service.KubernetesVariableArray{\n\t\t\t\t\u0026service.KubernetesVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"test\"),\n\t\t\t\t\tValue: pulumi.String(\"test_value\"),\n\t\t\t\t\tType:  pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t\t\u0026service.KubernetesVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"test2\"),\n\t\t\t\t\tValue: pulumi.String(\"test_value2\"),\n\t\t\t\t\tType:  pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewEnvironment(ctx, \"testEnvironment\", \u0026harness.EnvironmentArgs{\n\t\t\tAppId: testApplication.ID(),\n\t\t\tType:  pulumi.String(fmt.Sprintf(\"%v[2]s\", \"%\")),\n\t\t\tVariableOverrides: EnvironmentVariableOverrideArray{\n\t\t\t\t\u0026EnvironmentVariableOverrideArgs{\n\t\t\t\t\tServiceName: testKubernetes.Name,\n\t\t\t\t\tName:        pulumi.String(\"test\"),\n\t\t\t\t\tValue:       pulumi.String(\"override\"),\n\t\t\t\t\tType:        pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t\t\u0026EnvironmentVariableOverrideArgs{\n\t\t\t\t\tServiceName: testKubernetes.Name,\n\t\t\t\t\tName:        pulumi.String(\"test2\"),\n\t\t\t\t\tValue:       pulumi.String(\"override2\"),\n\t\t\t\t\tType:        pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Kubernetes;\nimport com.pulumi.harness.service.KubernetesArgs;\nimport com.pulumi.harness.service.inputs.KubernetesVariableArgs;\nimport com.pulumi.harness.Environment;\nimport com.pulumi.harness.EnvironmentArgs;\nimport com.pulumi.harness.inputs.EnvironmentVariableOverrideArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testApplication = new Application(\"testApplication\");\n\n        var testKubernetes = new Kubernetes(\"testKubernetes\", KubernetesArgs.builder()        \n            .appId(testApplication.id())\n            .helmVersion(\"V2\")\n            .description(\"description\")\n            .variables(            \n                KubernetesVariableArgs.builder()\n                    .name(\"test\")\n                    .value(\"test_value\")\n                    .type(\"TEXT\")\n                    .build(),\n                KubernetesVariableArgs.builder()\n                    .name(\"test2\")\n                    .value(\"test_value2\")\n                    .type(\"TEXT\")\n                    .build())\n            .build());\n\n        var testEnvironment = new Environment(\"testEnvironment\", EnvironmentArgs.builder()        \n            .appId(testApplication.id())\n            .type(\"%[2]s\")\n            .variableOverrides(            \n                EnvironmentVariableOverrideArgs.builder()\n                    .serviceName(testKubernetes.name())\n                    .name(\"test\")\n                    .value(\"override\")\n                    .type(\"TEXT\")\n                    .build(),\n                EnvironmentVariableOverrideArgs.builder()\n                    .serviceName(testKubernetes.name())\n                    .name(\"test2\")\n                    .value(\"override2\")\n                    .type(\"TEXT\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testApplication:\n    type: harness:Application\n  testKubernetes:\n    type: harness:service:Kubernetes\n    properties:\n      appId: ${testApplication.id}\n      helmVersion: V2\n      description: description\n      variables:\n        - name: test\n          value: test_value\n          type: TEXT\n        - name: test2\n          value: test_value2\n          type: TEXT\n  testEnvironment:\n    type: harness:Environment\n    properties:\n      appId: ${testApplication.id}\n      type: '%[2]s'\n      variableOverrides:\n        - serviceName: ${testKubernetes.name}\n          name: test\n          value: override\n          type: TEXT\n        - serviceName: ${testKubernetes.name}\n          name: test2\n          value: override2\n          type: TEXT\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and environment id.\n\n```sh\n $ pulumi import harness:index/environment:Environment dev \u003capplication_id\u003e/\u003cenvironment_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the environment. Valid values are `PROD` and `NON_PROD`\n"
                },
                "variableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/EnvironmentVariableOverride:EnvironmentVariableOverride"
                    },
                    "description": "Override for a service variable\n"
                }
            },
            "required": [
                "appId",
                "name",
                "type"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the environment. Valid values are `PROD` and `NON_PROD`\n"
                },
                "variableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/EnvironmentVariableOverride:EnvironmentVariableOverride"
                    },
                    "description": "Override for a service variable\n"
                }
            },
            "requiredInputs": [
                "appId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the environment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the environment. Valid values are `PROD` and `NON_PROD`\n"
                    },
                    "variableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/EnvironmentVariableOverride:EnvironmentVariableOverride"
                        },
                        "description": "Override for a service variable\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/gitConnector:GitConnector": {
            "description": "Resource for creating a git connector\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst exampleEncryptedText = new harness.EncryptedText(\"exampleEncryptedText\", {\n    value: \"foo\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst exampleGitConnector = new harness.GitConnector(\"exampleGitConnector\", {\n    url: \"https://github.com/harness/terraform-provider-harness\",\n    branch: \"master\",\n    generateWebhookUrl: true,\n    passwordSecretId: exampleEncryptedText.id,\n    urlType: \"REPO\",\n    username: \"someuser\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\nexample_encrypted_text = harness.EncryptedText(\"exampleEncryptedText\",\n    value=\"foo\",\n    secret_manager_id=default.id)\nexample_git_connector = harness.GitConnector(\"exampleGitConnector\",\n    url=\"https://github.com/harness/terraform-provider-harness\",\n    branch=\"master\",\n    generate_webhook_url=True,\n    password_secret_id=example_encrypted_text.id,\n    url_type=\"REPO\",\n    username=\"someuser\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var exampleEncryptedText = new Harness.EncryptedText(\"exampleEncryptedText\", new()\n    {\n        Value = \"foo\",\n        SecretManagerId = @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult).Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var exampleGitConnector = new Harness.GitConnector(\"exampleGitConnector\", new()\n    {\n        Url = \"https://github.com/harness/terraform-provider-harness\",\n        Branch = \"master\",\n        GenerateWebhookUrl = true,\n        PasswordSecretId = exampleEncryptedText.Id,\n        UrlType = \"REPO\",\n        Username = \"someuser\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEncryptedText, err := harness.NewEncryptedText(ctx, \"exampleEncryptedText\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"foo\"),\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewGitConnector(ctx, \"exampleGitConnector\", \u0026harness.GitConnectorArgs{\n\t\t\tUrl:                pulumi.String(\"https://github.com/harness/terraform-provider-harness\"),\n\t\t\tBranch:             pulumi.String(\"master\"),\n\t\t\tGenerateWebhookUrl: pulumi.Bool(true),\n\t\t\tPasswordSecretId:   exampleEncryptedText.ID(),\n\t\t\tUrlType:            pulumi.String(\"REPO\"),\n\t\t\tUsername:           pulumi.String(\"someuser\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.GitConnector;\nimport com.pulumi.harness.GitConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var exampleEncryptedText = new EncryptedText(\"exampleEncryptedText\", EncryptedTextArgs.builder()        \n            .value(\"foo\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var exampleGitConnector = new GitConnector(\"exampleGitConnector\", GitConnectorArgs.builder()        \n            .url(\"https://github.com/harness/terraform-provider-harness\")\n            .branch(\"master\")\n            .generateWebhookUrl(true)\n            .passwordSecretId(exampleEncryptedText.id())\n            .urlType(\"REPO\")\n            .username(\"someuser\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleEncryptedText:\n    type: harness:EncryptedText\n    properties:\n      value: foo\n      secretManagerId: ${default.id}\n  exampleGitConnector:\n    type: harness:GitConnector\n    properties:\n      url: https://github.com/harness/terraform-provider-harness\n      branch: master\n      generateWebhookUrl: true\n      passwordSecretId: ${exampleEncryptedText.id}\n      urlType: REPO\n      username: someuser\nvariables:\n  default:\n    Fn::Invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness git connector id\n\n```sh\n $ pulumi import harness:index/gitConnector:GitConnector example \u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "The branch of the git connector to use\n"
                },
                "commitDetails": {
                    "$ref": "#/types/harness:index/GitConnectorCommitDetails:GitConnectorCommitDetails",
                    "description": "Custom details to use when making commits using this git connector\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The time the git connector was created\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Delegate selectors to apply to this git connector.\n"
                },
                "generateWebhookUrl": {
                    "type": "boolean",
                    "description": "Boolean indicating whether or not to generate a webhook url.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the git connector.\n"
                },
                "passwordSecretId": {
                    "type": "string",
                    "description": "The id of the secret for connecting to the git repository.\n"
                },
                "sshSettingId": {
                    "type": "string",
                    "description": "The id of the SSH secret to use\n"
                },
                "url": {
                    "type": "string",
                    "description": "The url of the git repository or account/organization\n"
                },
                "urlType": {
                    "type": "string",
                    "description": "The type of git url being used. Options are `ACCOUNT`, and `REPO.`\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/GitConnectorUsageScope:GitConnectorUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The name of the user used to connect to the git repository\n"
                },
                "webhookUrl": {
                    "type": "string",
                    "description": "The generated webhook url\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "url",
                "urlType",
                "webhookUrl"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "The branch of the git connector to use\n"
                },
                "commitDetails": {
                    "$ref": "#/types/harness:index/GitConnectorCommitDetails:GitConnectorCommitDetails",
                    "description": "Custom details to use when making commits using this git connector\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Delegate selectors to apply to this git connector.\n"
                },
                "generateWebhookUrl": {
                    "type": "boolean",
                    "description": "Boolean indicating whether or not to generate a webhook url.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the git connector.\n"
                },
                "passwordSecretId": {
                    "type": "string",
                    "description": "The id of the secret for connecting to the git repository.\n"
                },
                "sshSettingId": {
                    "type": "string",
                    "description": "The id of the SSH secret to use\n"
                },
                "url": {
                    "type": "string",
                    "description": "The url of the git repository or account/organization\n"
                },
                "urlType": {
                    "type": "string",
                    "description": "The type of git url being used. Options are `ACCOUNT`, and `REPO.`\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/GitConnectorUsageScope:GitConnectorUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The name of the user used to connect to the git repository\n"
                }
            },
            "requiredInputs": [
                "url",
                "urlType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitConnector resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "The branch of the git connector to use\n"
                    },
                    "commitDetails": {
                        "$ref": "#/types/harness:index/GitConnectorCommitDetails:GitConnectorCommitDetails",
                        "description": "Custom details to use when making commits using this git connector\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The time the git connector was created\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Delegate selectors to apply to this git connector.\n"
                    },
                    "generateWebhookUrl": {
                        "type": "boolean",
                        "description": "Boolean indicating whether or not to generate a webhook url.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the git connector.\n"
                    },
                    "passwordSecretId": {
                        "type": "string",
                        "description": "The id of the secret for connecting to the git repository.\n"
                    },
                    "sshSettingId": {
                        "type": "string",
                        "description": "The id of the SSH secret to use\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The url of the git repository or account/organization\n"
                    },
                    "urlType": {
                        "type": "string",
                        "description": "The type of git url being used. Options are `ACCOUNT`, and `REPO.`\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/GitConnectorUsageScope:GitConnectorUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The name of the user used to connect to the git repository\n"
                    },
                    "webhookUrl": {
                        "type": "string",
                        "description": "The generated webhook url\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/infrastructureDefinition:InfrastructureDefinition": {
            "description": "Resource for creating am infrastructure definition. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Creating a Kubernetes infrastructure definition\nconst devKubernetes = new harness.cloudprovider.Kubernetes(\"devKubernetes\", {authentication: {\n    delegateSelectors: [\"k8s\"],\n}});\nconst example = new harness.Application(\"example\", {});\nconst devEnvironment = new harness.Environment(\"devEnvironment\", {\n    appId: example.id,\n    type: \"NON_PROD\",\n});\nconst k8s = new harness.InfrastructureDefinition(\"k8s\", {\n    appId: example.id,\n    envId: devEnvironment.id,\n    cloudProviderType: \"KUBERNETES_CLUSTER\",\n    deploymentType: \"KUBERNETES\",\n    kubernetes: {\n        cloudProviderName: devKubernetes.name,\n        namespace: \"dev\",\n        releaseName: service.name,\n    },\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Creating a Kubernetes infrastructure definition\ndev_kubernetes = harness.cloudprovider.Kubernetes(\"devKubernetes\", authentication=harness.cloudprovider.KubernetesAuthenticationArgs(\n    delegate_selectors=[\"k8s\"],\n))\nexample = harness.Application(\"example\")\ndev_environment = harness.Environment(\"devEnvironment\",\n    app_id=example.id,\n    type=\"NON_PROD\")\nk8s = harness.InfrastructureDefinition(\"k8s\",\n    app_id=example.id,\n    env_id=dev_environment.id,\n    cloud_provider_type=\"KUBERNETES_CLUSTER\",\n    deployment_type=\"KUBERNETES\",\n    kubernetes=harness.InfrastructureDefinitionKubernetesArgs(\n        cloud_provider_name=dev_kubernetes.name,\n        namespace=\"dev\",\n        release_name=service[\"name\"],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Creating a Kubernetes infrastructure definition\n    var devKubernetes = new Harness.Cloudprovider.Kubernetes(\"devKubernetes\", new()\n    {\n        Authentication = new Harness.Cloudprovider.Inputs.KubernetesAuthenticationArgs\n        {\n            DelegateSelectors = new[]\n            {\n                \"k8s\",\n            },\n        },\n    });\n\n    var example = new Harness.Application(\"example\");\n\n    var devEnvironment = new Harness.Environment(\"devEnvironment\", new()\n    {\n        AppId = example.Id,\n        Type = \"NON_PROD\",\n    });\n\n    var k8s = new Harness.InfrastructureDefinition(\"k8s\", new()\n    {\n        AppId = example.Id,\n        EnvId = devEnvironment.Id,\n        CloudProviderType = \"KUBERNETES_CLUSTER\",\n        DeploymentType = \"KUBERNETES\",\n        Kubernetes = new Harness.Inputs.InfrastructureDefinitionKubernetesArgs\n        {\n            CloudProviderName = devKubernetes.Name,\n            Namespace = \"dev\",\n            ReleaseName = service.Name,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdevKubernetes, err := cloudprovider.NewKubernetes(ctx, \"devKubernetes\", \u0026cloudprovider.KubernetesArgs{\n\t\t\tAuthentication: \u0026cloudprovider.KubernetesAuthenticationArgs{\n\t\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"k8s\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := harness.NewApplication(ctx, \"example\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdevEnvironment, err := harness.NewEnvironment(ctx, \"devEnvironment\", \u0026harness.EnvironmentArgs{\n\t\t\tAppId: example.ID(),\n\t\t\tType:  pulumi.String(\"NON_PROD\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewInfrastructureDefinition(ctx, \"k8s\", \u0026harness.InfrastructureDefinitionArgs{\n\t\t\tAppId:             example.ID(),\n\t\t\tEnvId:             devEnvironment.ID(),\n\t\t\tCloudProviderType: pulumi.String(\"KUBERNETES_CLUSTER\"),\n\t\t\tDeploymentType:    pulumi.String(\"KUBERNETES\"),\n\t\t\tKubernetes: \u0026InfrastructureDefinitionKubernetesArgs{\n\t\t\t\tCloudProviderName: devKubernetes.Name,\n\t\t\t\tNamespace:         pulumi.String(\"dev\"),\n\t\t\t\tReleaseName:       pulumi.Any(service.Name),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.cloudprovider.Kubernetes;\nimport com.pulumi.harness.cloudprovider.KubernetesArgs;\nimport com.pulumi.harness.cloudprovider.inputs.KubernetesAuthenticationArgs;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.Environment;\nimport com.pulumi.harness.EnvironmentArgs;\nimport com.pulumi.harness.InfrastructureDefinition;\nimport com.pulumi.harness.InfrastructureDefinitionArgs;\nimport com.pulumi.harness.inputs.InfrastructureDefinitionKubernetesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var devKubernetes = new Kubernetes(\"devKubernetes\", KubernetesArgs.builder()        \n            .authentication(KubernetesAuthenticationArgs.builder()\n                .delegateSelectors(\"k8s\")\n                .build())\n            .build());\n\n        var example = new Application(\"example\");\n\n        var devEnvironment = new Environment(\"devEnvironment\", EnvironmentArgs.builder()        \n            .appId(example.id())\n            .type(\"NON_PROD\")\n            .build());\n\n        var k8s = new InfrastructureDefinition(\"k8s\", InfrastructureDefinitionArgs.builder()        \n            .appId(example.id())\n            .envId(devEnvironment.id())\n            .cloudProviderType(\"KUBERNETES_CLUSTER\")\n            .deploymentType(\"KUBERNETES\")\n            .kubernetes(InfrastructureDefinitionKubernetesArgs.builder()\n                .cloudProviderName(devKubernetes.name())\n                .namespace(\"dev\")\n                .releaseName(service.name())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Creating a Kubernetes infrastructure definition\n  devKubernetes:\n    type: harness:cloudprovider:Kubernetes\n    properties:\n      authentication:\n        delegateSelectors:\n          - k8s\n  example:\n    type: harness:Application\n  devEnvironment:\n    type: harness:Environment\n    properties:\n      appId: ${example.id}\n      type: NON_PROD\n  k8s:\n    type: harness:InfrastructureDefinition\n    properties:\n      appId: ${example.id}\n      envId: ${devEnvironment.id}\n      cloudProviderType: KUBERNETES_CLUSTER\n      deploymentType: KUBERNETES\n      kubernetes:\n        cloudProviderName: ${devKubernetes.name}\n        namespace: dev\n        releaseName: ${service.name}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id, environment id, and infrastructure definition id\n\n```sh\n $ pulumi import harness:index/infrastructureDefinition:InfrastructureDefinition example \u003capp_id\u003e/\u003cenv_id\u003e/\u003cinfradef_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the infrastructure definition belongs to.\n"
                },
                "awsAmi": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsAmi:InfrastructureDefinitionAwsAmi",
                    "description": "The configuration details for Aws AMI deployments.\n"
                },
                "awsEcs": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsEcs:InfrastructureDefinitionAwsEcs",
                    "description": "The configuration details for Aws AMI deployments.\n"
                },
                "awsLambda": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsLambda:InfrastructureDefinitionAwsLambda",
                    "description": "The configuration details for Aws Lambda deployments.\n"
                },
                "awsSsh": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsSsh:InfrastructureDefinitionAwsSsh",
                    "description": "The configuration details for AWS SSH deployments.\n"
                },
                "awsWinrm": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsWinrm:InfrastructureDefinitionAwsWinrm",
                    "description": "The configuration details for AWS WinRM deployments.\n"
                },
                "azureVmss": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAzureVmss:InfrastructureDefinitionAzureVmss",
                    "description": "The configuration details for Azure VMSS deployments.\n"
                },
                "azureWebapp": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAzureWebapp:InfrastructureDefinitionAzureWebapp",
                    "description": "The configuration details for Azure WebApp deployments.\n"
                },
                "cloudProviderType": {
                    "type": "string",
                    "description": "The type of the cloud provider to connect with. Valid options are AWS, AZURE, CUSTOM, PHYSICAL*DATA*CENTER, KUBERNETES*CLUSTER, PCF, SPOT*INST\n"
                },
                "datacenterSsh": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterSsh:InfrastructureDefinitionDatacenterSsh",
                    "description": "The configuration details for SSH datacenter deployments.\n"
                },
                "datacenterWinrm": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterWinrm:InfrastructureDefinitionDatacenterWinrm",
                    "description": "The configuration details for WinRM datacenter deployments.\n"
                },
                "deploymentTemplateUri": {
                    "type": "string",
                    "description": "The URI of the deployment template to use. Only used if deployment_type is `CUSTOM`.\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The type of the deployment to use. Valid options are AMI, AWS*CODEDEPLOY, AWS*LAMBDA, AZURE*VMSS, AZURE*WEBAPP, Custom, ECS, HELM, KUBERNETES, PCF, SSH, WINRM\n"
                },
                "envId": {
                    "type": "string",
                    "description": "The id of the environment the infrastructure definition belongs to.\n"
                },
                "kubernetes": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetes:InfrastructureDefinitionKubernetes",
                    "description": "The configuration details for Kubernetes deployments.\n"
                },
                "kubernetesGcp": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetesGcp:InfrastructureDefinitionKubernetesGcp",
                    "description": "The configuration details for Kubernetes on GCP deployments.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the infrastructure definition\n"
                },
                "provisionerName": {
                    "type": "string",
                    "description": "The name of the infrastructure provisioner to use.\n"
                },
                "scopedServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of service names to scope this infrastructure definition to.\n"
                },
                "tanzu": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionTanzu:InfrastructureDefinitionTanzu",
                    "description": "The configuration details for PCF deployments.\n"
                }
            },
            "required": [
                "appId",
                "cloudProviderType",
                "deploymentType",
                "envId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the infrastructure definition belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "awsAmi": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsAmi:InfrastructureDefinitionAwsAmi",
                    "description": "The configuration details for Aws AMI deployments.\n"
                },
                "awsEcs": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsEcs:InfrastructureDefinitionAwsEcs",
                    "description": "The configuration details for Aws AMI deployments.\n"
                },
                "awsLambda": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsLambda:InfrastructureDefinitionAwsLambda",
                    "description": "The configuration details for Aws Lambda deployments.\n"
                },
                "awsSsh": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsSsh:InfrastructureDefinitionAwsSsh",
                    "description": "The configuration details for AWS SSH deployments.\n"
                },
                "awsWinrm": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsWinrm:InfrastructureDefinitionAwsWinrm",
                    "description": "The configuration details for AWS WinRM deployments.\n"
                },
                "azureVmss": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAzureVmss:InfrastructureDefinitionAzureVmss",
                    "description": "The configuration details for Azure VMSS deployments.\n"
                },
                "azureWebapp": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAzureWebapp:InfrastructureDefinitionAzureWebapp",
                    "description": "The configuration details for Azure WebApp deployments.\n"
                },
                "cloudProviderType": {
                    "type": "string",
                    "description": "The type of the cloud provider to connect with. Valid options are AWS, AZURE, CUSTOM, PHYSICAL*DATA*CENTER, KUBERNETES*CLUSTER, PCF, SPOT*INST\n"
                },
                "datacenterSsh": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterSsh:InfrastructureDefinitionDatacenterSsh",
                    "description": "The configuration details for SSH datacenter deployments.\n"
                },
                "datacenterWinrm": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterWinrm:InfrastructureDefinitionDatacenterWinrm",
                    "description": "The configuration details for WinRM datacenter deployments.\n"
                },
                "deploymentTemplateUri": {
                    "type": "string",
                    "description": "The URI of the deployment template to use. Only used if deployment_type is `CUSTOM`.\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The type of the deployment to use. Valid options are AMI, AWS*CODEDEPLOY, AWS*LAMBDA, AZURE*VMSS, AZURE*WEBAPP, Custom, ECS, HELM, KUBERNETES, PCF, SSH, WINRM\n"
                },
                "envId": {
                    "type": "string",
                    "description": "The id of the environment the infrastructure definition belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "kubernetes": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetes:InfrastructureDefinitionKubernetes",
                    "description": "The configuration details for Kubernetes deployments.\n"
                },
                "kubernetesGcp": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetesGcp:InfrastructureDefinitionKubernetesGcp",
                    "description": "The configuration details for Kubernetes on GCP deployments.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the infrastructure definition\n",
                    "willReplaceOnChanges": true
                },
                "provisionerName": {
                    "type": "string",
                    "description": "The name of the infrastructure provisioner to use.\n"
                },
                "scopedServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of service names to scope this infrastructure definition to.\n"
                },
                "tanzu": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionTanzu:InfrastructureDefinitionTanzu",
                    "description": "The configuration details for PCF deployments.\n"
                }
            },
            "requiredInputs": [
                "appId",
                "cloudProviderType",
                "deploymentType",
                "envId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InfrastructureDefinition resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the infrastructure definition belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "awsAmi": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsAmi:InfrastructureDefinitionAwsAmi",
                        "description": "The configuration details for Aws AMI deployments.\n"
                    },
                    "awsEcs": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsEcs:InfrastructureDefinitionAwsEcs",
                        "description": "The configuration details for Aws AMI deployments.\n"
                    },
                    "awsLambda": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsLambda:InfrastructureDefinitionAwsLambda",
                        "description": "The configuration details for Aws Lambda deployments.\n"
                    },
                    "awsSsh": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsSsh:InfrastructureDefinitionAwsSsh",
                        "description": "The configuration details for AWS SSH deployments.\n"
                    },
                    "awsWinrm": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsWinrm:InfrastructureDefinitionAwsWinrm",
                        "description": "The configuration details for AWS WinRM deployments.\n"
                    },
                    "azureVmss": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAzureVmss:InfrastructureDefinitionAzureVmss",
                        "description": "The configuration details for Azure VMSS deployments.\n"
                    },
                    "azureWebapp": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAzureWebapp:InfrastructureDefinitionAzureWebapp",
                        "description": "The configuration details for Azure WebApp deployments.\n"
                    },
                    "cloudProviderType": {
                        "type": "string",
                        "description": "The type of the cloud provider to connect with. Valid options are AWS, AZURE, CUSTOM, PHYSICAL*DATA*CENTER, KUBERNETES*CLUSTER, PCF, SPOT*INST\n"
                    },
                    "datacenterSsh": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterSsh:InfrastructureDefinitionDatacenterSsh",
                        "description": "The configuration details for SSH datacenter deployments.\n"
                    },
                    "datacenterWinrm": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterWinrm:InfrastructureDefinitionDatacenterWinrm",
                        "description": "The configuration details for WinRM datacenter deployments.\n"
                    },
                    "deploymentTemplateUri": {
                        "type": "string",
                        "description": "The URI of the deployment template to use. Only used if deployment_type is `CUSTOM`.\n"
                    },
                    "deploymentType": {
                        "type": "string",
                        "description": "The type of the deployment to use. Valid options are AMI, AWS*CODEDEPLOY, AWS*LAMBDA, AZURE*VMSS, AZURE*WEBAPP, Custom, ECS, HELM, KUBERNETES, PCF, SSH, WINRM\n"
                    },
                    "envId": {
                        "type": "string",
                        "description": "The id of the environment the infrastructure definition belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "kubernetes": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetes:InfrastructureDefinitionKubernetes",
                        "description": "The configuration details for Kubernetes deployments.\n"
                    },
                    "kubernetesGcp": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetesGcp:InfrastructureDefinitionKubernetesGcp",
                        "description": "The configuration details for Kubernetes on GCP deployments.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the infrastructure definition\n",
                        "willReplaceOnChanges": true
                    },
                    "provisionerName": {
                        "type": "string",
                        "description": "The name of the infrastructure provisioner to use.\n"
                    },
                    "scopedServices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of service names to scope this infrastructure definition to.\n"
                    },
                    "tanzu": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionTanzu:InfrastructureDefinitionTanzu",
                        "description": "The configuration details for PCF deployments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/sshCredential:SshCredential": {
            "description": "Resource for creating an encrypted text secret\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\nimport * as tls from \"@pulumi/tls\";\n\nconst harnessDeployKey = new tls.PrivateKey(\"harnessDeployKey\", {\n    algorithm: \"RSA\",\n    rsaBits: 4096,\n});\nconst secretManager = harness.getSecretManager({\n    \"default\": true,\n});\nconst mySecret = new harness.EncryptedText(\"mySecret\", {\n    value: harnessDeployKey.privateKeyPem,\n    secretManagerId: secretManager.then(secretManager =\u003e secretManager.id),\n});\nconst sshCreds = new harness.SshCredential(\"sshCreds\", {sshAuthentication: {\n    port: 22,\n    username: \"git\",\n    inlineSsh: {\n        sshKeyFileId: mySecret.id,\n    },\n}});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\nimport pulumi_tls as tls\n\nharness_deploy_key = tls.PrivateKey(\"harnessDeployKey\",\n    algorithm=\"RSA\",\n    rsa_bits=4096)\nsecret_manager = harness.get_secret_manager(default=True)\nmy_secret = harness.EncryptedText(\"mySecret\",\n    value=harness_deploy_key.private_key_pem,\n    secret_manager_id=secret_manager.id)\nssh_creds = harness.SshCredential(\"sshCreds\", ssh_authentication=harness.SshCredentialSshAuthenticationArgs(\n    port=22,\n    username=\"git\",\n    inline_ssh=harness.SshCredentialSshAuthenticationInlineSshArgs(\n        ssh_key_file_id=my_secret.id,\n    ),\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\nusing Tls = Pulumi.Tls;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var harnessDeployKey = new Tls.PrivateKey(\"harnessDeployKey\", new()\n    {\n        Algorithm = \"RSA\",\n        RsaBits = 4096,\n    });\n\n    var secretManager = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var mySecret = new Harness.EncryptedText(\"mySecret\", new()\n    {\n        Value = harnessDeployKey.PrivateKeyPem,\n        SecretManagerId = secretManager.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id),\n    });\n\n    var sshCreds = new Harness.SshCredential(\"sshCreds\", new()\n    {\n        SshAuthentication = new Harness.Inputs.SshCredentialSshAuthenticationArgs\n        {\n            Port = 22,\n            Username = \"git\",\n            InlineSsh = new Harness.Inputs.SshCredentialSshAuthenticationInlineSshArgs\n            {\n                SshKeyFileId = mySecret.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi-tls/sdk/v4/go/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tharnessDeployKey, err := tls.NewPrivateKey(ctx, \"harnessDeployKey\", \u0026tls.PrivateKeyArgs{\n\t\t\tAlgorithm: pulumi.String(\"RSA\"),\n\t\t\tRsaBits:   pulumi.Int(4096),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsecretManager, err := harness.GetSecretManager(ctx, \u0026GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmySecret, err := harness.NewEncryptedText(ctx, \"mySecret\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           harnessDeployKey.PrivateKeyPem,\n\t\t\tSecretManagerId: pulumi.String(secretManager.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewSshCredential(ctx, \"sshCreds\", \u0026harness.SshCredentialArgs{\n\t\t\tSshAuthentication: \u0026SshCredentialSshAuthenticationArgs{\n\t\t\t\tPort:     pulumi.Int(22),\n\t\t\t\tUsername: pulumi.String(\"git\"),\n\t\t\t\tInlineSsh: \u0026SshCredentialSshAuthenticationInlineSshArgs{\n\t\t\t\t\tSshKeyFileId: mySecret.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tls.PrivateKey;\nimport com.pulumi.tls.PrivateKeyArgs;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.SshCredential;\nimport com.pulumi.harness.SshCredentialArgs;\nimport com.pulumi.harness.inputs.SshCredentialSshAuthenticationArgs;\nimport com.pulumi.harness.inputs.SshCredentialSshAuthenticationInlineSshArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var harnessDeployKey = new PrivateKey(\"harnessDeployKey\", PrivateKeyArgs.builder()        \n            .algorithm(\"RSA\")\n            .rsaBits(4096)\n            .build());\n\n        final var secretManager = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var mySecret = new EncryptedText(\"mySecret\", EncryptedTextArgs.builder()        \n            .value(harnessDeployKey.privateKeyPem())\n            .secretManagerId(secretManager.applyValue(getSecretManagerResult -\u003e getSecretManagerResult.id()))\n            .build());\n\n        var sshCreds = new SshCredential(\"sshCreds\", SshCredentialArgs.builder()        \n            .sshAuthentication(SshCredentialSshAuthenticationArgs.builder()\n                .port(22)\n                .username(\"git\")\n                .inlineSsh(SshCredentialSshAuthenticationInlineSshArgs.builder()\n                    .sshKeyFileId(mySecret.id())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  harnessDeployKey:\n    type: tls:PrivateKey\n    properties:\n      algorithm: RSA\n      rsaBits: 4096\n  mySecret:\n    type: harness:EncryptedText\n    properties:\n      value: ${harnessDeployKey.privateKeyPem}\n      secretManagerId: ${secretManager.id}\n  sshCreds:\n    type: harness:SshCredential\n    properties:\n      sshAuthentication:\n        port: 22\n        username: git\n        inlineSsh:\n          sshKeyFileId: ${mySecret.id}\nvariables:\n  secretManager:\n    Fn::Invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness ssh credential id\n\n```sh\n $ pulumi import harness:index/sshCredential:SshCredential example \u003ccredential_id\u003e\n```\n\n ",
            "properties": {
                "kerberosAuthentication": {
                    "$ref": "#/types/harness:index/SshCredentialKerberosAuthentication:SshCredentialKerberosAuthentication",
                    "description": "Kerberos authentication for SSH. Cannot be used if ssh*authentication is specified\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the encrypted text secret\n"
                },
                "sshAuthentication": {
                    "$ref": "#/types/harness:index/SshCredentialSshAuthentication:SshCredentialSshAuthentication",
                    "description": "Authentication method for SSH. Cannot be used if kerberos*authentication is specified. Only one of `inline_ssh`, `server_password`, or `ssh_key_file` should be set\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/SshCredentialUsageScope:SshCredentialUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "kerberosAuthentication": {
                    "$ref": "#/types/harness:index/SshCredentialKerberosAuthentication:SshCredentialKerberosAuthentication",
                    "description": "Kerberos authentication for SSH. Cannot be used if ssh*authentication is specified\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the encrypted text secret\n"
                },
                "sshAuthentication": {
                    "$ref": "#/types/harness:index/SshCredentialSshAuthentication:SshCredentialSshAuthentication",
                    "description": "Authentication method for SSH. Cannot be used if kerberos*authentication is specified. Only one of `inline_ssh`, `server_password`, or `ssh_key_file` should be set\n",
                    "willReplaceOnChanges": true
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/SshCredentialUsageScope:SshCredentialUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshCredential resources.\n",
                "properties": {
                    "kerberosAuthentication": {
                        "$ref": "#/types/harness:index/SshCredentialKerberosAuthentication:SshCredentialKerberosAuthentication",
                        "description": "Kerberos authentication for SSH. Cannot be used if ssh*authentication is specified\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the encrypted text secret\n"
                    },
                    "sshAuthentication": {
                        "$ref": "#/types/harness:index/SshCredentialSshAuthentication:SshCredentialSshAuthentication",
                        "description": "Authentication method for SSH. Cannot be used if kerberos*authentication is specified. Only one of `inline_ssh`, `server_password`, or `ssh_key_file` should be set\n",
                        "willReplaceOnChanges": true
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/SshCredentialUsageScope:SshCredentialUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/user:User": {
            "description": "Resource for creating a Harness user\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst johnDoe = new harness.User(\"john_doe\", {\n    email: \"john.doe@example.com\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\njohn_doe = harness.User(\"johnDoe\", email=\"john.doe@example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var johnDoe = new Harness.User(\"johnDoe\", new()\n    {\n        Email = \"john.doe@example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.NewUser(ctx, \"johnDoe\", \u0026harness.UserArgs{\n\t\t\tEmail: pulumi.String(\"john.doe@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.User;\nimport com.pulumi.harness.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var johnDoe = new User(\"johnDoe\", UserArgs.builder()        \n            .email(\"john.doe@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  johnDoe:\n    type: harness:User\n    properties:\n      email: john.doe@example.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the email address of the user\n\n```sh\n $ pulumi import harness:index/user:User john_doe john.doe@example.com\n```\n\n ",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n"
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The groups the user belongs to. This is only used during the creation of the user. The groups are not updated after the user is created. When using this option you should also set `lifecycle = { ignore_changes = [\"group_ids\"] }`.\n"
                },
                "isEmailVerified": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the users email has been verified.\n"
                },
                "isImportedFromIdentityProvider": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the user was imported from an identity provider.\n"
                },
                "isPasswordExpired": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the users password has expired.\n"
                },
                "isTwoFactorAuthEnabled": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not two-factor authentication is enabled for the user.\n"
                },
                "isUserLocked": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the user is locked out.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                }
            },
            "required": [
                "email",
                "isEmailVerified",
                "isImportedFromIdentityProvider",
                "isPasswordExpired",
                "isTwoFactorAuthEnabled",
                "isUserLocked",
                "name"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n",
                    "willReplaceOnChanges": true
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The groups the user belongs to. This is only used during the creation of the user. The groups are not updated after the user is created. When using this option you should also set `lifecycle = { ignore_changes = [\"group_ids\"] }`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                }
            },
            "requiredInputs": [
                "email"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The groups the user belongs to. This is only used during the creation of the user. The groups are not updated after the user is created. When using this option you should also set `lifecycle = { ignore_changes = [\"group_ids\"] }`.\n"
                    },
                    "isEmailVerified": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the users email has been verified.\n"
                    },
                    "isImportedFromIdentityProvider": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the user was imported from an identity provider.\n"
                    },
                    "isPasswordExpired": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the users password has expired.\n"
                    },
                    "isTwoFactorAuthEnabled": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not two-factor authentication is enabled for the user.\n"
                    },
                    "isUserLocked": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the user is locked out.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/userGroup:UserGroup": {
            "description": "Resource for creating a Harness user group\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.UserGroup(\"example\", {\n    description: \"This group demonstrates account level and resource level permissions.\",\n    permissions: {\n        accountPermissions: [\n            \"ADMINISTER_OTHER_ACCOUNT_FUNCTIONS\",\n            \"MANAGE_API_KEYS\",\n        ],\n        appPermissions: {\n            alls: [{\n                actions: [\n                    \"CREATE\",\n                    \"READ\",\n                    \"UPDATE\",\n                    \"DELETE\",\n                ],\n            }],\n            deployments: [\n                {\n                    actions: [\n                        \"READ\",\n                        \"ROLLBACK_WORKFLOW\",\n                        \"EXECUTE_PIPELINE\",\n                        \"EXECUTE_WORKFLOW\",\n                    ],\n                    filters: [\"NON_PRODUCTION_ENVIRONMENTS\"],\n                },\n                {\n                    actions: [\"READ\"],\n                    filters: [\"PRODUCTION_ENVIRONMENTS\"],\n                },\n            ],\n            environments: [\n                {\n                    actions: [\n                        \"CREATE\",\n                        \"READ\",\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                    filters: [\"NON_PRODUCTION_ENVIRONMENTS\"],\n                },\n                {\n                    actions: [\"READ\"],\n                    filters: [\"PRODUCTION_ENVIRONMENTS\"],\n                },\n            ],\n            pipelines: [\n                {\n                    actions: [\n                        \"CREATE\",\n                        \"READ\",\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                    filters: [\"NON_PRODUCTION_PIPELINES\"],\n                },\n                {\n                    actions: [\"READ\"],\n                    filters: [\"PRODUCTION_PIPELINES\"],\n                },\n            ],\n            provisioners: [\n                {\n                    actions: [\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                },\n                {\n                    actions: [\n                        \"CREATE\",\n                        \"READ\",\n                    ],\n                },\n            ],\n            services: [\n                {\n                    actions: [\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                },\n                {\n                    actions: [\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                },\n            ],\n            templates: [{\n                actions: [\n                    \"CREATE\",\n                    \"READ\",\n                    \"UPDATE\",\n                    \"DELETE\",\n                ],\n            }],\n            workflows: [\n                {\n                    actions: [\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                    filters: [\"NON_PRODUCTION_WORKFLOWS\"],\n                },\n                {\n                    actions: [\n                        \"CREATE\",\n                        \"READ\",\n                    ],\n                    filters: [\n                        \"PRODUCTION_WORKFLOWS\",\n                        \"WORKFLOW_TEMPLATES\",\n                    ],\n                },\n            ],\n        },\n    },\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.UserGroup;\nimport com.pulumi.harness.UserGroupArgs;\nimport com.pulumi.harness.inputs.UserGroupPermissionsArgs;\nimport com.pulumi.harness.inputs.UserGroupPermissionsAppPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new UserGroup(\"example\", UserGroupArgs.builder()        \n            .description(\"This group demonstrates account level and resource level permissions.\")\n            .permissions(UserGroupPermissionsArgs.builder()\n                .accountPermissions(                \n                    \"ADMINISTER_OTHER_ACCOUNT_FUNCTIONS\",\n                    \"MANAGE_API_KEYS\")\n                .appPermissions(UserGroupPermissionsAppPermissionsArgs.builder()\n                    .all(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .deployment(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .environment(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .pipeline(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .provisioner(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .service(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .template(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .workflow(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:UserGroup\n    properties:\n      description: This group demonstrates account level and resource level permissions.\n      permissions:\n        accountPermissions:\n          - ADMINISTER_OTHER_ACCOUNT_FUNCTIONS\n          - MANAGE_API_KEYS\n        appPermissions:\n          all:\n            - actions:\n                - CREATE\n                - READ\n                - UPDATE\n                - DELETE\n          deployment:\n            - actions:\n                - READ\n                - ROLLBACK_WORKFLOW\n                - EXECUTE_PIPELINE\n                - EXECUTE_WORKFLOW\n              filters:\n                - NON_PRODUCTION_ENVIRONMENTS\n            - actions:\n                - READ\n              filters:\n                - PRODUCTION_ENVIRONMENTS\n          environment:\n            - actions:\n                - CREATE\n                - READ\n                - UPDATE\n                - DELETE\n              filters:\n                - NON_PRODUCTION_ENVIRONMENTS\n            - actions:\n                - READ\n              filters:\n                - PRODUCTION_ENVIRONMENTS\n          pipeline:\n            - actions:\n                - CREATE\n                - READ\n                - UPDATE\n                - DELETE\n              filters:\n                - NON_PRODUCTION_PIPELINES\n            - actions:\n                - READ\n              filters:\n                - PRODUCTION_PIPELINES\n          provisioner:\n            - actions:\n                - UPDATE\n                - DELETE\n            - actions:\n                - CREATE\n                - READ\n          service:\n            - actions:\n                - UPDATE\n                - DELETE\n            - actions:\n                - UPDATE\n                - DELETE\n          template:\n            - actions:\n                - CREATE\n                - READ\n                - UPDATE\n                - DELETE\n          workflow:\n            - actions:\n                - UPDATE\n                - DELETE\n              filters:\n                - NON_PRODUCTION_WORKFLOWS\n            - actions:\n                - CREATE\n                - READ\n              filters:\n                - PRODUCTION_WORKFLOWS\n                - WORKFLOW_TEMPLATES\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the id of the user group\n\n```sh\n $ pulumi import harness:index/userGroup:UserGroup example \u003cUSER_GROUP_ID\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the user group.\n"
                },
                "importedByScim": {
                    "type": "boolean",
                    "description": "Indicates whether the user group was imported by SCIM.\n"
                },
                "isSsoLinked": {
                    "type": "boolean",
                    "description": "Indicates whether the user group is linked to an SSO provider.\n"
                },
                "ldapSettings": {
                    "$ref": "#/types/harness:index/UserGroupLdapSettings:UserGroupLdapSettings",
                    "description": "The LDAP settings for the user group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user group.\n"
                },
                "notificationSettings": {
                    "$ref": "#/types/harness:index/UserGroupNotificationSettings:UserGroupNotificationSettings",
                    "description": "The notification settings of the user group.\n"
                },
                "permissions": {
                    "$ref": "#/types/harness:index/UserGroupPermissions:UserGroupPermissions",
                    "description": "The permissions of the user group.\n"
                },
                "samlSettings": {
                    "$ref": "#/types/harness:index/UserGroupSamlSettings:UserGroupSamlSettings",
                    "description": "The SAML settings for the user group.\n"
                }
            },
            "required": [
                "importedByScim",
                "isSsoLinked",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the user group.\n",
                    "willReplaceOnChanges": true
                },
                "ldapSettings": {
                    "$ref": "#/types/harness:index/UserGroupLdapSettings:UserGroupLdapSettings",
                    "description": "The LDAP settings for the user group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user group.\n",
                    "willReplaceOnChanges": true
                },
                "notificationSettings": {
                    "$ref": "#/types/harness:index/UserGroupNotificationSettings:UserGroupNotificationSettings",
                    "description": "The notification settings of the user group.\n"
                },
                "permissions": {
                    "$ref": "#/types/harness:index/UserGroupPermissions:UserGroupPermissions",
                    "description": "The permissions of the user group.\n"
                },
                "samlSettings": {
                    "$ref": "#/types/harness:index/UserGroupSamlSettings:UserGroupSamlSettings",
                    "description": "The SAML settings for the user group.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the user group.\n",
                        "willReplaceOnChanges": true
                    },
                    "importedByScim": {
                        "type": "boolean",
                        "description": "Indicates whether the user group was imported by SCIM.\n"
                    },
                    "isSsoLinked": {
                        "type": "boolean",
                        "description": "Indicates whether the user group is linked to an SSO provider.\n"
                    },
                    "ldapSettings": {
                        "$ref": "#/types/harness:index/UserGroupLdapSettings:UserGroupLdapSettings",
                        "description": "The LDAP settings for the user group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user group.\n",
                        "willReplaceOnChanges": true
                    },
                    "notificationSettings": {
                        "$ref": "#/types/harness:index/UserGroupNotificationSettings:UserGroupNotificationSettings",
                        "description": "The notification settings of the user group.\n"
                    },
                    "permissions": {
                        "$ref": "#/types/harness:index/UserGroupPermissions:UserGroupPermissions",
                        "description": "The permissions of the user group.\n"
                    },
                    "samlSettings": {
                        "$ref": "#/types/harness:index/UserGroupSamlSettings:UserGroupSamlSettings",
                        "description": "The SAML settings for the user group.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/userGroupPermissions:UserGroupPermissions": {
            "description": "Resource for adding permissions to an existing Harness user group.\n",
            "properties": {
                "accountPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS\n"
                },
                "appPermissions": {
                    "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissions:UserGroupPermissionsAppPermissions",
                    "description": "Application specific permissions\n"
                },
                "userGroupId": {
                    "type": "string",
                    "description": "Unique identifier of the user group.\n"
                }
            },
            "required": [
                "userGroupId"
            ],
            "inputProperties": {
                "accountPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS\n"
                },
                "appPermissions": {
                    "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissions:UserGroupPermissionsAppPermissions",
                    "description": "Application specific permissions\n"
                },
                "userGroupId": {
                    "type": "string",
                    "description": "Unique identifier of the user group.\n"
                }
            },
            "requiredInputs": [
                "userGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserGroupPermissions resources.\n",
                "properties": {
                    "accountPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS\n"
                    },
                    "appPermissions": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissions:UserGroupPermissionsAppPermissions",
                        "description": "Application specific permissions\n"
                    },
                    "userGroupId": {
                        "type": "string",
                        "description": "Unique identifier of the user group.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/yamlConfig:YamlConfig": {
            "description": "Resource for creating a raw YAML configuration in Harness. Note: This works for all objects EXCEPT application objects. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.YamlConfig(\"test\", {\n    content: `harnessApiVersion: '1.0'\ntype: KUBERNETES_CLUSTER\ndelegateSelectors:\n- k8s\nskipValidation: true\nuseKubernetesDelegate: true\n`,\n    path: \"Setup/Cloud Providers/Kubernetes.yaml\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.YamlConfig(\"test\",\n    content=\"\"\"harnessApiVersion: '1.0'\ntype: KUBERNETES_CLUSTER\ndelegateSelectors:\n- k8s\nskipValidation: true\nuseKubernetesDelegate: true\n\n\"\"\",\n    path=\"Setup/Cloud Providers/Kubernetes.yaml\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.YamlConfig(\"test\", new()\n    {\n        Content = @\"harnessApiVersion: '1.0'\ntype: KUBERNETES_CLUSTER\ndelegateSelectors:\n- k8s\nskipValidation: true\nuseKubernetesDelegate: true\n\n\",\n        Path = \"Setup/Cloud Providers/Kubernetes.yaml\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.NewYamlConfig(ctx, \"test\", \u0026harness.YamlConfigArgs{\n\t\t\tContent: pulumi.String(fmt.Sprintf(`harnessApiVersion: '1.0'\ntype: KUBERNETES_CLUSTER\ndelegateSelectors:\n- k8s\nskipValidation: true\nuseKubernetesDelegate: true\n\n`)),\n\t\t\tPath: pulumi.String(\"Setup/Cloud Providers/Kubernetes.yaml\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.YamlConfig;\nimport com.pulumi.harness.YamlConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new YamlConfig(\"test\", YamlConfigArgs.builder()        \n            .content(\"\"\"\nharnessApiVersion: '1.0'\ntype: KUBERNETES_CLUSTER\ndelegateSelectors:\n- k8s\nskipValidation: true\nuseKubernetesDelegate: true\n\n            \"\"\")\n            .path(\"Setup/Cloud Providers/Kubernetes.yaml\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:YamlConfig\n    properties:\n      content: |+\n        harnessApiVersion: '1.0'\n        type: KUBERNETES_CLUSTER\n        delegateSelectors:\n        - k8s\n        skipValidation: true\n        useKubernetesDelegate: true\n\n      path: Setup/Cloud Providers/Kubernetes.yaml\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImporting a global config only using the yaml path\n\n```sh\n $ pulumi import harness:index/yamlConfig:YamlConfig k8s_cloudprovider \"Setup/Cloud Providers/kubernetes.yaml\"\n```\n\n Importing a service which requires both the application id and the yaml path.\n\n```sh\n $ pulumi import harness:index/yamlConfig:YamlConfig k8s_cloudprovider \"Setup/Applications/MyApp/Services/MyService/Index.yaml:\u003cAPPLICATION_ID\u003e\"\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application. This is required for all resources except global ones.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The raw YAML configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the resource.\n"
                }
            },
            "required": [
                "content",
                "name",
                "path"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application. This is required for all resources except global ones.\n",
                    "willReplaceOnChanges": true
                },
                "content": {
                    "type": "string",
                    "description": "The raw YAML configuration.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the resource.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "content",
                "path"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering YamlConfig resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application. This is required for all resources except global ones.\n",
                        "willReplaceOnChanges": true
                    },
                    "content": {
                        "type": "string",
                        "description": "The raw YAML configuration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the resource.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of the resource.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/appDynamicsConnector:AppDynamicsConnector": {
            "description": "Resource for creating an App Dynamics connector.\n",
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The App Dynamics account name.\n"
                },
                "apiToken": {
                    "$ref": "#/types/harness:platform/AppDynamicsConnectorApiToken:AppDynamicsConnectorApiToken",
                    "description": "Authenticate to App Dynamics using api token.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the App Dynamics controller.\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/AppDynamicsConnectorUsernamePassword:AppDynamicsConnectorUsernamePassword",
                    "description": "Authenticate to App Dynamics using username and password.\n"
                }
            },
            "required": [
                "accountName",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "The App Dynamics account name.\n"
                },
                "apiToken": {
                    "$ref": "#/types/harness:platform/AppDynamicsConnectorApiToken:AppDynamicsConnectorApiToken",
                    "description": "Authenticate to App Dynamics using api token.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the App Dynamics controller.\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/AppDynamicsConnectorUsernamePassword:AppDynamicsConnectorUsernamePassword",
                    "description": "Authenticate to App Dynamics using username and password.\n"
                }
            },
            "requiredInputs": [
                "accountName",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppDynamicsConnector resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "The App Dynamics account name.\n"
                    },
                    "apiToken": {
                        "$ref": "#/types/harness:platform/AppDynamicsConnectorApiToken:AppDynamicsConnectorApiToken",
                        "description": "Authenticate to App Dynamics using api token.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the App Dynamics controller.\n"
                    },
                    "usernamePassword": {
                        "$ref": "#/types/harness:platform/AppDynamicsConnectorUsernamePassword:AppDynamicsConnectorUsernamePassword",
                        "description": "Authenticate to App Dynamics using username and password.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/artifactoryConnector:ArtifactoryConnector": {
            "description": "Resource for creating an Artifactory connector.\n",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/ArtifactoryConnectorCredentials:ArtifactoryConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/ArtifactoryConnectorCredentials:ArtifactoryConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ArtifactoryConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/ArtifactoryConnectorCredentials:ArtifactoryConnectorCredentials",
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Artifactory server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/awsCCConnector:AwsCCConnector": {
            "description": "Resource for creating an AWS Cloud Cost connector.\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The AWS account id.\n"
                },
                "crossAccountAccess": {
                    "$ref": "#/types/harness:platform/AwsCCConnectorCrossAccountAccess:AwsCCConnectorCrossAccountAccess",
                    "description": "Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "reportName": {
                    "type": "string",
                    "description": "The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.\n"
                },
                "s3Bucket": {
                    "type": "string",
                    "description": "The name of s3 bucket.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "required": [
                "accountId",
                "crossAccountAccess",
                "featuresEnableds",
                "identifier",
                "name",
                "reportName",
                "s3Bucket"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "The AWS account id.\n"
                },
                "crossAccountAccess": {
                    "$ref": "#/types/harness:platform/AwsCCConnectorCrossAccountAccess:AwsCCConnectorCrossAccountAccess",
                    "description": "Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "reportName": {
                    "type": "string",
                    "description": "The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.\n"
                },
                "s3Bucket": {
                    "type": "string",
                    "description": "The name of s3 bucket.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "crossAccountAccess",
                "featuresEnableds",
                "identifier",
                "reportName",
                "s3Bucket"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsCCConnector resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The AWS account id.\n"
                    },
                    "crossAccountAccess": {
                        "$ref": "#/types/harness:platform/AwsCCConnectorCrossAccountAccess:AwsCCConnectorCrossAccountAccess",
                        "description": "Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "featuresEnableds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "reportName": {
                        "type": "string",
                        "description": "The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.\n"
                    },
                    "s3Bucket": {
                        "type": "string",
                        "description": "The name of s3 bucket.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/awsConnector:AwsConnector": {
            "description": "Resource for creating an AWS connector.\n",
            "properties": {
                "crossAccountAccess": {
                    "$ref": "#/types/harness:platform/AwsConnectorCrossAccountAccess:AwsConnectorCrossAccountAccess",
                    "description": "Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "inheritFromDelegate": {
                    "$ref": "#/types/harness:platform/AwsConnectorInheritFromDelegate:AwsConnectorInheritFromDelegate",
                    "description": "Inherit credentials from the delegate.\n"
                },
                "irsa": {
                    "$ref": "#/types/harness:platform/AwsConnectorIrsa:AwsConnectorIrsa",
                    "description": "Use IAM role for service accounts.\n"
                },
                "manual": {
                    "$ref": "#/types/harness:platform/AwsConnectorManual:AwsConnectorManual",
                    "description": "Use IAM role for service accounts.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "required": [
                "identifier",
                "name"
            ],
            "inputProperties": {
                "crossAccountAccess": {
                    "$ref": "#/types/harness:platform/AwsConnectorCrossAccountAccess:AwsConnectorCrossAccountAccess",
                    "description": "Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "inheritFromDelegate": {
                    "$ref": "#/types/harness:platform/AwsConnectorInheritFromDelegate:AwsConnectorInheritFromDelegate",
                    "description": "Inherit credentials from the delegate.\n"
                },
                "irsa": {
                    "$ref": "#/types/harness:platform/AwsConnectorIrsa:AwsConnectorIrsa",
                    "description": "Use IAM role for service accounts.\n"
                },
                "manual": {
                    "$ref": "#/types/harness:platform/AwsConnectorManual:AwsConnectorManual",
                    "description": "Use IAM role for service accounts.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsConnector resources.\n",
                "properties": {
                    "crossAccountAccess": {
                        "$ref": "#/types/harness:platform/AwsConnectorCrossAccountAccess:AwsConnectorCrossAccountAccess",
                        "description": "Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "inheritFromDelegate": {
                        "$ref": "#/types/harness:platform/AwsConnectorInheritFromDelegate:AwsConnectorInheritFromDelegate",
                        "description": "Inherit credentials from the delegate.\n"
                    },
                    "irsa": {
                        "$ref": "#/types/harness:platform/AwsConnectorIrsa:AwsConnectorIrsa",
                        "description": "Use IAM role for service accounts.\n"
                    },
                    "manual": {
                        "$ref": "#/types/harness:platform/AwsConnectorManual:AwsConnectorManual",
                        "description": "Use IAM role for service accounts.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/awsKmsConnector:AwsKmsConnector": {
            "description": "Resource for creating an AWS KMS connector.\n",
            "properties": {
                "arnRef": {
                    "type": "string",
                    "description": "A reference to the Harness secret containing the ARN of the AWS KMS.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/AwsKmsConnectorCredentials:AwsKmsConnectorCredentials",
                    "description": "The credentials to use for connecting to aws.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region where the AWS Secret Manager is.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "required": [
                "arnRef",
                "credentials",
                "identifier",
                "name",
                "region"
            ],
            "inputProperties": {
                "arnRef": {
                    "type": "string",
                    "description": "A reference to the Harness secret containing the ARN of the AWS KMS.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/AwsKmsConnectorCredentials:AwsKmsConnectorCredentials",
                    "description": "The credentials to use for connecting to aws.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region where the AWS Secret Manager is.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "requiredInputs": [
                "arnRef",
                "credentials",
                "identifier",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsKmsConnector resources.\n",
                "properties": {
                    "arnRef": {
                        "type": "string",
                        "description": "A reference to the Harness secret containing the ARN of the AWS KMS.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/harness:platform/AwsKmsConnectorCredentials:AwsKmsConnectorCredentials",
                        "description": "The credentials to use for connecting to aws.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The AWS region where the AWS Secret Manager is.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/awsSecretManagerConnector:AwsSecretManagerConnector": {
            "description": "Resource for creating an AWS Secret Manager connector.\n",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/AwsSecretManagerConnectorCredentials:AwsSecretManagerConnectorCredentials",
                    "description": "The credentials to use for connecting to aws.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region where the AWS Secret Manager is.\n"
                },
                "secretNamePrefix": {
                    "type": "string",
                    "description": "A prefix to be added to all secrets.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "required": [
                "credentials",
                "identifier",
                "name",
                "region"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/AwsSecretManagerConnectorCredentials:AwsSecretManagerConnectorCredentials",
                    "description": "The credentials to use for connecting to aws.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region where the AWS Secret Manager is.\n"
                },
                "secretNamePrefix": {
                    "type": "string",
                    "description": "A prefix to be added to all secrets.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "requiredInputs": [
                "credentials",
                "identifier",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsSecretManagerConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/AwsSecretManagerConnectorCredentials:AwsSecretManagerConnectorCredentials",
                        "description": "The credentials to use for connecting to aws.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The AWS region where the AWS Secret Manager is.\n"
                    },
                    "secretNamePrefix": {
                        "type": "string",
                        "description": "A prefix to be added to all secrets.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/bitbucketConnector:BitbucketConnector": {
            "description": "Resource for creating a Bitbucket connector.\n",
            "properties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorApiAuthentication:BitbucketConnectorApiAuthentication",
                    "description": "Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorCredentials:BitbucketConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the BitBucket repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "required": [
                "connectionType",
                "credentials",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorApiAuthentication:BitbucketConnectorApiAuthentication",
                    "description": "Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorCredentials:BitbucketConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the BitBucket repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "requiredInputs": [
                "connectionType",
                "credentials",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BitbucketConnector resources.\n",
                "properties": {
                    "apiAuthentication": {
                        "$ref": "#/types/harness:platform/BitbucketConnectorApiAuthentication:BitbucketConnectorApiAuthentication",
                        "description": "Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/harness:platform/BitbucketConnectorCredentials:BitbucketConnectorCredentials",
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the BitBucket repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/datadogConnector:DatadogConnector": {
            "description": "Resource for creating a Datadog connector.\n",
            "properties": {
                "apiKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api key.\n"
                },
                "applicationKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the application key.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the Datadog server.\n"
                }
            },
            "required": [
                "apiKeyRef",
                "applicationKeyRef",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "apiKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api key.\n"
                },
                "applicationKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the application key.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the Datadog server.\n"
                }
            },
            "requiredInputs": [
                "apiKeyRef",
                "applicationKeyRef",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatadogConnector resources.\n",
                "properties": {
                    "apiKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the api key.\n"
                    },
                    "applicationKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the application key.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the Datadog server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/dockerConnector:DockerConnector": {
            "description": "Resource for creating a Docker connector.\n",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/DockerConnectorCredentials:DockerConnectorCredentials",
                    "description": "The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay\n"
                },
                "url": {
                    "type": "string",
                    "description": "The url of the docker registry.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "type",
                "url"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/DockerConnectorCredentials:DockerConnectorCredentials",
                    "description": "The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay\n"
                },
                "url": {
                    "type": "string",
                    "description": "The url of the docker registry.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "type",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DockerConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/DockerConnectorCredentials:DockerConnectorCredentials",
                        "description": "The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The url of the docker registry.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/dynatraceConnector:DynatraceConnector": {
            "description": "Resource for creating a Dynatrace connector.\n",
            "properties": {
                "apiTokenRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the api token.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the Dynatrace server.\n"
                }
            },
            "required": [
                "apiTokenRef",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "apiTokenRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the api token.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the Dynatrace server.\n"
                }
            },
            "requiredInputs": [
                "apiTokenRef",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DynatraceConnector resources.\n",
                "properties": {
                    "apiTokenRef": {
                        "type": "string",
                        "description": "The reference to the Harness secret containing the api token.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the Dynatrace server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/environment:Environment": {
            "description": "Resource for creating a Harness environment.\n",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color of the environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of environment. Valid values are PreProduction, Production\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "type"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "Color of the environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of environment. Valid values are PreProduction, Production\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Color of the environment.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of environment. Valid values are PreProduction, Production\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gcpConnector:GcpConnector": {
            "description": "Resource for creating a Gcp connector.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "inheritFromDelegates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GcpConnectorInheritFromDelegate:GcpConnectorInheritFromDelegate"
                    },
                    "description": "Inherit configuration from delegate.\n"
                },
                "manual": {
                    "$ref": "#/types/harness:platform/GcpConnectorManual:GcpConnectorManual",
                    "description": "Manual credential configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "required": [
                "identifier",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "inheritFromDelegates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GcpConnectorInheritFromDelegate:GcpConnectorInheritFromDelegate"
                    },
                    "description": "Inherit configuration from delegate.\n"
                },
                "manual": {
                    "$ref": "#/types/harness:platform/GcpConnectorManual:GcpConnectorManual",
                    "description": "Manual credential configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpConnector resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "inheritFromDelegates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GcpConnectorInheritFromDelegate:GcpConnectorInheritFromDelegate"
                        },
                        "description": "Inherit configuration from delegate.\n"
                    },
                    "manual": {
                        "$ref": "#/types/harness:platform/GcpConnectorManual:GcpConnectorManual",
                        "description": "Manual credential configuration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitConnector:GitConnector": {
            "description": "Resource for creating a Git connector.\n",
            "properties": {
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GitConnectorCredentials:GitConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the git repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "required": [
                "connectionType",
                "credentials",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GitConnectorCredentials:GitConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the git repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "requiredInputs": [
                "connectionType",
                "credentials",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitConnector resources.\n",
                "properties": {
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/harness:platform/GitConnectorCredentials:GitConnectorCredentials",
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the git repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/githubConnector:GithubConnector": {
            "description": "Resource for creating a Github connector.\n",
            "properties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/GithubConnectorApiAuthentication:GithubConnectorApiAuthentication",
                    "description": "Configuration for using the github api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GithubConnectorCredentials:GithubConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the Githubhub repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "required": [
                "connectionType",
                "credentials",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/GithubConnectorApiAuthentication:GithubConnectorApiAuthentication",
                    "description": "Configuration for using the github api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GithubConnectorCredentials:GithubConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the Githubhub repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "requiredInputs": [
                "connectionType",
                "credentials",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GithubConnector resources.\n",
                "properties": {
                    "apiAuthentication": {
                        "$ref": "#/types/harness:platform/GithubConnectorApiAuthentication:GithubConnectorApiAuthentication",
                        "description": "Configuration for using the github api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/harness:platform/GithubConnectorCredentials:GithubConnectorCredentials",
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the Githubhub repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitlabConnector:GitlabConnector": {
            "description": "Resource for creating a Gitlab connector.\n",
            "properties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/GitlabConnectorApiAuthentication:GitlabConnectorApiAuthentication",
                    "description": "Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GitlabConnectorCredentials:GitlabConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the gitlab repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "required": [
                "connectionType",
                "credentials",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/GitlabConnectorApiAuthentication:GitlabConnectorApiAuthentication",
                    "description": "Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GitlabConnectorCredentials:GitlabConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the gitlab repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "requiredInputs": [
                "connectionType",
                "credentials",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitlabConnector resources.\n",
                "properties": {
                    "apiAuthentication": {
                        "$ref": "#/types/harness:platform/GitlabConnectorApiAuthentication:GitlabConnectorApiAuthentication",
                        "description": "Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/harness:platform/GitlabConnectorCredentials:GitlabConnectorCredentials",
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the gitlab repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/helmConnector:HelmConnector": {
            "description": "Resource for creating a Helm connector.\n",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/HelmConnectorCredentials:HelmConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the helm server.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/HelmConnectorCredentials:HelmConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the helm server.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HelmConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/HelmConnectorCredentials:HelmConnectorCredentials",
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the helm server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/inputSet:InputSet": {
            "description": "Resource for creating a Harness Resource Group\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.InputSet(\"example\", {\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    pipelineId: \"pipeline_id\",\n    projectId: \"project_id\",\n    tags: [\"foo:bar\"],\n    yaml: `    inputSet:\n      identifier: \"identifier\"\n      name: \"name\"\n      tags:\n        foo: \"bar\"\n      orgIdentifier: \"org_id\"\n      projectIdentifier: \"project_id\"\n      pipeline:\n        identifier: \"pipeline_id\"\n        variables:\n        - name: \"key\"\n          type: \"String\"\n          value: \"value\"\n`,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.InputSet(\"example\",\n    identifier=\"identifier\",\n    org_id=\"org_id\",\n    pipeline_id=\"pipeline_id\",\n    project_id=\"project_id\",\n    tags=[\"foo:bar\"],\n    yaml=\"\"\"    inputSet:\n      identifier: \"identifier\"\n      name: \"name\"\n      tags:\n        foo: \"bar\"\n      orgIdentifier: \"org_id\"\n      projectIdentifier: \"project_id\"\n      pipeline:\n        identifier: \"pipeline_id\"\n        variables:\n        - name: \"key\"\n          type: \"String\"\n          value: \"value\"\n\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.InputSet(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        PipelineId = \"pipeline_id\",\n        ProjectId = \"project_id\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Yaml = @\"    inputSet:\n      identifier: \"\"identifier\"\"\n      name: \"\"name\"\"\n      tags:\n        foo: \"\"bar\"\"\n      orgIdentifier: \"\"org_id\"\"\n      projectIdentifier: \"\"project_id\"\"\n      pipeline:\n        identifier: \"\"pipeline_id\"\"\n        variables:\n        - name: \"\"key\"\"\n          type: \"\"String\"\"\n          value: \"\"value\"\"\n\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewInputSet(ctx, \"example\", \u0026platform.InputSetArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tPipelineId: pulumi.String(\"pipeline_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tYaml: pulumi.String(fmt.Sprintf(`    inputSet:\n      identifier: \"identifier\"\n      name: \"name\"\n      tags:\n        foo: \"bar\"\n      orgIdentifier: \"org_id\"\n      projectIdentifier: \"project_id\"\n      pipeline:\n        identifier: \"pipeline_id\"\n        variables:\n        - name: \"key\"\n          type: \"String\"\n          value: \"value\"\n\n`)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.InputSet;\nimport com.pulumi.harness.platform.InputSetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new InputSet(\"example\", InputSetArgs.builder()        \n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .pipelineId(\"pipeline_id\")\n            .projectId(\"project_id\")\n            .tags(\"foo:bar\")\n            .yaml(\"\"\"\n    inputSet:\n      identifier: \"identifier\"\n      name: \"name\"\n      tags:\n        foo: \"bar\"\n      orgIdentifier: \"org_id\"\n      projectIdentifier: \"project_id\"\n      pipeline:\n        identifier: \"pipeline_id\"\n        variables:\n        - name: \"key\"\n          type: \"String\"\n          value: \"value\"\n\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:InputSet\n    properties:\n      identifier: identifier\n      orgId: org_id\n      pipelineId: pipeline_id\n      projectId: project_id\n      tags:\n        - foo:bar\n      yaml: |2+\n            inputSet:\n              identifier: \"identifier\"\n              name: \"name\"\n              tags:\n                foo: \"bar\"\n              orgIdentifier: \"org_id\"\n              projectIdentifier: \"project_id\"\n              pipeline:\n                identifier: \"pipeline_id\"\n                variables:\n                - name: \"key\"\n                  type: \"String\"\n                  value: \"value\"\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using input set id\n\n```sh\n $ pulumi import harness:platform/inputSet:InputSet example \u003cinput_set_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "pipelineId": {
                    "type": "string",
                    "description": "Identifier of the pipeline\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Input Set YAML\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "pipelineId",
                "yaml"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "pipelineId": {
                    "type": "string",
                    "description": "Identifier of the pipeline\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Input Set YAML\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "pipelineId",
                "yaml"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InputSet resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "pipelineId": {
                        "type": "string",
                        "description": "Identifier of the pipeline\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Input Set YAML\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/jiraConnector:JiraConnector": {
            "description": "Resource for creating a Jira connector.\n",
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the Jira server.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "passwordRef",
                "url"
            ],
            "inputProperties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the Jira server.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "passwordRef",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering JiraConnector resources.\n",
                "properties": {
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "passwordRef": {
                        "type": "string",
                        "description": "Reference to a secret containing the password to use for authentication.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the Jira server.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username to use for authentication.\n"
                    },
                    "usernameRef": {
                        "type": "string",
                        "description": "Reference to a secret containing the username to use for authentication.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/kubernetesConnector:KubernetesConnector": {
            "description": "Resource for creating a K8s connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst clientKeyCert = new harness.platform.KubernetesConnector(\"clientKeyCert\", {\n    clientKeyCert: {\n        caCertRef: \"account.TEST_k8ss_client_stuff\",\n        clientCertRef: \"account.test_k8s_client_cert\",\n        clientKeyAlgorithm: \"RSA\",\n        clientKeyPassphraseRef: \"account.TEST_k8s_client_test\",\n        clientKeyRef: \"account.TEST_k8s_client_key\",\n        masterUrl: \"https://kubernetes.example.com\",\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"description\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n});\nconst usernamePassword = new harness.platform.KubernetesConnector(\"usernamePassword\", {\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"description\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    usernamePassword: {\n        masterUrl: \"https://kubernetes.example.com\",\n        passwordRef: \"account.TEST_k8s_client_test\",\n        username: \"admin\",\n    },\n});\nconst serviceAccount = new harness.platform.KubernetesConnector(\"serviceAccount\", {\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"description\",\n    identifier: \"identifier\",\n    serviceAccount: {\n        masterUrl: \"https://kubernetes.example.com\",\n        serviceAccountTokenRef: \"account.TEST_k8s_client_test\",\n    },\n    tags: [\"foo:bar\"],\n});\nconst openIDConnect = new harness.platform.KubernetesConnector(\"openIDConnect\", {\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"description\",\n    identifier: \"%[1]s\",\n    openidConnect: {\n        clientIdRef: \"account.TEST_k8s_client_test\",\n        issuerUrl: \"https://oidc.example.com\",\n        masterUrl: \"https://kubernetes.example.com\",\n        passwordRef: \"account.TEST_k8s_client_test\",\n        scopes: [\n            \"scope1\",\n            \"scope2\",\n        ],\n        secretRef: \"account.TEST_k8s_client_test\",\n        usernameRef: \"account.TEST_k8s_client_test\",\n    },\n    tags: [\"foo:bar\"],\n});\nconst inheritFromDelegate = new harness.platform.KubernetesConnector(\"inheritFromDelegate\", {\n    description: \"description\",\n    identifier: \"identifier\",\n    inheritFromDelegate: {\n        delegateSelectors: [\"harness-delegate\"],\n    },\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nclient_key_cert = harness.platform.KubernetesConnector(\"clientKeyCert\",\n    client_key_cert=harness.platform.KubernetesConnectorClientKeyCertArgs(\n        ca_cert_ref=\"account.TEST_k8ss_client_stuff\",\n        client_cert_ref=\"account.test_k8s_client_cert\",\n        client_key_algorithm=\"RSA\",\n        client_key_passphrase_ref=\"account.TEST_k8s_client_test\",\n        client_key_ref=\"account.TEST_k8s_client_key\",\n        master_url=\"https://kubernetes.example.com\",\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"description\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"])\nusername_password = harness.platform.KubernetesConnector(\"usernamePassword\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"description\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    username_password=harness.platform.KubernetesConnectorUsernamePasswordArgs(\n        master_url=\"https://kubernetes.example.com\",\n        password_ref=\"account.TEST_k8s_client_test\",\n        username=\"admin\",\n    ))\nservice_account = harness.platform.KubernetesConnector(\"serviceAccount\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"description\",\n    identifier=\"identifier\",\n    service_account=harness.platform.KubernetesConnectorServiceAccountArgs(\n        master_url=\"https://kubernetes.example.com\",\n        service_account_token_ref=\"account.TEST_k8s_client_test\",\n    ),\n    tags=[\"foo:bar\"])\nopen_id_connect = harness.platform.KubernetesConnector(\"openIDConnect\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"description\",\n    identifier=\"%[1]s\",\n    openid_connect=harness.platform.KubernetesConnectorOpenidConnectArgs(\n        client_id_ref=\"account.TEST_k8s_client_test\",\n        issuer_url=\"https://oidc.example.com\",\n        master_url=\"https://kubernetes.example.com\",\n        password_ref=\"account.TEST_k8s_client_test\",\n        scopes=[\n            \"scope1\",\n            \"scope2\",\n        ],\n        secret_ref=\"account.TEST_k8s_client_test\",\n        username_ref=\"account.TEST_k8s_client_test\",\n    ),\n    tags=[\"foo:bar\"])\ninherit_from_delegate = harness.platform.KubernetesConnector(\"inheritFromDelegate\",\n    description=\"description\",\n    identifier=\"identifier\",\n    inherit_from_delegate=harness.platform.KubernetesConnectorInheritFromDelegateArgs(\n        delegate_selectors=[\"harness-delegate\"],\n    ),\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var clientKeyCert = new Harness.Platform.KubernetesConnector(\"clientKeyCert\", new()\n    {\n        ClientKeyCert = new Harness.Platform.Inputs.KubernetesConnectorClientKeyCertArgs\n        {\n            CaCertRef = \"account.TEST_k8ss_client_stuff\",\n            ClientCertRef = \"account.test_k8s_client_cert\",\n            ClientKeyAlgorithm = \"RSA\",\n            ClientKeyPassphraseRef = \"account.TEST_k8s_client_test\",\n            ClientKeyRef = \"account.TEST_k8s_client_key\",\n            MasterUrl = \"https://kubernetes.example.com\",\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"description\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n    var usernamePassword = new Harness.Platform.KubernetesConnector(\"usernamePassword\", new()\n    {\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"description\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        UsernamePassword = new Harness.Platform.Inputs.KubernetesConnectorUsernamePasswordArgs\n        {\n            MasterUrl = \"https://kubernetes.example.com\",\n            PasswordRef = \"account.TEST_k8s_client_test\",\n            Username = \"admin\",\n        },\n    });\n\n    var serviceAccount = new Harness.Platform.KubernetesConnector(\"serviceAccount\", new()\n    {\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"description\",\n        Identifier = \"identifier\",\n        ServiceAccount = new Harness.Platform.Inputs.KubernetesConnectorServiceAccountArgs\n        {\n            MasterUrl = \"https://kubernetes.example.com\",\n            ServiceAccountTokenRef = \"account.TEST_k8s_client_test\",\n        },\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n    var openIDConnect = new Harness.Platform.KubernetesConnector(\"openIDConnect\", new()\n    {\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"description\",\n        Identifier = \"%[1]s\",\n        OpenidConnect = new Harness.Platform.Inputs.KubernetesConnectorOpenidConnectArgs\n        {\n            ClientIdRef = \"account.TEST_k8s_client_test\",\n            IssuerUrl = \"https://oidc.example.com\",\n            MasterUrl = \"https://kubernetes.example.com\",\n            PasswordRef = \"account.TEST_k8s_client_test\",\n            Scopes = new[]\n            {\n                \"scope1\",\n                \"scope2\",\n            },\n            SecretRef = \"account.TEST_k8s_client_test\",\n            UsernameRef = \"account.TEST_k8s_client_test\",\n        },\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n    var inheritFromDelegate = new Harness.Platform.KubernetesConnector(\"inheritFromDelegate\", new()\n    {\n        Description = \"description\",\n        Identifier = \"identifier\",\n        InheritFromDelegate = new Harness.Platform.Inputs.KubernetesConnectorInheritFromDelegateArgs\n        {\n            DelegateSelectors = new[]\n            {\n                \"harness-delegate\",\n            },\n        },\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewKubernetesConnector(ctx, \"clientKeyCert\", \u0026platform.KubernetesConnectorArgs{\n\t\t\tClientKeyCert: \u0026platform.KubernetesConnectorClientKeyCertArgs{\n\t\t\t\tCaCertRef:              pulumi.String(\"account.TEST_k8ss_client_stuff\"),\n\t\t\t\tClientCertRef:          pulumi.String(\"account.test_k8s_client_cert\"),\n\t\t\t\tClientKeyAlgorithm:     pulumi.String(\"RSA\"),\n\t\t\t\tClientKeyPassphraseRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t\tClientKeyRef:           pulumi.String(\"account.TEST_k8s_client_key\"),\n\t\t\t\tMasterUrl:              pulumi.String(\"https://kubernetes.example.com\"),\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewKubernetesConnector(ctx, \"usernamePassword\", \u0026platform.KubernetesConnectorArgs{\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUsernamePassword: \u0026platform.KubernetesConnectorUsernamePasswordArgs{\n\t\t\t\tMasterUrl:   pulumi.String(\"https://kubernetes.example.com\"),\n\t\t\t\tPasswordRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t\tUsername:    pulumi.String(\"admin\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewKubernetesConnector(ctx, \"serviceAccount\", \u0026platform.KubernetesConnectorArgs{\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tServiceAccount: \u0026platform.KubernetesConnectorServiceAccountArgs{\n\t\t\t\tMasterUrl:              pulumi.String(\"https://kubernetes.example.com\"),\n\t\t\t\tServiceAccountTokenRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewKubernetesConnector(ctx, \"openIDConnect\", \u0026platform.KubernetesConnectorArgs{\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tIdentifier:  pulumi.String(fmt.Sprintf(\"%v[1]s\", \"%\")),\n\t\t\tOpenidConnect: \u0026platform.KubernetesConnectorOpenidConnectArgs{\n\t\t\t\tClientIdRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t\tIssuerUrl:   pulumi.String(\"https://oidc.example.com\"),\n\t\t\t\tMasterUrl:   pulumi.String(\"https://kubernetes.example.com\"),\n\t\t\t\tPasswordRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"scope1\"),\n\t\t\t\t\tpulumi.String(\"scope2\"),\n\t\t\t\t},\n\t\t\t\tSecretRef:   pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t\tUsernameRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewKubernetesConnector(ctx, \"inheritFromDelegate\", \u0026platform.KubernetesConnectorArgs{\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tInheritFromDelegate: \u0026platform.KubernetesConnectorInheritFromDelegateArgs{\n\t\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.KubernetesConnector;\nimport com.pulumi.harness.platform.KubernetesConnectorArgs;\nimport com.pulumi.harness.platform.inputs.KubernetesConnectorClientKeyCertArgs;\nimport com.pulumi.harness.platform.inputs.KubernetesConnectorUsernamePasswordArgs;\nimport com.pulumi.harness.platform.inputs.KubernetesConnectorServiceAccountArgs;\nimport com.pulumi.harness.platform.inputs.KubernetesConnectorOpenidConnectArgs;\nimport com.pulumi.harness.platform.inputs.KubernetesConnectorInheritFromDelegateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var clientKeyCert = new KubernetesConnector(\"clientKeyCert\", KubernetesConnectorArgs.builder()        \n            .clientKeyCert(KubernetesConnectorClientKeyCertArgs.builder()\n                .caCertRef(\"account.TEST_k8ss_client_stuff\")\n                .clientCertRef(\"account.test_k8s_client_cert\")\n                .clientKeyAlgorithm(\"RSA\")\n                .clientKeyPassphraseRef(\"account.TEST_k8s_client_test\")\n                .clientKeyRef(\"account.TEST_k8s_client_key\")\n                .masterUrl(\"https://kubernetes.example.com\")\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"description\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .build());\n\n        var usernamePassword = new KubernetesConnector(\"usernamePassword\", KubernetesConnectorArgs.builder()        \n            .delegateSelectors(\"harness-delegate\")\n            .description(\"description\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .usernamePassword(KubernetesConnectorUsernamePasswordArgs.builder()\n                .masterUrl(\"https://kubernetes.example.com\")\n                .passwordRef(\"account.TEST_k8s_client_test\")\n                .username(\"admin\")\n                .build())\n            .build());\n\n        var serviceAccount = new KubernetesConnector(\"serviceAccount\", KubernetesConnectorArgs.builder()        \n            .delegateSelectors(\"harness-delegate\")\n            .description(\"description\")\n            .identifier(\"identifier\")\n            .serviceAccount(KubernetesConnectorServiceAccountArgs.builder()\n                .masterUrl(\"https://kubernetes.example.com\")\n                .serviceAccountTokenRef(\"account.TEST_k8s_client_test\")\n                .build())\n            .tags(\"foo:bar\")\n            .build());\n\n        var openIDConnect = new KubernetesConnector(\"openIDConnect\", KubernetesConnectorArgs.builder()        \n            .delegateSelectors(\"harness-delegate\")\n            .description(\"description\")\n            .identifier(\"%[1]s\")\n            .openidConnect(KubernetesConnectorOpenidConnectArgs.builder()\n                .clientIdRef(\"account.TEST_k8s_client_test\")\n                .issuerUrl(\"https://oidc.example.com\")\n                .masterUrl(\"https://kubernetes.example.com\")\n                .passwordRef(\"account.TEST_k8s_client_test\")\n                .scopes(                \n                    \"scope1\",\n                    \"scope2\")\n                .secretRef(\"account.TEST_k8s_client_test\")\n                .usernameRef(\"account.TEST_k8s_client_test\")\n                .build())\n            .tags(\"foo:bar\")\n            .build());\n\n        var inheritFromDelegate = new KubernetesConnector(\"inheritFromDelegate\", KubernetesConnectorArgs.builder()        \n            .description(\"description\")\n            .identifier(\"identifier\")\n            .inheritFromDelegate(KubernetesConnectorInheritFromDelegateArgs.builder()\n                .delegateSelectors(\"harness-delegate\")\n                .build())\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  clientKeyCert:\n    type: harness:platform:KubernetesConnector\n    properties:\n      clientKeyCert:\n        caCertRef: account.TEST_k8ss_client_stuff\n        clientCertRef: account.test_k8s_client_cert\n        clientKeyAlgorithm: RSA\n        clientKeyPassphraseRef: account.TEST_k8s_client_test\n        clientKeyRef: account.TEST_k8s_client_key\n        masterUrl: https://kubernetes.example.com\n      delegateSelectors:\n        - harness-delegate\n      description: description\n      identifier: identifier\n      tags:\n        - foo:bar\n  usernamePassword:\n    type: harness:platform:KubernetesConnector\n    properties:\n      delegateSelectors:\n        - harness-delegate\n      description: description\n      identifier: identifier\n      tags:\n        - foo:bar\n      usernamePassword:\n        masterUrl: https://kubernetes.example.com\n        passwordRef: account.TEST_k8s_client_test\n        username: admin\n  serviceAccount:\n    type: harness:platform:KubernetesConnector\n    properties:\n      delegateSelectors:\n        - harness-delegate\n      description: description\n      identifier: identifier\n      serviceAccount:\n        masterUrl: https://kubernetes.example.com\n        serviceAccountTokenRef: account.TEST_k8s_client_test\n      tags:\n        - foo:bar\n  openIDConnect:\n    type: harness:platform:KubernetesConnector\n    properties:\n      delegateSelectors:\n        - harness-delegate\n      description: description\n      identifier: '%[1]s'\n      openidConnect:\n        clientIdRef: account.TEST_k8s_client_test\n        issuerUrl: https://oidc.example.com\n        masterUrl: https://kubernetes.example.com\n        passwordRef: account.TEST_k8s_client_test\n        scopes:\n          - scope1\n          - scope2\n        secretRef: account.TEST_k8s_client_test\n        usernameRef: account.TEST_k8s_client_test\n      tags:\n        - foo:bar\n  inheritFromDelegate:\n    type: harness:platform:KubernetesConnector\n    properties:\n      description: description\n      identifier: identifier\n      inheritFromDelegate:\n        delegateSelectors:\n          - harness-delegate\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using kubernetes connector id\n\n```sh\n $ pulumi import harness:platform/kubernetesConnector:KubernetesConnector example \u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "clientKeyCert": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorClientKeyCert:KubernetesConnectorClientKeyCert",
                    "description": "Client key and certificate config for the connector.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Selectors to use for the delegate.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "inheritFromDelegate": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorInheritFromDelegate:KubernetesConnectorInheritFromDelegate",
                    "description": "Credentials are inherited from the delegate.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "openidConnect": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorOpenidConnect:KubernetesConnectorOpenidConnect",
                    "description": "OpenID configuration for the connector.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceAccount": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorServiceAccount:KubernetesConnectorServiceAccount",
                    "description": "Service account for the connector.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorUsernamePassword:KubernetesConnectorUsernamePassword",
                    "description": "Username and password for the connector.\n"
                }
            },
            "required": [
                "identifier",
                "name"
            ],
            "inputProperties": {
                "clientKeyCert": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorClientKeyCert:KubernetesConnectorClientKeyCert",
                    "description": "Client key and certificate config for the connector.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Selectors to use for the delegate.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "inheritFromDelegate": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorInheritFromDelegate:KubernetesConnectorInheritFromDelegate",
                    "description": "Credentials are inherited from the delegate.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "openidConnect": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorOpenidConnect:KubernetesConnectorOpenidConnect",
                    "description": "OpenID configuration for the connector.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceAccount": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorServiceAccount:KubernetesConnectorServiceAccount",
                    "description": "Service account for the connector.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorUsernamePassword:KubernetesConnectorUsernamePassword",
                    "description": "Username and password for the connector.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesConnector resources.\n",
                "properties": {
                    "clientKeyCert": {
                        "$ref": "#/types/harness:platform/KubernetesConnectorClientKeyCert:KubernetesConnectorClientKeyCert",
                        "description": "Client key and certificate config for the connector.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Selectors to use for the delegate.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "inheritFromDelegate": {
                        "$ref": "#/types/harness:platform/KubernetesConnectorInheritFromDelegate:KubernetesConnectorInheritFromDelegate",
                        "description": "Credentials are inherited from the delegate.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "openidConnect": {
                        "$ref": "#/types/harness:platform/KubernetesConnectorOpenidConnect:KubernetesConnectorOpenidConnect",
                        "description": "OpenID configuration for the connector.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "serviceAccount": {
                        "$ref": "#/types/harness:platform/KubernetesConnectorServiceAccount:KubernetesConnectorServiceAccount",
                        "description": "Service account for the connector.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "usernamePassword": {
                        "$ref": "#/types/harness:platform/KubernetesConnectorUsernamePassword:KubernetesConnectorUsernamePassword",
                        "description": "Username and password for the connector.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/newrelicConnector:NewrelicConnector": {
            "description": "Resource for creating a New Relic connector.\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account ID of the NewRelic account.\n"
                },
                "apiKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api key.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the NewRelic server.\n"
                }
            },
            "required": [
                "accountId",
                "apiKeyRef",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account ID of the NewRelic account.\n"
                },
                "apiKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api key.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the NewRelic server.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "apiKeyRef",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NewrelicConnector resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account ID of the NewRelic account.\n"
                    },
                    "apiKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the api key.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the NewRelic server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/nexusConnector:NexusConnector": {
            "description": "Resource for creating a Nexus connector.\n",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/NexusConnectorCredentials:NexusConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Nexus server.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the Nexus server. Valid values are 2.x, 3.x\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "url",
                "version"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/NexusConnectorCredentials:NexusConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Nexus server.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the Nexus server. Valid values are 2.x, 3.x\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "url",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NexusConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/NexusConnectorCredentials:NexusConnectorCredentials",
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Nexus server.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the Nexus server. Valid values are 2.x, 3.x\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/organization:Organization": {
            "description": "Resource for creating a Harness organization.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "required": [
                "identifier",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Organization resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/pagerdutyConnector:PagerdutyConnector": {
            "description": "Resource for creating a PagerDuty connector.\n",
            "properties": {
                "apiTokenRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api token.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "required": [
                "apiTokenRef",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "apiTokenRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api token.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "requiredInputs": [
                "apiTokenRef",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PagerdutyConnector resources.\n",
                "properties": {
                    "apiTokenRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the api token.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/pipeline:Pipeline": {
            "description": "Resource for creating a Harness pipeline.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.Pipeline(\"example\", {\n    identifier: \"identifier\",\n    orgId: harness_platform_project.test.org_id,\n    projectId: harness_platform_project.test.id,\n    yaml: `pipeline:\n    name: name\n    identifier: identifier\n    allowStageExecutions: false\n    projectIdentifier: projectIdentifier\n    orgIdentifier: orgIdentifier\n    tags: {}\n    stages:\n        - stage:\n            name: dep\n            identifier: dep\n            description: \"\"\n            type: Deployment\n            spec:\n                serviceConfig:\n                    serviceRef: service\n                    serviceDefinition:\n                        type: Kubernetes\n                        spec:\n                            variables: []\n                infrastructure:\n                    environmentRef: testenv\n                    infrastructureDefinition:\n                        type: KubernetesDirect\n                        spec:\n                            connectorRef: testconf\n                            namespace: test\n                            releaseName: release-\u003c+INFRA_KEY\u003e\n                    allowSimultaneousDeployments: false\n                execution:\n                    steps:\n                        - stepGroup:\n                                name: Canary Deployment\n                                identifier: canaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Canary Deployment\n                                        identifier: canaryDeployment\n                                        type: K8sCanaryDeploy\n                                        timeout: 10m\n                                        spec:\n                                            instanceSelection:\n                                                type: Count\n                                                spec:\n                                                    count: 1\n                                            skipDryRun: false\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: canaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                                rollbackSteps:\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: rollbackCanaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                        - stepGroup:\n                                name: Primary Deployment\n                                identifier: primaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Rolling Deployment\n                                        identifier: rollingDeployment\n                                        type: K8sRollingDeploy\n                                        timeout: 10m\n                                        spec:\n                                            skipDryRun: false\n                                rollbackSteps:\n                                    - step:\n                                        name: Rolling Rollback\n                                        identifier: rollingRollback\n                                        type: K8sRollingRollback\n                                        timeout: 10m\n                                        spec: {}\n                    rollbackSteps: []\n            tags: {}\n            failureStrategies:\n                - onFailure:\n                        errors:\n                            - AllErrors\n                        action:\n                            type: StageRollback\n`,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.Pipeline(\"example\",\n    identifier=\"identifier\",\n    org_id=harness_platform_project[\"test\"][\"org_id\"],\n    project_id=harness_platform_project[\"test\"][\"id\"],\n    yaml=\"\"\"pipeline:\n    name: name\n    identifier: identifier\n    allowStageExecutions: false\n    projectIdentifier: projectIdentifier\n    orgIdentifier: orgIdentifier\n    tags: {}\n    stages:\n        - stage:\n            name: dep\n            identifier: dep\n            description: \"\"\n            type: Deployment\n            spec:\n                serviceConfig:\n                    serviceRef: service\n                    serviceDefinition:\n                        type: Kubernetes\n                        spec:\n                            variables: []\n                infrastructure:\n                    environmentRef: testenv\n                    infrastructureDefinition:\n                        type: KubernetesDirect\n                        spec:\n                            connectorRef: testconf\n                            namespace: test\n                            releaseName: release-\u003c+INFRA_KEY\u003e\n                    allowSimultaneousDeployments: false\n                execution:\n                    steps:\n                        - stepGroup:\n                                name: Canary Deployment\n                                identifier: canaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Canary Deployment\n                                        identifier: canaryDeployment\n                                        type: K8sCanaryDeploy\n                                        timeout: 10m\n                                        spec:\n                                            instanceSelection:\n                                                type: Count\n                                                spec:\n                                                    count: 1\n                                            skipDryRun: false\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: canaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                                rollbackSteps:\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: rollbackCanaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                        - stepGroup:\n                                name: Primary Deployment\n                                identifier: primaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Rolling Deployment\n                                        identifier: rollingDeployment\n                                        type: K8sRollingDeploy\n                                        timeout: 10m\n                                        spec:\n                                            skipDryRun: false\n                                rollbackSteps:\n                                    - step:\n                                        name: Rolling Rollback\n                                        identifier: rollingRollback\n                                        type: K8sRollingRollback\n                                        timeout: 10m\n                                        spec: {}\n                    rollbackSteps: []\n            tags: {}\n            failureStrategies:\n                - onFailure:\n                        errors:\n                            - AllErrors\n                        action:\n                            type: StageRollback\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.Pipeline(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        OrgId = harness_platform_project.Test.Org_id,\n        ProjectId = harness_platform_project.Test.Id,\n        Yaml = @\"pipeline:\n    name: name\n    identifier: identifier\n    allowStageExecutions: false\n    projectIdentifier: projectIdentifier\n    orgIdentifier: orgIdentifier\n    tags: {}\n    stages:\n        - stage:\n            name: dep\n            identifier: dep\n            description: \"\"\"\"\n            type: Deployment\n            spec:\n                serviceConfig:\n                    serviceRef: service\n                    serviceDefinition:\n                        type: Kubernetes\n                        spec:\n                            variables: []\n                infrastructure:\n                    environmentRef: testenv\n                    infrastructureDefinition:\n                        type: KubernetesDirect\n                        spec:\n                            connectorRef: testconf\n                            namespace: test\n                            releaseName: release-\u003c+INFRA_KEY\u003e\n                    allowSimultaneousDeployments: false\n                execution:\n                    steps:\n                        - stepGroup:\n                                name: Canary Deployment\n                                identifier: canaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Canary Deployment\n                                        identifier: canaryDeployment\n                                        type: K8sCanaryDeploy\n                                        timeout: 10m\n                                        spec:\n                                            instanceSelection:\n                                                type: Count\n                                                spec:\n                                                    count: 1\n                                            skipDryRun: false\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: canaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                                rollbackSteps:\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: rollbackCanaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                        - stepGroup:\n                                name: Primary Deployment\n                                identifier: primaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Rolling Deployment\n                                        identifier: rollingDeployment\n                                        type: K8sRollingDeploy\n                                        timeout: 10m\n                                        spec:\n                                            skipDryRun: false\n                                rollbackSteps:\n                                    - step:\n                                        name: Rolling Rollback\n                                        identifier: rollingRollback\n                                        type: K8sRollingRollback\n                                        timeout: 10m\n                                        spec: {}\n                    rollbackSteps: []\n            tags: {}\n            failureStrategies:\n                - onFailure:\n                        errors:\n                            - AllErrors\n                        action:\n                            type: StageRollback\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewPipeline(ctx, \"example\", \u0026platform.PipelineArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tOrgId:      pulumi.Any(harness_platform_project.Test.Org_id),\n\t\t\tProjectId:  pulumi.Any(harness_platform_project.Test.Id),\n\t\t\tYaml: pulumi.String(fmt.Sprintf(`pipeline:\n    name: name\n    identifier: identifier\n    allowStageExecutions: false\n    projectIdentifier: projectIdentifier\n    orgIdentifier: orgIdentifier\n    tags: {}\n    stages:\n        - stage:\n            name: dep\n            identifier: dep\n            description: \"\"\n            type: Deployment\n            spec:\n                serviceConfig:\n                    serviceRef: service\n                    serviceDefinition:\n                        type: Kubernetes\n                        spec:\n                            variables: []\n                infrastructure:\n                    environmentRef: testenv\n                    infrastructureDefinition:\n                        type: KubernetesDirect\n                        spec:\n                            connectorRef: testconf\n                            namespace: test\n                            releaseName: release-\u003c+INFRA_KEY\u003e\n                    allowSimultaneousDeployments: false\n                execution:\n                    steps:\n                        - stepGroup:\n                                name: Canary Deployment\n                                identifier: canaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Canary Deployment\n                                        identifier: canaryDeployment\n                                        type: K8sCanaryDeploy\n                                        timeout: 10m\n                                        spec:\n                                            instanceSelection:\n                                                type: Count\n                                                spec:\n                                                    count: 1\n                                            skipDryRun: false\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: canaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                                rollbackSteps:\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: rollbackCanaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                        - stepGroup:\n                                name: Primary Deployment\n                                identifier: primaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Rolling Deployment\n                                        identifier: rollingDeployment\n                                        type: K8sRollingDeploy\n                                        timeout: 10m\n                                        spec:\n                                            skipDryRun: false\n                                rollbackSteps:\n                                    - step:\n                                        name: Rolling Rollback\n                                        identifier: rollingRollback\n                                        type: K8sRollingRollback\n                                        timeout: 10m\n                                        spec: {}\n                    rollbackSteps: []\n            tags: {}\n            failureStrategies:\n                - onFailure:\n                        errors:\n                            - AllErrors\n                        action:\n                            type: StageRollback\n`)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Pipeline;\nimport com.pulumi.harness.platform.PipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Pipeline(\"example\", PipelineArgs.builder()        \n            .identifier(\"identifier\")\n            .orgId(harness_platform_project.test().org_id())\n            .projectId(harness_platform_project.test().id())\n            .yaml(\"\"\"\npipeline:\n    name: name\n    identifier: identifier\n    allowStageExecutions: false\n    projectIdentifier: projectIdentifier\n    orgIdentifier: orgIdentifier\n    tags: {}\n    stages:\n        - stage:\n            name: dep\n            identifier: dep\n            description: \"\"\n            type: Deployment\n            spec:\n                serviceConfig:\n                    serviceRef: service\n                    serviceDefinition:\n                        type: Kubernetes\n                        spec:\n                            variables: []\n                infrastructure:\n                    environmentRef: testenv\n                    infrastructureDefinition:\n                        type: KubernetesDirect\n                        spec:\n                            connectorRef: testconf\n                            namespace: test\n                            releaseName: release-\u003c+INFRA_KEY\u003e\n                    allowSimultaneousDeployments: false\n                execution:\n                    steps:\n                        - stepGroup:\n                                name: Canary Deployment\n                                identifier: canaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Canary Deployment\n                                        identifier: canaryDeployment\n                                        type: K8sCanaryDeploy\n                                        timeout: 10m\n                                        spec:\n                                            instanceSelection:\n                                                type: Count\n                                                spec:\n                                                    count: 1\n                                            skipDryRun: false\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: canaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                                rollbackSteps:\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: rollbackCanaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                        - stepGroup:\n                                name: Primary Deployment\n                                identifier: primaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Rolling Deployment\n                                        identifier: rollingDeployment\n                                        type: K8sRollingDeploy\n                                        timeout: 10m\n                                        spec:\n                                            skipDryRun: false\n                                rollbackSteps:\n                                    - step:\n                                        name: Rolling Rollback\n                                        identifier: rollingRollback\n                                        type: K8sRollingRollback\n                                        timeout: 10m\n                                        spec: {}\n                    rollbackSteps: []\n            tags: {}\n            failureStrategies:\n                - onFailure:\n                        errors:\n                            - AllErrors\n                        action:\n                            type: StageRollback\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:Pipeline\n    properties:\n      identifier: identifier\n      orgId: ${harness_platform_project.test.org_id}\n      projectId: ${harness_platform_project.test.id}\n      yaml: |\n        pipeline:\n            name: name\n            identifier: identifier\n            allowStageExecutions: false\n            projectIdentifier: projectIdentifier\n            orgIdentifier: orgIdentifier\n            tags: {}\n            stages:\n                - stage:\n                    name: dep\n                    identifier: dep\n                    description: \"\"\n                    type: Deployment\n                    spec:\n                        serviceConfig:\n                            serviceRef: service\n                            serviceDefinition:\n                                type: Kubernetes\n                                spec:\n                                    variables: []\n                        infrastructure:\n                            environmentRef: testenv\n                            infrastructureDefinition:\n                                type: KubernetesDirect\n                                spec:\n                                    connectorRef: testconf\n                                    namespace: test\n                                    releaseName: release-\u003c+INFRA_KEY\u003e\n                            allowSimultaneousDeployments: false\n                        execution:\n                            steps:\n                                - stepGroup:\n                                        name: Canary Deployment\n                                        identifier: canaryDepoyment\n                                        steps:\n                                            - step:\n                                                name: Canary Deployment\n                                                identifier: canaryDeployment\n                                                type: K8sCanaryDeploy\n                                                timeout: 10m\n                                                spec:\n                                                    instanceSelection:\n                                                        type: Count\n                                                        spec:\n                                                            count: 1\n                                                    skipDryRun: false\n                                            - step:\n                                                name: Canary Delete\n                                                identifier: canaryDelete\n                                                type: K8sCanaryDelete\n                                                timeout: 10m\n                                                spec: {}\n                                        rollbackSteps:\n                                            - step:\n                                                name: Canary Delete\n                                                identifier: rollbackCanaryDelete\n                                                type: K8sCanaryDelete\n                                                timeout: 10m\n                                                spec: {}\n                                - stepGroup:\n                                        name: Primary Deployment\n                                        identifier: primaryDepoyment\n                                        steps:\n                                            - step:\n                                                name: Rolling Deployment\n                                                identifier: rollingDeployment\n                                                type: K8sRollingDeploy\n                                                timeout: 10m\n                                                spec:\n                                                    skipDryRun: false\n                                        rollbackSteps:\n                                            - step:\n                                                name: Rolling Rollback\n                                                identifier: rollingRollback\n                                                type: K8sRollingRollback\n                                                timeout: 10m\n                                                spec: {}\n                            rollbackSteps: []\n                    tags: {}\n                    failureStrategies:\n                        - onFailure:\n                                errors:\n                                    - AllErrors\n                                action:\n                                    type: StageRollback\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "YAML of the pipeline.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "orgId",
                "projectId",
                "yaml"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "YAML of the pipeline.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "orgId",
                "projectId",
                "yaml"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pipeline resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "YAML of the pipeline.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/project:Project": {
            "description": "Resource for creating a Harness project.\n",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color of the project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "modules": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Modules in the project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "required": [
                "color",
                "identifier",
                "modules",
                "name",
                "orgId"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "Color of the project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Color of the project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "modules": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Modules in the project.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/prometheusConnector:PrometheusConnector": {
            "description": "Resource for creating a Prometheus connector.\n",
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the Prometheus server.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the Prometheus server.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrometheusConnector resources.\n",
                "properties": {
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the Prometheus server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/resourceGroup:ResourceGroup": {
            "description": "Resource for creating a Harness Resource Group\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.platform.ResourceGroup(\"test\", {\n    accountId: \"account_id\",\n    allowedScopeLevels: [\"account\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    includedScopes: [{\n        accountId: \"account_id\",\n        filter: \"EXCLUDING_CHILD_SCOPES\",\n    }],\n    resourceFilters: [{\n        includeAllResources: false,\n        resources: [{\n            attributeFilters: [{\n                attributeName: \"category\",\n                attributeValues: [\"value\"],\n            }],\n            resourceType: \"CONNECTOR\",\n        }],\n    }],\n    tags: [\"foo:bar\"],\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ResourceGroup;\nimport com.pulumi.harness.platform.ResourceGroupArgs;\nimport com.pulumi.harness.platform.inputs.ResourceGroupIncludedScopeArgs;\nimport com.pulumi.harness.platform.inputs.ResourceGroupResourceFilterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new ResourceGroup(\"test\", ResourceGroupArgs.builder()        \n            .accountId(\"account_id\")\n            .allowedScopeLevels(\"account\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .includedScopes(ResourceGroupIncludedScopeArgs.builder()\n                .accountId(\"account_id\")\n                .filter(\"EXCLUDING_CHILD_SCOPES\")\n                .build())\n            .resourceFilters(ResourceGroupResourceFilterArgs.builder()\n                .includeAllResources(false)\n                .resources(ResourceGroupResourceFilterResourceArgs.builder()\n                    .attributeFilter(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .resourceType(\"CONNECTOR\")\n                    .build())\n                .build())\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:ResourceGroup\n    properties:\n      accountId: account_id\n      allowedScopeLevels:\n        - account\n      description: test\n      identifier: identifier\n      includedScopes:\n        - accountId: account_id\n          filter: EXCLUDING_CHILD_SCOPES\n      resourceFilters:\n        - includeAllResources: false\n          resources:\n            - attributeFilter:\n                - attributeName: category\n                  attributeValues:\n                    - value\n              resourceType: CONNECTOR\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using resource group id\n\n```sh\n $ pulumi import harness:platform/resourceGroup:ResourceGroup example \u003cresource_group_id\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier of the account\n"
                },
                "allowedScopeLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scope levels at which this resource group can be used\n"
                },
                "color": {
                    "type": "string",
                    "description": "Color of the environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "includedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupIncludedScope:ResourceGroupIncludedScope"
                    },
                    "description": "Included scopes\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "resourceFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupResourceFilter:ResourceGroupResourceFilter"
                    },
                    "description": "Contains resource filter for a resource group\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "required": [
                "accountId",
                "allowedScopeLevels",
                "color",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier of the account\n"
                },
                "allowedScopeLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scope levels at which this resource group can be used\n"
                },
                "color": {
                    "type": "string",
                    "description": "Color of the environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "includedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupIncludedScope:ResourceGroupIncludedScope"
                    },
                    "description": "Included scopes\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "resourceFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupResourceFilter:ResourceGroupResourceFilter"
                    },
                    "description": "Contains resource filter for a resource group\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceGroup resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier of the account\n"
                    },
                    "allowedScopeLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The scope levels at which this resource group can be used\n"
                    },
                    "color": {
                        "type": "string",
                        "description": "Color of the environment.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "includedScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/ResourceGroupIncludedScope:ResourceGroupIncludedScope"
                        },
                        "description": "Included scopes\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "resourceFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/ResourceGroupResourceFilter:ResourceGroupResourceFilter"
                        },
                        "description": "Contains resource filter for a resource group\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/roles:Roles": {
            "description": "Resource for creating roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.Roles(\"example\", {\n    allowedScopeLevels: [\"project\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    permissions: [\"core_pipeline_edit\"],\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.Roles(\"example\",\n    allowed_scope_levels=[\"project\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    permissions=[\"core_pipeline_edit\"],\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.Roles(\"example\", new()\n    {\n        AllowedScopeLevels = new[]\n        {\n            \"project\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Permissions = new[]\n        {\n            \"core_pipeline_edit\",\n        },\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewRoles(ctx, \"example\", \u0026platform.RolesArgs{\n\t\t\tAllowedScopeLevels: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"project\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tPermissions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"core_pipeline_edit\"),\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Roles;\nimport com.pulumi.harness.platform.RolesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Roles(\"example\", RolesArgs.builder()        \n            .allowedScopeLevels(\"project\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .permissions(\"core_pipeline_edit\")\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:Roles\n    properties:\n      allowedScopeLevels:\n        - project\n      description: test\n      identifier: identifier\n      permissions:\n        - core_pipeline_edit\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using roles id\n\n```sh\n $ pulumi import harness:platform/roles:Roles example \u003croles_id\u003e\n```\n\n ",
            "properties": {
                "allowedScopeLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scope levels at which this role can be used\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the permission identifiers\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "required": [
                "allowedScopeLevels",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "allowedScopeLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scope levels at which this role can be used\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the permission identifiers\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Roles resources.\n",
                "properties": {
                    "allowedScopeLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The scope levels at which this role can be used\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the permission identifiers\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/secretFile:SecretFile": {
            "description": "Resource for creating a secret of type secret file in Harness.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.SecretFile(\"example\", {\n    description: \"test\",\n    filePath: \"file_path\",\n    identifier: \"identifier\",\n    secretManagerIdentifier: \"harnessSecretManager\",\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.SecretFile(\"example\",\n    description=\"test\",\n    file_path=\"file_path\",\n    identifier=\"identifier\",\n    secret_manager_identifier=\"harnessSecretManager\",\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.SecretFile(\"example\", new()\n    {\n        Description = \"test\",\n        FilePath = \"file_path\",\n        Identifier = \"identifier\",\n        SecretManagerIdentifier = \"harnessSecretManager\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewSecretFile(ctx, \"example\", \u0026platform.SecretFileArgs{\n\t\t\tDescription:             pulumi.String(\"test\"),\n\t\t\tFilePath:                pulumi.String(\"file_path\"),\n\t\t\tIdentifier:              pulumi.String(\"identifier\"),\n\t\t\tSecretManagerIdentifier: pulumi.String(\"harnessSecretManager\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.SecretFile;\nimport com.pulumi.harness.platform.SecretFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new SecretFile(\"example\", SecretFileArgs.builder()        \n            .description(\"test\")\n            .filePath(\"file_path\")\n            .identifier(\"identifier\")\n            .secretManagerIdentifier(\"harnessSecretManager\")\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:SecretFile\n    properties:\n      description: test\n      filePath: file_path\n      identifier: identifier\n      secretManagerIdentifier: harnessSecretManager\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using secret file id\n\n```sh\n $ pulumi import harness:platform/secretFile:SecretFile example \u003csecret_file_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "Path of the file containing secret value\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "secretManagerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the Secret Manager used to manage the secret.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "required": [
                "filePath",
                "identifier",
                "name",
                "secretManagerIdentifier"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "Path of the file containing secret value\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "secretManagerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the Secret Manager used to manage the secret.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "requiredInputs": [
                "filePath",
                "identifier",
                "secretManagerIdentifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretFile resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "filePath": {
                        "type": "string",
                        "description": "Path of the file containing secret value\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "secretManagerIdentifier": {
                        "type": "string",
                        "description": "Identifier of the Secret Manager used to manage the secret.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/secretSshkey:SecretSshkey": {
            "description": "Resource for creating an ssh key type secret.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst keyTabFilePath = new harness.platform.SecretSshkey(\"key_tab_file_path\", {\n    description: \"test\",\n    identifier: \"identifier\",\n    kerberos: {\n        principal: \"principal\",\n        realm: \"realm\",\n        tgtGenerationMethod: \"KeyTabFilePath\",\n        tgtKeyTabFilePathSpec: {\n            keyPath: \"key_path\",\n        },\n    },\n    port: 22,\n    tags: [\"foo:bar\"],\n});\nconst _tgt_password = new harness.platform.SecretSshkey(\" tgt_password\", {\n    description: \"test\",\n    identifier: \"identifier\",\n    kerberos: {\n        principal: \"principal\",\n        realm: \"realm\",\n        tgtGenerationMethod: \"Password\",\n        tgtPasswordSpec: {\n            password: \"password\",\n        },\n    },\n    port: 22,\n    tags: [\"foo:bar\"],\n});\nconst sshkeyReference = new harness.platform.SecretSshkey(\"sshkey_reference\", {\n    description: \"test\",\n    identifier: \"identifier\",\n    port: 22,\n    ssh: {\n        credentialType: \"KeyReference\",\n        sshkeyReferenceCredential: {\n            encryptedPassphrase: \"encrypted_passphrase\",\n            key: \"key\",\n            userName: \"user_name\",\n        },\n    },\n    tags: [\"foo:bar\"],\n});\nconst _sshkey_path = new harness.platform.SecretSshkey(\" sshkey_path\", {\n    description: \"test\",\n    identifier: \"identifier\",\n    port: 22,\n    ssh: {\n        credentialType: \"KeyPath\",\n        sshkeyPathCredential: {\n            encryptedPassphrase: \"encrypted_passphrase\",\n            keyPath: \"key_path\",\n            userName: \"user_name\",\n        },\n    },\n    tags: [\"foo:bar\"],\n});\nconst sshPassword = new harness.platform.SecretSshkey(\"ssh_password\", {\n    description: \"test\",\n    identifier: \"identifier\",\n    port: 22,\n    ssh: {\n        credentialType: \"Password\",\n        sshPasswordCredential: {\n            password: \"password\",\n            userName: \"user_name\",\n        },\n    },\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nkey_tab_file_path = harness.platform.SecretSshkey(\"keyTabFilePath\",\n    description=\"test\",\n    identifier=\"identifier\",\n    kerberos=harness.platform.SecretSshkeyKerberosArgs(\n        principal=\"principal\",\n        realm=\"realm\",\n        tgt_generation_method=\"KeyTabFilePath\",\n        tgt_key_tab_file_path_spec=harness.platform.SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs(\n            key_path=\"key_path\",\n        ),\n    ),\n    port=22,\n    tags=[\"foo:bar\"])\n_tgt_password = harness.platform.SecretSshkey(\" tgtPassword\",\n    description=\"test\",\n    identifier=\"identifier\",\n    kerberos=harness.platform.SecretSshkeyKerberosArgs(\n        principal=\"principal\",\n        realm=\"realm\",\n        tgt_generation_method=\"Password\",\n        tgt_password_spec=harness.platform.SecretSshkeyKerberosTgtPasswordSpecArgs(\n            password=\"password\",\n        ),\n    ),\n    port=22,\n    tags=[\"foo:bar\"])\nsshkey_reference = harness.platform.SecretSshkey(\"sshkeyReference\",\n    description=\"test\",\n    identifier=\"identifier\",\n    port=22,\n    ssh=harness.platform.SecretSshkeySshArgs(\n        credential_type=\"KeyReference\",\n        sshkey_reference_credential=harness.platform.SecretSshkeySshSshkeyReferenceCredentialArgs(\n            encrypted_passphrase=\"encrypted_passphrase\",\n            key=\"key\",\n            user_name=\"user_name\",\n        ),\n    ),\n    tags=[\"foo:bar\"])\n_sshkey_path = harness.platform.SecretSshkey(\" sshkeyPath\",\n    description=\"test\",\n    identifier=\"identifier\",\n    port=22,\n    ssh=harness.platform.SecretSshkeySshArgs(\n        credential_type=\"KeyPath\",\n        sshkey_path_credential=harness.platform.SecretSshkeySshSshkeyPathCredentialArgs(\n            encrypted_passphrase=\"encrypted_passphrase\",\n            key_path=\"key_path\",\n            user_name=\"user_name\",\n        ),\n    ),\n    tags=[\"foo:bar\"])\nssh_password = harness.platform.SecretSshkey(\"sshPassword\",\n    description=\"test\",\n    identifier=\"identifier\",\n    port=22,\n    ssh=harness.platform.SecretSshkeySshArgs(\n        credential_type=\"Password\",\n        ssh_password_credential=harness.platform.SecretSshkeySshSshPasswordCredentialArgs(\n            password=\"password\",\n            user_name=\"user_name\",\n        ),\n    ),\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var keyTabFilePath = new Harness.Platform.SecretSshkey(\"keyTabFilePath\", new()\n    {\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Kerberos = new Harness.Platform.Inputs.SecretSshkeyKerberosArgs\n        {\n            Principal = \"principal\",\n            Realm = \"realm\",\n            TgtGenerationMethod = \"KeyTabFilePath\",\n            TgtKeyTabFilePathSpec = new Harness.Platform.Inputs.SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs\n            {\n                KeyPath = \"key_path\",\n            },\n        },\n        Port = 22,\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n    var _tgtPassword = new Harness.Platform.SecretSshkey(\" tgtPassword\", new()\n    {\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Kerberos = new Harness.Platform.Inputs.SecretSshkeyKerberosArgs\n        {\n            Principal = \"principal\",\n            Realm = \"realm\",\n            TgtGenerationMethod = \"Password\",\n            TgtPasswordSpec = new Harness.Platform.Inputs.SecretSshkeyKerberosTgtPasswordSpecArgs\n            {\n                Password = \"password\",\n            },\n        },\n        Port = 22,\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n    var sshkeyReference = new Harness.Platform.SecretSshkey(\"sshkeyReference\", new()\n    {\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Port = 22,\n        Ssh = new Harness.Platform.Inputs.SecretSshkeySshArgs\n        {\n            CredentialType = \"KeyReference\",\n            SshkeyReferenceCredential = new Harness.Platform.Inputs.SecretSshkeySshSshkeyReferenceCredentialArgs\n            {\n                EncryptedPassphrase = \"encrypted_passphrase\",\n                Key = \"key\",\n                UserName = \"user_name\",\n            },\n        },\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n    var _sshkeyPath = new Harness.Platform.SecretSshkey(\" sshkeyPath\", new()\n    {\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Port = 22,\n        Ssh = new Harness.Platform.Inputs.SecretSshkeySshArgs\n        {\n            CredentialType = \"KeyPath\",\n            SshkeyPathCredential = new Harness.Platform.Inputs.SecretSshkeySshSshkeyPathCredentialArgs\n            {\n                EncryptedPassphrase = \"encrypted_passphrase\",\n                KeyPath = \"key_path\",\n                UserName = \"user_name\",\n            },\n        },\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n    var sshPassword = new Harness.Platform.SecretSshkey(\"sshPassword\", new()\n    {\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Port = 22,\n        Ssh = new Harness.Platform.Inputs.SecretSshkeySshArgs\n        {\n            CredentialType = \"Password\",\n            SshPasswordCredential = new Harness.Platform.Inputs.SecretSshkeySshSshPasswordCredentialArgs\n            {\n                Password = \"password\",\n                UserName = \"user_name\",\n            },\n        },\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewSecretSshkey(ctx, \"keyTabFilePath\", \u0026platform.SecretSshkeyArgs{\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tKerberos: \u0026platform.SecretSshkeyKerberosArgs{\n\t\t\t\tPrincipal:           pulumi.String(\"principal\"),\n\t\t\t\tRealm:               pulumi.String(\"realm\"),\n\t\t\t\tTgtGenerationMethod: pulumi.String(\"KeyTabFilePath\"),\n\t\t\t\tTgtKeyTabFilePathSpec: \u0026platform.SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs{\n\t\t\t\t\tKeyPath: pulumi.String(\"key_path\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPort: pulumi.Int(22),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewSecretSshkey(ctx, \" tgtPassword\", \u0026platform.SecretSshkeyArgs{\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tKerberos: \u0026platform.SecretSshkeyKerberosArgs{\n\t\t\t\tPrincipal:           pulumi.String(\"principal\"),\n\t\t\t\tRealm:               pulumi.String(\"realm\"),\n\t\t\t\tTgtGenerationMethod: pulumi.String(\"Password\"),\n\t\t\t\tTgtPasswordSpec: \u0026platform.SecretSshkeyKerberosTgtPasswordSpecArgs{\n\t\t\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPort: pulumi.Int(22),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewSecretSshkey(ctx, \"sshkeyReference\", \u0026platform.SecretSshkeyArgs{\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tPort:        pulumi.Int(22),\n\t\t\tSsh: \u0026platform.SecretSshkeySshArgs{\n\t\t\t\tCredentialType: pulumi.String(\"KeyReference\"),\n\t\t\t\tSshkeyReferenceCredential: \u0026platform.SecretSshkeySshSshkeyReferenceCredentialArgs{\n\t\t\t\t\tEncryptedPassphrase: pulumi.String(\"encrypted_passphrase\"),\n\t\t\t\t\tKey:                 pulumi.String(\"key\"),\n\t\t\t\t\tUserName:            pulumi.String(\"user_name\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewSecretSshkey(ctx, \" sshkeyPath\", \u0026platform.SecretSshkeyArgs{\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tPort:        pulumi.Int(22),\n\t\t\tSsh: \u0026platform.SecretSshkeySshArgs{\n\t\t\t\tCredentialType: pulumi.String(\"KeyPath\"),\n\t\t\t\tSshkeyPathCredential: \u0026platform.SecretSshkeySshSshkeyPathCredentialArgs{\n\t\t\t\t\tEncryptedPassphrase: pulumi.String(\"encrypted_passphrase\"),\n\t\t\t\t\tKeyPath:             pulumi.String(\"key_path\"),\n\t\t\t\t\tUserName:            pulumi.String(\"user_name\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewSecretSshkey(ctx, \"sshPassword\", \u0026platform.SecretSshkeyArgs{\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tPort:        pulumi.Int(22),\n\t\t\tSsh: \u0026platform.SecretSshkeySshArgs{\n\t\t\t\tCredentialType: pulumi.String(\"Password\"),\n\t\t\t\tSshPasswordCredential: \u0026platform.SecretSshkeySshSshPasswordCredentialArgs{\n\t\t\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\t\t\tUserName: pulumi.String(\"user_name\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.SecretSshkey;\nimport com.pulumi.harness.platform.SecretSshkeyArgs;\nimport com.pulumi.harness.platform.inputs.SecretSshkeyKerberosArgs;\nimport com.pulumi.harness.platform.inputs.SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs;\nimport com.pulumi.harness.platform.inputs.SecretSshkeyKerberosTgtPasswordSpecArgs;\nimport com.pulumi.harness.platform.inputs.SecretSshkeySshArgs;\nimport com.pulumi.harness.platform.inputs.SecretSshkeySshSshkeyReferenceCredentialArgs;\nimport com.pulumi.harness.platform.inputs.SecretSshkeySshSshkeyPathCredentialArgs;\nimport com.pulumi.harness.platform.inputs.SecretSshkeySshSshPasswordCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var keyTabFilePath = new SecretSshkey(\"keyTabFilePath\", SecretSshkeyArgs.builder()        \n            .description(\"test\")\n            .identifier(\"identifier\")\n            .kerberos(SecretSshkeyKerberosArgs.builder()\n                .principal(\"principal\")\n                .realm(\"realm\")\n                .tgtGenerationMethod(\"KeyTabFilePath\")\n                .tgtKeyTabFilePathSpec(SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs.builder()\n                    .keyPath(\"key_path\")\n                    .build())\n                .build())\n            .port(22)\n            .tags(\"foo:bar\")\n            .build());\n\n        var _tgtPassword = new SecretSshkey(\" tgtPassword\", SecretSshkeyArgs.builder()        \n            .description(\"test\")\n            .identifier(\"identifier\")\n            .kerberos(SecretSshkeyKerberosArgs.builder()\n                .principal(\"principal\")\n                .realm(\"realm\")\n                .tgtGenerationMethod(\"Password\")\n                .tgtPasswordSpec(SecretSshkeyKerberosTgtPasswordSpecArgs.builder()\n                    .password(\"password\")\n                    .build())\n                .build())\n            .port(22)\n            .tags(\"foo:bar\")\n            .build());\n\n        var sshkeyReference = new SecretSshkey(\"sshkeyReference\", SecretSshkeyArgs.builder()        \n            .description(\"test\")\n            .identifier(\"identifier\")\n            .port(22)\n            .ssh(SecretSshkeySshArgs.builder()\n                .credentialType(\"KeyReference\")\n                .sshkeyReferenceCredential(SecretSshkeySshSshkeyReferenceCredentialArgs.builder()\n                    .encryptedPassphrase(\"encrypted_passphrase\")\n                    .key(\"key\")\n                    .userName(\"user_name\")\n                    .build())\n                .build())\n            .tags(\"foo:bar\")\n            .build());\n\n        var _sshkeyPath = new SecretSshkey(\" sshkeyPath\", SecretSshkeyArgs.builder()        \n            .description(\"test\")\n            .identifier(\"identifier\")\n            .port(22)\n            .ssh(SecretSshkeySshArgs.builder()\n                .credentialType(\"KeyPath\")\n                .sshkeyPathCredential(SecretSshkeySshSshkeyPathCredentialArgs.builder()\n                    .encryptedPassphrase(\"encrypted_passphrase\")\n                    .keyPath(\"key_path\")\n                    .userName(\"user_name\")\n                    .build())\n                .build())\n            .tags(\"foo:bar\")\n            .build());\n\n        var sshPassword = new SecretSshkey(\"sshPassword\", SecretSshkeyArgs.builder()        \n            .description(\"test\")\n            .identifier(\"identifier\")\n            .port(22)\n            .ssh(SecretSshkeySshArgs.builder()\n                .credentialType(\"Password\")\n                .sshPasswordCredential(SecretSshkeySshSshPasswordCredentialArgs.builder()\n                    .password(\"password\")\n                    .userName(\"user_name\")\n                    .build())\n                .build())\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  keyTabFilePath:\n    type: harness:platform:SecretSshkey\n    properties:\n      description: test\n      identifier: identifier\n      kerberos:\n        principal: principal\n        realm: realm\n        tgtGenerationMethod: KeyTabFilePath\n        tgtKeyTabFilePathSpec:\n          keyPath: key_path\n      port: 22\n      tags:\n        - foo:bar\n  ' tgtPassword':\n    type: harness:platform:SecretSshkey\n    properties:\n      description: test\n      identifier: identifier\n      kerberos:\n        principal: principal\n        realm: realm\n        tgtGenerationMethod: Password\n        tgtPasswordSpec:\n          password: password\n      port: 22\n      tags:\n        - foo:bar\n  sshkeyReference:\n    type: harness:platform:SecretSshkey\n    properties:\n      description: test\n      identifier: identifier\n      port: 22\n      ssh:\n        credentialType: KeyReference\n        sshkeyReferenceCredential:\n          encryptedPassphrase: encrypted_passphrase\n          key: key\n          userName: user_name\n      tags:\n        - foo:bar\n  ' sshkeyPath':\n    type: harness:platform:SecretSshkey\n    properties:\n      description: test\n      identifier: identifier\n      port: 22\n      ssh:\n        credentialType: KeyPath\n        sshkeyPathCredential:\n          encryptedPassphrase: encrypted_passphrase\n          keyPath: key_path\n          userName: user_name\n      tags:\n        - foo:bar\n  sshPassword:\n    type: harness:platform:SecretSshkey\n    properties:\n      description: test\n      identifier: identifier\n      port: 22\n      ssh:\n        credentialType: Password\n        sshPasswordCredential:\n          password: password\n          userName: user_name\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using secret sshkey id\n\n```sh\n $ pulumi import harness:platform/secretSshkey:SecretSshkey example \u003csecret_sshkey_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "kerberos": {
                    "$ref": "#/types/harness:platform/SecretSshkeyKerberos:SecretSshkeyKerberos",
                    "description": "Kerberos authentication scheme\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "SSH port\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/SecretSshkeySsh:SecretSshkeySsh",
                    "description": "Kerberos authentication scheme\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "required": [
                "identifier",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "kerberos": {
                    "$ref": "#/types/harness:platform/SecretSshkeyKerberos:SecretSshkeyKerberos",
                    "description": "Kerberos authentication scheme\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "SSH port\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/SecretSshkeySsh:SecretSshkeySsh",
                    "description": "Kerberos authentication scheme\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSshkey resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "kerberos": {
                        "$ref": "#/types/harness:platform/SecretSshkeyKerberos:SecretSshkeyKerberos",
                        "description": "Kerberos authentication scheme\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "SSH port\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "ssh": {
                        "$ref": "#/types/harness:platform/SecretSshkeySsh:SecretSshkeySsh",
                        "description": "Kerberos authentication scheme\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/secretText:SecretText": {
            "description": "Resource for creating secret of type secret text\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.SecretText(\"test\", {\n    identifier: \"identifier\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    secretManagerIdentifier: \"harnessSecretManager\",\n    valueType: \"Inline\",\n    value: \"secret\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.SecretText(\"test\",\n    identifier=\"identifier\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    secret_manager_identifier=\"harnessSecretManager\",\n    value_type=\"Inline\",\n    value=\"secret\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.SecretText(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        SecretManagerIdentifier = \"harnessSecretManager\",\n        ValueType = \"Inline\",\n        Value = \"secret\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewSecretText(ctx, \"test\", \u0026platform.SecretTextArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tSecretManagerIdentifier: pulumi.String(\"harnessSecretManager\"),\n\t\t\tValueType:               pulumi.String(\"Inline\"),\n\t\t\tValue:                   pulumi.String(\"secret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.SecretText;\nimport com.pulumi.harness.platform.SecretTextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new SecretText(\"test\", SecretTextArgs.builder()        \n            .identifier(\"identifier\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .secretManagerIdentifier(\"harnessSecretManager\")\n            .valueType(\"Inline\")\n            .value(\"secret\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:SecretText\n    properties:\n      identifier: identifier\n      description: test\n      tags:\n        - foo:bar\n      secretManagerIdentifier: harnessSecretManager\n      valueType: Inline\n      value: secret\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using secret text id\n\n```sh\n $ pulumi import harness:platform/secretText:SecretText example \u003csecret_text_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "secretManagerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the Secret Manager used to manage the secret.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Secret\n"
                },
                "valueType": {
                    "type": "string",
                    "description": "This has details to specify if the secret value is inline or referenced.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "secretManagerIdentifier",
                "valueType"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "secretManagerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the Secret Manager used to manage the secret.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Secret\n"
                },
                "valueType": {
                    "type": "string",
                    "description": "This has details to specify if the secret value is inline or referenced.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "secretManagerIdentifier",
                "valueType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretText resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "secretManagerIdentifier": {
                        "type": "string",
                        "description": "Identifier of the Secret Manager used to manage the secret.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the Secret\n"
                    },
                    "valueType": {
                        "type": "string",
                        "description": "This has details to specify if the secret value is inline or referenced.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/service:Service": {
            "description": "Resource for creating a Harness project.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "orgId",
                "projectId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "orgId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/serviceAccount:ServiceAccount": {
            "description": "Resource for creating service account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.ServiceAccount(\"example\", {\n    accountId: \"account_id\",\n    description: \"test\",\n    email: \"email@service.harness.io\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.ServiceAccount(\"example\",\n    account_id=\"account_id\",\n    description=\"test\",\n    email=\"email@service.harness.io\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.ServiceAccount(\"example\", new()\n    {\n        AccountId = \"account_id\",\n        Description = \"test\",\n        Email = \"email@service.harness.io\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewServiceAccount(ctx, \"example\", \u0026platform.ServiceAccountArgs{\n\t\t\tAccountId:   pulumi.String(\"account_id\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tEmail:       pulumi.String(\"email@service.harness.io\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ServiceAccount;\nimport com.pulumi.harness.platform.ServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ServiceAccount(\"example\", ServiceAccountArgs.builder()        \n            .accountId(\"account_id\")\n            .description(\"test\")\n            .email(\"email@service.harness.io\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:ServiceAccount\n    properties:\n      accountId: account_id\n      description: test\n      email: email@service.harness.io\n      identifier: identifier\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using secret sshkey id\n\n```sh\n $ pulumi import harness:platform/serviceAccount:ServiceAccount example \u003cservice_account_id\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier for the Entity.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email of the Service Account.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "required": [
                "identifier",
                "name"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier for the Entity.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email of the Service Account.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccount resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier for the Entity.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email of the Service Account.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/splunkConnector:SplunkConnector": {
            "description": "Resource for creating a Splunk connector.\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Splunk account id.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the Splunk password.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the Splunk server.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username used for connecting to Splunk.\n"
                }
            },
            "required": [
                "accountId",
                "identifier",
                "name",
                "passwordRef",
                "url",
                "username"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Splunk account id.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the Splunk password.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the Splunk server.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username used for connecting to Splunk.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "identifier",
                "passwordRef",
                "url",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SplunkConnector resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Splunk account id.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "passwordRef": {
                        "type": "string",
                        "description": "The reference to the Harness secret containing the Splunk password.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the Splunk server.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username used for connecting to Splunk.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/sumologicConnector:SumologicConnector": {
            "description": "Resource for creating a Sumologic connector.\n",
            "properties": {
                "accessIdRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the access id.\n"
                },
                "accessKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the access key.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the SumoLogic server.\n"
                }
            },
            "required": [
                "accessIdRef",
                "accessKeyRef",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "accessIdRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the access id.\n"
                },
                "accessKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the access key.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect using only the delegates which have these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url of the SumoLogic server.\n"
                }
            },
            "requiredInputs": [
                "accessIdRef",
                "accessKeyRef",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SumologicConnector resources.\n",
                "properties": {
                    "accessIdRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the access id.\n"
                    },
                    "accessKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the access key.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the SumoLogic server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/triggers:Triggers": {
            "description": "Resource for craeting triggers in Harness.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.Triggers(\"example\", {\n    identifier: \"identifier\",\n    orgId: \"orgIdentifer\",\n    projectId: \"projectIdentifier\",\n    targetId: \"pipelineIdentifier\",\n    yaml: `  ---\n  trigger:\n    name: \"name\"\n    identifier: \"identifier\"\n    enabled: true\n    description: \"\"\n    tags: {}\n    projectIdentifier: \"projectIdentifier\"\n    orgIdentifier: \"orgIdentifer\"\n    pipelineIdentifier: \"pipelineIdentifier\"\n    source:\n      type: \"Webhook\"\n      spec:\n        type: \"Github\"\n        spec:\n          type: \"Push\"\n          spec:\n            connectorRef: \"account.TestAccResourceConnectorGithub_Ssh_IZBeG\"\n            autoAbortPreviousExecutions: false\n            payloadConditions:\n            - key: \"changedFiles\"\n              operator: \"Equals\"\n              value: \"value\"\n            - key: \"targetBranch\"\n              operator: \"Equals\"\n              value: \"value\"\n            headerConditions: []\n            repoName: \"repoName\"\n            actions: []\n    inputYaml: \"pipeline: {}\\\\n\"\n`,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.Triggers(\"example\",\n    identifier=\"identifier\",\n    org_id=\"orgIdentifer\",\n    project_id=\"projectIdentifier\",\n    target_id=\"pipelineIdentifier\",\n    yaml=\"\"\"  ---\n  trigger:\n    name: \"name\"\n    identifier: \"identifier\"\n    enabled: true\n    description: \"\"\n    tags: {}\n    projectIdentifier: \"projectIdentifier\"\n    orgIdentifier: \"orgIdentifer\"\n    pipelineIdentifier: \"pipelineIdentifier\"\n    source:\n      type: \"Webhook\"\n      spec:\n        type: \"Github\"\n        spec:\n          type: \"Push\"\n          spec:\n            connectorRef: \"account.TestAccResourceConnectorGithub_Ssh_IZBeG\"\n            autoAbortPreviousExecutions: false\n            payloadConditions:\n            - key: \"changedFiles\"\n              operator: \"Equals\"\n              value: \"value\"\n            - key: \"targetBranch\"\n              operator: \"Equals\"\n              value: \"value\"\n            headerConditions: []\n            repoName: \"repoName\"\n            actions: []\n    inputYaml: \"pipeline: {}\\n\"\n\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.Triggers(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"orgIdentifer\",\n        ProjectId = \"projectIdentifier\",\n        TargetId = \"pipelineIdentifier\",\n        Yaml = @\"  ---\n  trigger:\n    name: \"\"name\"\"\n    identifier: \"\"identifier\"\"\n    enabled: true\n    description: \"\"\"\"\n    tags: {}\n    projectIdentifier: \"\"projectIdentifier\"\"\n    orgIdentifier: \"\"orgIdentifer\"\"\n    pipelineIdentifier: \"\"pipelineIdentifier\"\"\n    source:\n      type: \"\"Webhook\"\"\n      spec:\n        type: \"\"Github\"\"\n        spec:\n          type: \"\"Push\"\"\n          spec:\n            connectorRef: \"\"account.TestAccResourceConnectorGithub_Ssh_IZBeG\"\"\n            autoAbortPreviousExecutions: false\n            payloadConditions:\n            - key: \"\"changedFiles\"\"\n              operator: \"\"Equals\"\"\n              value: \"\"value\"\"\n            - key: \"\"targetBranch\"\"\n              operator: \"\"Equals\"\"\n              value: \"\"value\"\"\n            headerConditions: []\n            repoName: \"\"repoName\"\"\n            actions: []\n    inputYaml: \"\"pipeline: {}\\n\"\"\n\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewTriggers(ctx, \"example\", \u0026platform.TriggersArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tOrgId:      pulumi.String(\"orgIdentifer\"),\n\t\t\tProjectId:  pulumi.String(\"projectIdentifier\"),\n\t\t\tTargetId:   pulumi.String(\"pipelineIdentifier\"),\n\t\t\tYaml: pulumi.String(fmt.Sprintf(`  ---\n  trigger:\n    name: \"name\"\n    identifier: \"identifier\"\n    enabled: true\n    description: \"\"\n    tags: {}\n    projectIdentifier: \"projectIdentifier\"\n    orgIdentifier: \"orgIdentifer\"\n    pipelineIdentifier: \"pipelineIdentifier\"\n    source:\n      type: \"Webhook\"\n      spec:\n        type: \"Github\"\n        spec:\n          type: \"Push\"\n          spec:\n            connectorRef: \"account.TestAccResourceConnectorGithub_Ssh_IZBeG\"\n            autoAbortPreviousExecutions: false\n            payloadConditions:\n            - key: \"changedFiles\"\n              operator: \"Equals\"\n              value: \"value\"\n            - key: \"targetBranch\"\n              operator: \"Equals\"\n              value: \"value\"\n            headerConditions: []\n            repoName: \"repoName\"\n            actions: []\n    inputYaml: \"pipeline: {}\\n\"\n\n`)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Triggers;\nimport com.pulumi.harness.platform.TriggersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Triggers(\"example\", TriggersArgs.builder()        \n            .identifier(\"identifier\")\n            .orgId(\"orgIdentifer\")\n            .projectId(\"projectIdentifier\")\n            .targetId(\"pipelineIdentifier\")\n            .yaml(\"\"\"\n  ---\n  trigger:\n    name: \"name\"\n    identifier: \"identifier\"\n    enabled: true\n    description: \"\"\n    tags: {}\n    projectIdentifier: \"projectIdentifier\"\n    orgIdentifier: \"orgIdentifer\"\n    pipelineIdentifier: \"pipelineIdentifier\"\n    source:\n      type: \"Webhook\"\n      spec:\n        type: \"Github\"\n        spec:\n          type: \"Push\"\n          spec:\n            connectorRef: \"account.TestAccResourceConnectorGithub_Ssh_IZBeG\"\n            autoAbortPreviousExecutions: false\n            payloadConditions:\n            - key: \"changedFiles\"\n              operator: \"Equals\"\n              value: \"value\"\n            - key: \"targetBranch\"\n              operator: \"Equals\"\n              value: \"value\"\n            headerConditions: []\n            repoName: \"repoName\"\n            actions: []\n    inputYaml: \"pipeline: {}\\n\"\n\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:Triggers\n    properties:\n      identifier: identifier\n      orgId: orgIdentifer\n      projectId: projectIdentifier\n      targetId: pipelineIdentifier\n      yaml: |2+\n          ---\n          trigger:\n            name: \"name\"\n            identifier: \"identifier\"\n            enabled: true\n            description: \"\"\n            tags: {}\n            projectIdentifier: \"projectIdentifier\"\n            orgIdentifier: \"orgIdentifer\"\n            pipelineIdentifier: \"pipelineIdentifier\"\n            source:\n              type: \"Webhook\"\n              spec:\n                type: \"Github\"\n                spec:\n                  type: \"Push\"\n                  spec:\n                    connectorRef: \"account.TestAccResourceConnectorGithub_Ssh_IZBeG\"\n                    autoAbortPreviousExecutions: false\n                    payloadConditions:\n                    - key: \"changedFiles\"\n                      operator: \"Equals\"\n                      value: \"value\"\n                    - key: \"targetBranch\"\n                      operator: \"Equals\"\n                      value: \"value\"\n                    headerConditions: []\n                    repoName: \"repoName\"\n                    actions: []\n            inputYaml: \"pipeline: {}\\n\"\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using trigger id\n\n```sh\n $ pulumi import harness:platform/triggers:Triggers example \u003ctriggers_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "ifMatch": {
                    "type": "string",
                    "description": "if-Match\n"
                },
                "ignoreError": {
                    "type": "boolean",
                    "description": "ignore error default false\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "targetId": {
                    "type": "string",
                    "description": "Identifier of the target pipeline\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "trigger yaml\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "orgId",
                "projectId",
                "targetId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "ifMatch": {
                    "type": "string",
                    "description": "if-Match\n"
                },
                "ignoreError": {
                    "type": "boolean",
                    "description": "ignore error default false\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "targetId": {
                    "type": "string",
                    "description": "Identifier of the target pipeline\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "trigger yaml\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "orgId",
                "projectId",
                "targetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Triggers resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "ifMatch": {
                        "type": "string",
                        "description": "if-Match\n"
                    },
                    "ignoreError": {
                        "type": "boolean",
                        "description": "ignore error default false\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "targetId": {
                        "type": "string",
                        "description": "Identifier of the target pipeline\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "trigger yaml\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/usergroup:Usergroup": {
            "description": "Resource for creating a Harness User Group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.Usergroup(\"example\", {\n    externallyManaged: false,\n    identifier: \"identifier\",\n    linkedSsoDisplayName: \"linked_sso_display_name\",\n    linkedSsoId: \"linked_sso_id\",\n    linkedSsoType: \"SAML\",\n    notificationConfigs: [\n        {\n            slackWebhookUrl: \"https://google.com\",\n            type: \"SLACK\",\n        },\n        {\n            groupEmail: \"email@email.com\",\n            type: \"EMAIL\",\n        },\n        {\n            microsoftTeamsWebhookUrl: \"https://google.com\",\n            type: \"MSTEAMS\",\n        },\n        {\n            pagerDutyKey: \"pagerDutyKey\",\n            type: \"PAGERDUTY\",\n        },\n    ],\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    ssoGroupId: \"sso_group_id\",\n    ssoGroupName: \"sso_group_name\",\n    ssoLinked: true,\n    users: [\"user_id\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.Usergroup(\"example\",\n    externally_managed=False,\n    identifier=\"identifier\",\n    linked_sso_display_name=\"linked_sso_display_name\",\n    linked_sso_id=\"linked_sso_id\",\n    linked_sso_type=\"SAML\",\n    notification_configs=[\n        harness.platform.UsergroupNotificationConfigArgs(\n            slack_webhook_url=\"https://google.com\",\n            type=\"SLACK\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            group_email=\"email@email.com\",\n            type=\"EMAIL\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            microsoft_teams_webhook_url=\"https://google.com\",\n            type=\"MSTEAMS\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            pager_duty_key=\"pagerDutyKey\",\n            type=\"PAGERDUTY\",\n        ),\n    ],\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    sso_group_id=\"sso_group_id\",\n    sso_group_name=\"sso_group_name\",\n    sso_linked=True,\n    users=[\"user_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.Usergroup(\"example\", new()\n    {\n        ExternallyManaged = false,\n        Identifier = \"identifier\",\n        LinkedSsoDisplayName = \"linked_sso_display_name\",\n        LinkedSsoId = \"linked_sso_id\",\n        LinkedSsoType = \"SAML\",\n        NotificationConfigs = new[]\n        {\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                SlackWebhookUrl = \"https://google.com\",\n                Type = \"SLACK\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                GroupEmail = \"email@email.com\",\n                Type = \"EMAIL\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                MicrosoftTeamsWebhookUrl = \"https://google.com\",\n                Type = \"MSTEAMS\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                PagerDutyKey = \"pagerDutyKey\",\n                Type = \"PAGERDUTY\",\n            },\n        },\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        SsoGroupId = \"sso_group_id\",\n        SsoGroupName = \"sso_group_name\",\n        SsoLinked = true,\n        Users = new[]\n        {\n            \"user_id\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewUsergroup(ctx, \"example\", \u0026platform.UsergroupArgs{\n\t\t\tExternallyManaged:    pulumi.Bool(false),\n\t\t\tIdentifier:           pulumi.String(\"identifier\"),\n\t\t\tLinkedSsoDisplayName: pulumi.String(\"linked_sso_display_name\"),\n\t\t\tLinkedSsoId:          pulumi.String(\"linked_sso_id\"),\n\t\t\tLinkedSsoType:        pulumi.String(\"SAML\"),\n\t\t\tNotificationConfigs: platform.UsergroupNotificationConfigArray{\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tSlackWebhookUrl: pulumi.String(\"https://google.com\"),\n\t\t\t\t\tType:            pulumi.String(\"SLACK\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tGroupEmail: pulumi.String(\"email@email.com\"),\n\t\t\t\t\tType:       pulumi.String(\"EMAIL\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tMicrosoftTeamsWebhookUrl: pulumi.String(\"https://google.com\"),\n\t\t\t\t\tType:                     pulumi.String(\"MSTEAMS\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tPagerDutyKey: pulumi.String(\"pagerDutyKey\"),\n\t\t\t\t\tType:         pulumi.String(\"PAGERDUTY\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tOrgId:        pulumi.String(\"org_id\"),\n\t\t\tProjectId:    pulumi.String(\"project_id\"),\n\t\t\tSsoGroupId:   pulumi.String(\"sso_group_id\"),\n\t\t\tSsoGroupName: pulumi.String(\"sso_group_name\"),\n\t\t\tSsoLinked:    pulumi.Bool(true),\n\t\t\tUsers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user_id\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Usergroup;\nimport com.pulumi.harness.platform.UsergroupArgs;\nimport com.pulumi.harness.platform.inputs.UsergroupNotificationConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Usergroup(\"example\", UsergroupArgs.builder()        \n            .externallyManaged(false)\n            .identifier(\"identifier\")\n            .linkedSsoDisplayName(\"linked_sso_display_name\")\n            .linkedSsoId(\"linked_sso_id\")\n            .linkedSsoType(\"SAML\")\n            .notificationConfigs(            \n                UsergroupNotificationConfigArgs.builder()\n                    .slackWebhookUrl(\"https://google.com\")\n                    .type(\"SLACK\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .groupEmail(\"email@email.com\")\n                    .type(\"EMAIL\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .microsoftTeamsWebhookUrl(\"https://google.com\")\n                    .type(\"MSTEAMS\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .pagerDutyKey(\"pagerDutyKey\")\n                    .type(\"PAGERDUTY\")\n                    .build())\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .ssoGroupId(\"sso_group_id\")\n            .ssoGroupName(\"sso_group_name\")\n            .ssoLinked(true)\n            .users(\"user_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:Usergroup\n    properties:\n      externallyManaged: false\n      identifier: identifier\n      linkedSsoDisplayName: linked_sso_display_name\n      linkedSsoId: linked_sso_id\n      linkedSsoType: SAML\n      notificationConfigs:\n        - slackWebhookUrl: https://google.com\n          type: SLACK\n        - groupEmail: email@email.com\n          type: EMAIL\n        - microsoftTeamsWebhookUrl: https://google.com\n          type: MSTEAMS\n        - pagerDutyKey: pagerDutyKey\n          type: PAGERDUTY\n      orgId: org_id\n      projectId: project_id\n      ssoGroupId: sso_group_id\n      ssoGroupName: sso_group_name\n      ssoLinked: true\n      users:\n        - user_id\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using user group id\n\n```sh\n $ pulumi import harness:platform/usergroup:Usergroup example \u003cusergroup_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "externallyManaged": {
                    "type": "boolean",
                    "description": "Whether the user group is externally managed.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "linkedSsoDisplayName": {
                    "type": "string",
                    "description": "Name of the linked SSO.\n"
                },
                "linkedSsoId": {
                    "type": "string",
                    "description": "The SSO account ID that the user group is linked to.\n"
                },
                "linkedSsoType": {
                    "type": "string",
                    "description": "Type of linked SSO\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "notificationConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/UsergroupNotificationConfig:UsergroupNotificationConfig"
                    },
                    "description": "List of notification settings.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "ssoGroupId": {
                    "type": "string",
                    "description": "Identifier of the userGroup in SSO.\n"
                },
                "ssoGroupName": {
                    "type": "string",
                    "description": "Name of the SSO userGroup.\n"
                },
                "ssoLinked": {
                    "type": "boolean",
                    "description": "Whether sso is linked or not\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of users in the UserGroup.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "ssoLinked"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "externallyManaged": {
                    "type": "boolean",
                    "description": "Whether the user group is externally managed.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "linkedSsoDisplayName": {
                    "type": "string",
                    "description": "Name of the linked SSO.\n"
                },
                "linkedSsoId": {
                    "type": "string",
                    "description": "The SSO account ID that the user group is linked to.\n"
                },
                "linkedSsoType": {
                    "type": "string",
                    "description": "Type of linked SSO\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "notificationConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/UsergroupNotificationConfig:UsergroupNotificationConfig"
                    },
                    "description": "List of notification settings.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "ssoGroupId": {
                    "type": "string",
                    "description": "Identifier of the userGroup in SSO.\n"
                },
                "ssoGroupName": {
                    "type": "string",
                    "description": "Name of the SSO userGroup.\n"
                },
                "ssoLinked": {
                    "type": "boolean",
                    "description": "Whether sso is linked or not\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of users in the UserGroup.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Usergroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "externallyManaged": {
                        "type": "boolean",
                        "description": "Whether the user group is externally managed.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "linkedSsoDisplayName": {
                        "type": "string",
                        "description": "Name of the linked SSO.\n"
                    },
                    "linkedSsoId": {
                        "type": "string",
                        "description": "The SSO account ID that the user group is linked to.\n"
                    },
                    "linkedSsoType": {
                        "type": "string",
                        "description": "Type of linked SSO\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "notificationConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/UsergroupNotificationConfig:UsergroupNotificationConfig"
                        },
                        "description": "List of notification settings.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "ssoGroupId": {
                        "type": "string",
                        "description": "Identifier of the userGroup in SSO.\n"
                    },
                    "ssoGroupName": {
                        "type": "string",
                        "description": "Name of the SSO userGroup.\n"
                    },
                    "ssoLinked": {
                        "type": "boolean",
                        "description": "Whether sso is linked or not\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of users in the UserGroup.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/ami:Ami": {
            "description": "Resource for creating an AMI service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleAmi = new harness.service.Ami(\"exampleAmi\", {\n    appId: exampleApplication.id,\n    description: \"Service for deploying AMI's\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_ami = harness.service.Ami(\"exampleAmi\",\n    app_id=example_application.id,\n    description=\"Service for deploying AMI's\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleAmi = new Harness.Service.Ami(\"exampleAmi\", new()\n    {\n        AppId = exampleApplication.Id,\n        Description = \"Service for deploying AMI's\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewAmi(ctx, \"exampleAmi\", \u0026service.AmiArgs{\n\t\t\tAppId:       exampleApplication.ID(),\n\t\t\tDescription: pulumi.String(\"Service for deploying AMI's\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Ami;\nimport com.pulumi.harness.service.AmiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleAmi = new Ami(\"exampleAmi\", AmiArgs.builder()        \n            .appId(exampleApplication.id())\n            .description(\"Service for deploying AMI's\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleAmi:\n    type: harness:service:Ami\n    properties:\n      appId: ${exampleApplication.id}\n      description: Service for deploying AMI's\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/ami:Ami example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/AmiVariable:AmiVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/AmiVariable:AmiVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ami resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/AmiVariable:AmiVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/codedeploy:Codedeploy": {
            "description": "Resource for creating an AWS CodeDeploy service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleCodedeploy = new harness.service.Codedeploy(\"exampleCodedeploy\", {\n    appId: exampleApplication.id,\n    description: \"Service for AWS codedeploy applications.\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_codedeploy = harness.service.Codedeploy(\"exampleCodedeploy\",\n    app_id=example_application.id,\n    description=\"Service for AWS codedeploy applications.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleCodedeploy = new Harness.Service.Codedeploy(\"exampleCodedeploy\", new()\n    {\n        AppId = exampleApplication.Id,\n        Description = \"Service for AWS codedeploy applications.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewCodedeploy(ctx, \"exampleCodedeploy\", \u0026service.CodedeployArgs{\n\t\t\tAppId:       exampleApplication.ID(),\n\t\t\tDescription: pulumi.String(\"Service for AWS codedeploy applications.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Codedeploy;\nimport com.pulumi.harness.service.CodedeployArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleCodedeploy = new Codedeploy(\"exampleCodedeploy\", CodedeployArgs.builder()        \n            .appId(exampleApplication.id())\n            .description(\"Service for AWS codedeploy applications.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleCodedeploy:\n    type: harness:service:Codedeploy\n    properties:\n      appId: ${exampleApplication.id}\n      description: Service for AWS codedeploy applications.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/codedeploy:Codedeploy example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/CodedeployVariable:CodedeployVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/CodedeployVariable:CodedeployVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Codedeploy resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/CodedeployVariable:CodedeployVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/ecs:Ecs": {
            "description": "Resource for creating an AWS ECS service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleEcs = new harness.service.Ecs(\"exampleEcs\", {\n    appId: exampleApplication.id,\n    description: \"Service for deploying AWS ECS tasks.\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_ecs = harness.service.Ecs(\"exampleEcs\",\n    app_id=example_application.id,\n    description=\"Service for deploying AWS ECS tasks.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleEcs = new Harness.Service.Ecs(\"exampleEcs\", new()\n    {\n        AppId = exampleApplication.Id,\n        Description = \"Service for deploying AWS ECS tasks.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewEcs(ctx, \"exampleEcs\", \u0026service.EcsArgs{\n\t\t\tAppId:       exampleApplication.ID(),\n\t\t\tDescription: pulumi.String(\"Service for deploying AWS ECS tasks.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Ecs;\nimport com.pulumi.harness.service.EcsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleEcs = new Ecs(\"exampleEcs\", EcsArgs.builder()        \n            .appId(exampleApplication.id())\n            .description(\"Service for deploying AWS ECS tasks.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleEcs:\n    type: harness:service:Ecs\n    properties:\n      appId: ${exampleApplication.id}\n      description: Service for deploying AWS ECS tasks.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/ecs:Ecs example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/EcsVariable:EcsVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/EcsVariable:EcsVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ecs resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/EcsVariable:EcsVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/helm:Helm": {
            "description": "Resource for creating a Kubernetes Helm service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleHelm = new harness.service.Helm(\"exampleHelm\", {\n    appId: exampleApplication.id,\n    description: \"Service for deploying native Helm application.s\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_helm = harness.service.Helm(\"exampleHelm\",\n    app_id=example_application.id,\n    description=\"Service for deploying native Helm application.s\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleHelm = new Harness.Service.Helm(\"exampleHelm\", new()\n    {\n        AppId = exampleApplication.Id,\n        Description = \"Service for deploying native Helm application.s\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewHelm(ctx, \"exampleHelm\", \u0026service.HelmArgs{\n\t\t\tAppId:       exampleApplication.ID(),\n\t\t\tDescription: pulumi.String(\"Service for deploying native Helm application.s\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Helm;\nimport com.pulumi.harness.service.HelmArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleHelm = new Helm(\"exampleHelm\", HelmArgs.builder()        \n            .appId(exampleApplication.id())\n            .description(\"Service for deploying native Helm application.s\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleHelm:\n    type: harness:service:Helm\n    properties:\n      appId: ${exampleApplication.id}\n      description: Service for deploying native Helm application.s\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/helm:Helm example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/HelmVariable:HelmVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/HelmVariable:HelmVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Helm resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/HelmVariable:HelmVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/kubernetes:Kubernetes": {
            "description": "Resource for creating a Kubernetes service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleKubernetes = new harness.service.Kubernetes(\"exampleKubernetes\", {\n    appId: exampleApplication.id,\n    helmVersion: \"V3\",\n    description: \"Service for deploying Kubernetes manifests\",\n    variables: [\n        {\n            name: \"test\",\n            value: \"test_value\",\n            type: \"TEXT\",\n        },\n        {\n            name: \"test2\",\n            value: \"test_value2\",\n            type: \"TEXT\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_kubernetes = harness.service.Kubernetes(\"exampleKubernetes\",\n    app_id=example_application.id,\n    helm_version=\"V3\",\n    description=\"Service for deploying Kubernetes manifests\",\n    variables=[\n        harness.service.KubernetesVariableArgs(\n            name=\"test\",\n            value=\"test_value\",\n            type=\"TEXT\",\n        ),\n        harness.service.KubernetesVariableArgs(\n            name=\"test2\",\n            value=\"test_value2\",\n            type=\"TEXT\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleKubernetes = new Harness.Service.Kubernetes(\"exampleKubernetes\", new()\n    {\n        AppId = exampleApplication.Id,\n        HelmVersion = \"V3\",\n        Description = \"Service for deploying Kubernetes manifests\",\n        Variables = new[]\n        {\n            new Harness.Service.Inputs.KubernetesVariableArgs\n            {\n                Name = \"test\",\n                Value = \"test_value\",\n                Type = \"TEXT\",\n            },\n            new Harness.Service.Inputs.KubernetesVariableArgs\n            {\n                Name = \"test2\",\n                Value = \"test_value2\",\n                Type = \"TEXT\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewKubernetes(ctx, \"exampleKubernetes\", \u0026service.KubernetesArgs{\n\t\t\tAppId:       exampleApplication.ID(),\n\t\t\tHelmVersion: pulumi.String(\"V3\"),\n\t\t\tDescription: pulumi.String(\"Service for deploying Kubernetes manifests\"),\n\t\t\tVariables: service.KubernetesVariableArray{\n\t\t\t\t\u0026service.KubernetesVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"test\"),\n\t\t\t\t\tValue: pulumi.String(\"test_value\"),\n\t\t\t\t\tType:  pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t\t\u0026service.KubernetesVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"test2\"),\n\t\t\t\t\tValue: pulumi.String(\"test_value2\"),\n\t\t\t\t\tType:  pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Kubernetes;\nimport com.pulumi.harness.service.KubernetesArgs;\nimport com.pulumi.harness.service.inputs.KubernetesVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleKubernetes = new Kubernetes(\"exampleKubernetes\", KubernetesArgs.builder()        \n            .appId(exampleApplication.id())\n            .helmVersion(\"V3\")\n            .description(\"Service for deploying Kubernetes manifests\")\n            .variables(            \n                KubernetesVariableArgs.builder()\n                    .name(\"test\")\n                    .value(\"test_value\")\n                    .type(\"TEXT\")\n                    .build(),\n                KubernetesVariableArgs.builder()\n                    .name(\"test2\")\n                    .value(\"test_value2\")\n                    .type(\"TEXT\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleKubernetes:\n    type: harness:service:Kubernetes\n    properties:\n      appId: ${exampleApplication.id}\n      helmVersion: V3\n      description: Service for deploying Kubernetes manifests\n      variables:\n        - name: test\n          value: test_value\n          type: TEXT\n        - name: test2\n          value: test_value2\n          type: TEXT\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/kubernetes:Kubernetes example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "helmVersion": {
                    "type": "string",
                    "description": "The version of Helm to use. Options are `V2` and `V3`. Defaults to 'V2'. Only used when `type` is `KUBERNETES` or `HELM`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/KubernetesVariable:KubernetesVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "helmVersion": {
                    "type": "string",
                    "description": "The version of Helm to use. Options are `V2` and `V3`. Defaults to 'V2'. Only used when `type` is `KUBERNETES` or `HELM`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/KubernetesVariable:KubernetesVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Kubernetes resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "helmVersion": {
                        "type": "string",
                        "description": "The version of Helm to use. Options are `V2` and `V3`. Defaults to 'V2'. Only used when `type` is `KUBERNETES` or `HELM`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/KubernetesVariable:KubernetesVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/lambda:Lambda": {
            "description": "Resource for creating an AWS Lambda service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleLambda = new harness.service.Lambda(\"exampleLambda\", {\n    appId: exampleApplication.id,\n    description: \"Service for deploying AWS Lambda functions.\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_lambda = harness.service.Lambda(\"exampleLambda\",\n    app_id=example_application.id,\n    description=\"Service for deploying AWS Lambda functions.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleLambda = new Harness.Service.Lambda(\"exampleLambda\", new()\n    {\n        AppId = exampleApplication.Id,\n        Description = \"Service for deploying AWS Lambda functions.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewLambda(ctx, \"exampleLambda\", \u0026service.LambdaArgs{\n\t\t\tAppId:       exampleApplication.ID(),\n\t\t\tDescription: pulumi.String(\"Service for deploying AWS Lambda functions.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Lambda;\nimport com.pulumi.harness.service.LambdaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleLambda = new Lambda(\"exampleLambda\", LambdaArgs.builder()        \n            .appId(exampleApplication.id())\n            .description(\"Service for deploying AWS Lambda functions.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleLambda:\n    type: harness:service:Lambda\n    properties:\n      appId: ${exampleApplication.id}\n      description: Service for deploying AWS Lambda functions.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/lambda:Lambda example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/LambdaVariable:LambdaVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/LambdaVariable:LambdaVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Lambda resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/LambdaVariable:LambdaVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/ssh:Ssh": {
            "description": "Resource for creating an SSH service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleSsh = new harness.service.Ssh(\"exampleSsh\", {\n    appId: exampleApplication.id,\n    artifactType: \"TAR\",\n    description: \"Service for deploying applications with SSH.\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_ssh = harness.service.Ssh(\"exampleSsh\",\n    app_id=example_application.id,\n    artifact_type=\"TAR\",\n    description=\"Service for deploying applications with SSH.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleSsh = new Harness.Service.Ssh(\"exampleSsh\", new()\n    {\n        AppId = exampleApplication.Id,\n        ArtifactType = \"TAR\",\n        Description = \"Service for deploying applications with SSH.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewSsh(ctx, \"exampleSsh\", \u0026service.SshArgs{\n\t\t\tAppId:        exampleApplication.ID(),\n\t\t\tArtifactType: pulumi.String(\"TAR\"),\n\t\t\tDescription:  pulumi.String(\"Service for deploying applications with SSH.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Ssh;\nimport com.pulumi.harness.service.SshArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleSsh = new Ssh(\"exampleSsh\", SshArgs.builder()        \n            .appId(exampleApplication.id())\n            .artifactType(\"TAR\")\n            .description(\"Service for deploying applications with SSH.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleSsh:\n    type: harness:service:Ssh\n    properties:\n      appId: ${exampleApplication.id}\n      artifactType: TAR\n      description: Service for deploying applications with SSH.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/ssh:Ssh example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "artifactType": {
                    "type": "string",
                    "description": "The type of artifact to deploy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/SshVariable:SshVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "artifactType",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "artifactType": {
                    "type": "string",
                    "description": "The type of artifact to deploy.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/SshVariable:SshVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId",
                "artifactType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ssh resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "artifactType": {
                        "type": "string",
                        "description": "The type of artifact to deploy.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/SshVariable:SshVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/tanzu:Tanzu": {
            "description": "Resource for creating a Tanzu (PCF) service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleTanzu = new harness.service.Tanzu(\"exampleTanzu\", {\n    appId: exampleApplication.id,\n    description: \"A service for deploying Tanzu applications.\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_tanzu = harness.service.Tanzu(\"exampleTanzu\",\n    app_id=example_application.id,\n    description=\"A service for deploying Tanzu applications.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleTanzu = new Harness.Service.Tanzu(\"exampleTanzu\", new()\n    {\n        AppId = exampleApplication.Id,\n        Description = \"A service for deploying Tanzu applications.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewTanzu(ctx, \"exampleTanzu\", \u0026service.TanzuArgs{\n\t\t\tAppId:       exampleApplication.ID(),\n\t\t\tDescription: pulumi.String(\"A service for deploying Tanzu applications.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Tanzu;\nimport com.pulumi.harness.service.TanzuArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleTanzu = new Tanzu(\"exampleTanzu\", TanzuArgs.builder()        \n            .appId(exampleApplication.id())\n            .description(\"A service for deploying Tanzu applications.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleTanzu:\n    type: harness:service:Tanzu\n    properties:\n      appId: ${exampleApplication.id}\n      description: A service for deploying Tanzu applications.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/tanzu:Tanzu example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/TanzuVariable:TanzuVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/TanzuVariable:TanzuVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tanzu resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/TanzuVariable:TanzuVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/winrm:Winrm": {
            "description": "Resource for creating an WinRM service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleWinrm = new harness.service.Winrm(\"exampleWinrm\", {\n    appId: exampleApplication.id,\n    artifactType: \"IIS_APP\",\n    description: \"Service for deploying IIS appliactions using winrm.\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_winrm = harness.service.Winrm(\"exampleWinrm\",\n    app_id=example_application.id,\n    artifact_type=\"IIS_APP\",\n    description=\"Service for deploying IIS appliactions using winrm.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleWinrm = new Harness.Service.Winrm(\"exampleWinrm\", new()\n    {\n        AppId = exampleApplication.Id,\n        ArtifactType = \"IIS_APP\",\n        Description = \"Service for deploying IIS appliactions using winrm.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewWinrm(ctx, \"exampleWinrm\", \u0026service.WinrmArgs{\n\t\t\tAppId:        exampleApplication.ID(),\n\t\t\tArtifactType: pulumi.String(\"IIS_APP\"),\n\t\t\tDescription:  pulumi.String(\"Service for deploying IIS appliactions using winrm.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Winrm;\nimport com.pulumi.harness.service.WinrmArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleWinrm = new Winrm(\"exampleWinrm\", WinrmArgs.builder()        \n            .appId(exampleApplication.id())\n            .artifactType(\"IIS_APP\")\n            .description(\"Service for deploying IIS appliactions using winrm.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleWinrm:\n    type: harness:service:Winrm\n    properties:\n      appId: ${exampleApplication.id}\n      artifactType: IIS_APP\n      description: Service for deploying IIS appliactions using winrm.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/winrm:Winrm example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "artifactType": {
                    "type": "string",
                    "description": "The type of artifact to deploy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/WinrmVariable:WinrmVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "artifactType",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "artifactType": {
                    "type": "string",
                    "description": "The type of artifact to deploy.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/WinrmVariable:WinrmVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId",
                "artifactType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Winrm resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "artifactType": {
                        "type": "string",
                        "description": "The type of artifact to deploy.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/WinrmVariable:WinrmVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "harness:cloudprovider/getDelegateIds:getDelegateIds": {
            "description": "Use this data source to get a list of delegate ID's matching the specified search criteria.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = pulumi.output(harness.DelegateDs({\n    name: \"harness-delegate\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDelegateIds.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the delegate to query for.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDelegateIds.\n",
                "properties": {
                    "delegateIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of delegate ID's matching the specified search criteria.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the delegate to query for.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT\n"
                    }
                },
                "type": "object",
                "required": [
                    "delegateIds",
                    "id"
                ]
            }
        },
        "harness:index/getApplication:getApplication": {
            "description": "Data source for retrieving a Harness application\n",
            "inputs": {
                "description": "A collection of arguments for invoking getApplication.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The application description\n"
                    },
                    "gitSyncConnectorId": {
                        "type": "string",
                        "description": "The id of the git sync connector\n"
                    },
                    "gitSyncEnabled": {
                        "type": "boolean",
                        "description": "True if git sync is enabled on this application\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the application\n"
                    },
                    "isManualTriggerAuthorized": {
                        "type": "boolean",
                        "description": "When this is set to true, all manual triggers will require API Key authorization\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the application\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getApplication.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The application description\n"
                    },
                    "gitSyncConnectorId": {
                        "type": "string",
                        "description": "The id of the git sync connector\n"
                    },
                    "gitSyncEnabled": {
                        "type": "boolean",
                        "description": "True if git sync is enabled on this application\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the application\n"
                    },
                    "isManualTriggerAuthorized": {
                        "type": "boolean",
                        "description": "When this is set to true, all manual triggers will require API Key authorization\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the application\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/getCurrentAccount:getCurrentAccount": {
            "description": "Data source for retrieving information about the current Harness account\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCurrentAccount.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the git connector.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCurrentAccount.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Id of the account.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The url of the Harness control plane.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of the git connector.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "endpoint"
                ]
            }
        },
        "harness:index/getDelegate:getDelegate": {
            "description": "Data source for retrieving a Harness delegate. If more than one delegate matches the query the first one will be returned.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = pulumi.output(harness.getDelegate({\n    name: \"harness-delegate\",\n    status: \"ENABLED\",\n    type: \"KUBERNETES\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.get_delegate(name=\"harness-delegate\",\n    status=\"ENABLED\",\n    type=\"KUBERNETES\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.GetDelegate.Invoke(new()\n    {\n        Name = \"harness-delegate\",\n        Status = \"ENABLED\",\n        Type = \"KUBERNETES\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.GetDelegate(ctx, \u0026GetDelegateArgs{\n\t\t\tName:   pulumi.StringRef(\"harness-delegate\"),\n\t\t\tStatus: pulumi.StringRef(\"ENABLED\"),\n\t\t\tType:   pulumi.StringRef(\"KUBERNETES\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetDelegateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = HarnessFunctions.getDelegate(GetDelegateArgs.builder()\n            .name(\"harness-delegate\")\n            .status(\"ENABLED\")\n            .type(\"KUBERNETES\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: harness:getDelegate\n      Arguments:\n        name: harness-delegate\n        status: ENABLED\n        type: KUBERNETES\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDelegate.\n",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the delegate.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the delegate\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the delegate to query for.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDelegate.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account id the delegate belongs to.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the delegate.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the delegate.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the delegate\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "The ip address of the delegate.\n"
                    },
                    "lastHeartbeat": {
                        "type": "string",
                        "description": "The last time the delegate was heard from.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the delegate to query for.\n"
                    },
                    "pollingModeEnabled": {
                        "type": "boolean",
                        "description": "Whether the delegate is in polling mode.\n"
                    },
                    "profileId": {
                        "type": "string",
                        "description": "The id of the profile assigned to the delegate.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the delegate.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "description",
                    "ip",
                    "lastHeartbeat",
                    "pollingModeEnabled",
                    "profileId",
                    "version"
                ]
            }
        },
        "harness:index/getEncryptedText:getEncryptedText": {
            "description": "Data source for retrieving a Harness application\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEncryptedText.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the encrypted secret\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the encrypted secret\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getEncryptedTextUsageScope:getEncryptedTextUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEncryptedText.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the encrypted secret\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the encrypted secret\n"
                    },
                    "secretManagerId": {
                        "type": "string",
                        "description": "The id of the associated secret manager\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getEncryptedTextUsageScope:getEncryptedTextUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object",
                "required": [
                    "secretManagerId"
                ]
            }
        },
        "harness:index/getEnvironment:getEnvironment": {
            "description": "Data source for retrieving a Harness service\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironment.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application.\n"
                    },
                    "environmentId": {
                        "type": "string",
                        "description": "The id of the environment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the environment.\n"
                    },
                    "variableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getEnvironmentVariableOverride:getEnvironmentVariableOverride"
                        },
                        "description": "Override for a service variable\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironment.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the environment.\n"
                    },
                    "environmentId": {
                        "type": "string",
                        "description": "The id of the environment.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the environment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the environment.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the environment. Valid values are `PROD` and `NON_PROD`\n"
                    },
                    "variableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getEnvironmentVariableOverride:getEnvironmentVariableOverride"
                        },
                        "description": "Override for a service variable\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId",
                    "description",
                    "id",
                    "type",
                    "variableOverrides"
                ]
            }
        },
        "harness:index/getGitConnector:getGitConnector": {
            "description": "Data source for retrieving a Harness application\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitConnector.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the git connector.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the git connector.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGitConnector.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "The branch of the git connector to use.\n"
                    },
                    "commitDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getGitConnectorCommitDetail:getGitConnectorCommitDetail"
                        },
                        "description": "Custom details to use when making commits using this git connector.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The time the git connector was created.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Delegate selectors to apply to this git connector.\n"
                    },
                    "generateWebhookUrl": {
                        "type": "boolean",
                        "description": "Boolean indicating whether or not to generate a webhook url.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of the git connector.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the git connector.\n"
                    },
                    "passwordSecretId": {
                        "type": "string",
                        "description": "The id of the secret for connecting to the git repository.\n"
                    },
                    "sshSettingId": {
                        "type": "string",
                        "description": "The id of the SSH secret to use.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The url of the git repository or account/organization.\n"
                    },
                    "urlType": {
                        "type": "string",
                        "description": "The type of git url being used. Options are `ACCOUNT`, and `REPO`.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The name of the user used to connect to the git repository.\n"
                    },
                    "webhookUrl": {
                        "type": "string",
                        "description": "The generated webhook url.\n"
                    }
                },
                "type": "object",
                "required": [
                    "branch",
                    "commitDetails",
                    "createdAt",
                    "delegateSelectors",
                    "generateWebhookUrl",
                    "passwordSecretId",
                    "sshSettingId",
                    "url",
                    "urlType",
                    "username",
                    "webhookUrl"
                ]
            }
        },
        "harness:index/getSecretManager:getSecretManager": {
            "description": "Data source for retrieving a Harness secret manager\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecretManager.\n",
                "properties": {
                    "default": {
                        "type": "boolean",
                        "description": "True to lookup the id of the default secret manager\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the secret manager\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret manager\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getSecretManagerUsageScope:getSecretManagerUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecretManager.\n",
                "properties": {
                    "default": {
                        "type": "boolean",
                        "description": "True to lookup the id of the default secret manager\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the secret manager\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret manager\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getSecretManagerUsageScope:getSecretManagerUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/getService:getService": {
            "description": "Data source for retrieving a Harness service\n",
            "inputs": {
                "description": "A collection of arguments for invoking getService.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the application\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId",
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getService.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n"
                    },
                    "artifactType": {
                        "type": "string",
                        "description": "The type of artifact deployed by the service\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The application description\n"
                    },
                    "helmVersion": {
                        "type": "string",
                        "description": "The version of Helm being used by the service.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the application\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Tags for the service\n"
                    },
                    "templateUri": {
                        "type": "string",
                        "description": "The path of the template used for the custom deployment\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the deployment\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId",
                    "artifactType",
                    "description",
                    "helmVersion",
                    "id",
                    "name",
                    "tags",
                    "templateUri",
                    "type"
                ]
            }
        },
        "harness:index/getSshCredential:getSshCredential": {
            "description": "Data source for retrieving an SSH credential.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSshCredential.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the secret manager\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret manager\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getSshCredentialUsageScope:getSshCredentialUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSshCredential.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the secret manager\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret manager\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getSshCredentialUsageScope:getSshCredentialUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/getSsoProvider:getSsoProvider": {
            "description": "Data source for retrieving an SSO providers\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSsoProvider.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the SSO provider.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSO provider.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSsoProvider.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the SSO provider.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSO provider.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of SSO provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            }
        },
        "harness:index/getUser:getUser": {
            "description": "Data source for retrieving a Harness user\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the user\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the user\n"
                    },
                    "isEmailVerified": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the users email has been verified.\n"
                    },
                    "isImportedFromIdentityProvider": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the user was imported from an identity provider.\n"
                    },
                    "isPasswordExpired": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the users password has expired.\n"
                    },
                    "isTwoFactorAuthEnabled": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not two-factor authentication is enabled for the user.\n"
                    },
                    "isUserLocked": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the user is locked out.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "isEmailVerified",
                    "isImportedFromIdentityProvider",
                    "isPasswordExpired",
                    "isTwoFactorAuthEnabled",
                    "isUserLocked",
                    "name"
                ]
            }
        },
        "harness:index/getUserGroup:getUserGroup": {
            "description": "Data source for retrieving a Harness user group\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUserGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the user group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user group.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUserGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the user group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user group.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/getYamlConfig:getYamlConfig": {
            "description": "Data source for retrieving a yaml config.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getYamlConfig.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "Unique identifier of the application. This is not required for account level resources (i.e. cloud providers, connectors, etc.).\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path to the yaml file.\n"
                    }
                },
                "type": "object",
                "required": [
                    "path"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getYamlConfig.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "Unique identifier of the application. This is not required for account level resources (i.e. cloud providers, connectors, etc.).\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "Content of the yaml file.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the yaml resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the yaml resource.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path to the yaml file.\n"
                    }
                },
                "type": "object",
                "required": [
                    "content",
                    "id",
                    "name",
                    "path"
                ]
            }
        },
        "harness:platform/getAppDynamicsConnector:getAppDynamicsConnector": {
            "description": "Datasource for looking up an App Dynamics connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAppDynamicsConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAppDynamicsConnector.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "The App Dynamics account name.\n"
                    },
                    "apiTokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAppDynamicsConnectorApiToken:getAppDynamicsConnectorApiToken"
                        },
                        "description": "Authenticate to App Dynamics using api token.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the App Dynamics controller.\n"
                    },
                    "usernamePasswords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAppDynamicsConnectorUsernamePassword:getAppDynamicsConnectorUsernamePassword"
                        },
                        "description": "Authenticate to App Dynamics using username and password.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountName",
                    "apiTokens",
                    "delegateSelectors",
                    "description",
                    "tags",
                    "url",
                    "usernamePasswords",
                    "id"
                ]
            }
        },
        "harness:platform/getArtifactoryConnector:getArtifactoryConnector": {
            "description": "Resource for looking up an App Dynamics connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getArtifactoryConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getArtifactoryConnector.\n",
                "properties": {
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getArtifactoryConnectorCredential:getArtifactoryConnectorCredential"
                        },
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Artifactory server.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "tags",
                    "url",
                    "id"
                ]
            }
        },
        "harness:platform/getAwsCCConnector:getAwsCCConnector": {
            "description": "Datasource for looking up an AWS Cloud Cost connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAwsCCConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAwsCCConnector.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The AWS account id.\n"
                    },
                    "crossAccountAccesses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsCCConnectorCrossAccountAccess:getAwsCCConnectorCrossAccountAccess"
                        },
                        "description": "Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "featuresEnableds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "reportName": {
                        "type": "string",
                        "description": "The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.\n"
                    },
                    "s3Bucket": {
                        "type": "string",
                        "description": "The name of s3 bucket.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "crossAccountAccesses",
                    "description",
                    "featuresEnableds",
                    "reportName",
                    "s3Bucket",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getAwsConnector:getAwsConnector": {
            "description": "Datasource for looking up an AWS connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAwsConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAwsConnector.\n",
                "properties": {
                    "crossAccountAccesses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsConnectorCrossAccountAccess:getAwsConnectorCrossAccountAccess"
                        },
                        "description": "Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "inheritFromDelegates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsConnectorInheritFromDelegate:getAwsConnectorInheritFromDelegate"
                        },
                        "description": "Inherit credentials from the delegate.\n"
                    },
                    "irsas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsConnectorIrsa:getAwsConnectorIrsa"
                        },
                        "description": "Use IAM role for service accounts.\n"
                    },
                    "manuals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsConnectorManual:getAwsConnectorManual"
                        },
                        "description": "Use IAM role for service accounts.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "crossAccountAccesses",
                    "description",
                    "inheritFromDelegates",
                    "irsas",
                    "manuals",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getAwsKmsConnector:getAwsKmsConnector": {
            "description": "Datasource for looking up an AWS KMS connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAwsKmsConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAwsKmsConnector.\n",
                "properties": {
                    "arnRef": {
                        "type": "string",
                        "description": "A reference to the Harness secret containing the ARN of the AWS KMS.\n"
                    },
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsKmsConnectorCredential:getAwsKmsConnectorCredential"
                        },
                        "description": "The credentials to use for connecting to aws.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The AWS region where the AWS Secret Manager is.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "arnRef",
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "region",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getAwsSecretManagerConnector:getAwsSecretManagerConnector": {
            "description": "Datasource for looking up an AWS Secret Manager connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAwsSecretManagerConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAwsSecretManagerConnector.\n",
                "properties": {
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsSecretManagerConnectorCredential:getAwsSecretManagerConnectorCredential"
                        },
                        "description": "The credentials to use for connecting to aws.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The AWS region where the AWS Secret Manager is.\n"
                    },
                    "secretNamePrefix": {
                        "type": "string",
                        "description": "A prefix to be added to all secrets.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "region",
                    "secretNamePrefix",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getBitbucketConnector:getBitbucketConnector": {
            "description": "Datasource for looking up a Bitbucket connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBitbucketConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBitbucketConnector.\n",
                "properties": {
                    "apiAuthentications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getBitbucketConnectorApiAuthentication:getBitbucketConnectorApiAuthentication"
                        },
                        "description": "Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getBitbucketConnectorCredential:getBitbucketConnectorCredential"
                        },
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the BitBucket repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiAuthentications",
                    "connectionType",
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "tags",
                    "url",
                    "validationRepo",
                    "id"
                ]
            }
        },
        "harness:platform/getCurrentUser:getCurrentUser": {
            "description": "Data source for retrieving the current user based on the API key.\n",
            "outputs": {
                "description": "A collection of values returned by getCurrentUser.\n",
                "properties": {
                    "admin": {
                        "type": "boolean",
                        "description": "Whether the user is an administrator.\n"
                    },
                    "billingFrequency": {
                        "type": "string",
                        "description": "Billing frequency of the user.\n"
                    },
                    "defaultAccountId": {
                        "type": "string",
                        "description": "Default account ID of the user.\n"
                    },
                    "edition": {
                        "type": "string",
                        "description": "Edition of the platform being used.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address of the user.\n"
                    },
                    "emailVerified": {
                        "type": "boolean",
                        "description": "Whether the user's email address has been verified.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "intent": {
                        "type": "string",
                        "description": "Intent of the user.\n"
                    },
                    "isTwoFactorAuthEnabled": {
                        "type": "boolean",
                        "description": "Whether 2FA is enabled for the user.\n"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Whether or not the user account is locked.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user.\n"
                    },
                    "signupAction": {
                        "type": "string",
                        "description": "Signup action of the user.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Token used to authenticate the user.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Unique identifier of the user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "admin",
                    "billingFrequency",
                    "defaultAccountId",
                    "edition",
                    "email",
                    "emailVerified",
                    "intent",
                    "isTwoFactorAuthEnabled",
                    "locked",
                    "name",
                    "signupAction",
                    "token",
                    "uuid",
                    "id"
                ]
            }
        },
        "harness:platform/getDatadogConnector:getDatadogConnector": {
            "description": "Datasource for looking up a Datadog connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatadogConnector.\n",
                "properties": {
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatadogConnector.\n",
                "properties": {
                    "apiKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the api key.\n"
                    },
                    "applicationKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the application key.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the Datadog server.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiKeyRef",
                    "applicationKeyRef",
                    "description",
                    "tags",
                    "url",
                    "id"
                ]
            }
        },
        "harness:platform/getDockerConnector:getDockerConnector": {
            "description": "Datasource for looking up a Datadog connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDockerConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDockerConnector.\n",
                "properties": {
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getDockerConnectorCredential:getDockerConnectorCredential"
                        },
                        "description": "The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The url of the docker registry.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "tags",
                    "type",
                    "url",
                    "id"
                ]
            }
        },
        "harness:platform/getDynatraceConnector:getDynatraceConnector": {
            "description": "Datasource for looking up a Dynatrace connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDynatraceConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDynatraceConnector.\n",
                "properties": {
                    "apiTokenRef": {
                        "type": "string",
                        "description": "The reference to the Harness secret containing the api token.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the Dynatrace server.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiTokenRef",
                    "delegateSelectors",
                    "description",
                    "tags",
                    "url",
                    "id"
                ]
            }
        },
        "harness:platform/getEnvironment:getEnvironment": {
            "description": "Data source for retrieving a Harness environment.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = pulumi.output(harness.platform.getEnvironment({\n    name: \"name\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_environment(name=\"name\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetEnvironment.Invoke(new()\n    {\n        Name = \"name\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupEnvironment(ctx, \u0026platform.LookupEnvironmentArgs{\n\t\t\tName:      pulumi.StringRef(\"name\"),\n\t\t\tOrgId:     \"org_id\",\n\t\t\tProjectId: \"project_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.inputs.GetEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getEnvironment(GetEnvironmentArgs.builder()\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    Fn::Invoke:\n      Function: harness:platform:getEnvironment\n      Arguments:\n        name: name\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironment.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironment.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Color of the environment.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of environment.\n"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "description",
                    "orgId",
                    "projectId",
                    "tags",
                    "type",
                    "id"
                ]
            }
        },
        "harness:platform/getGcpConnector:getGcpConnector": {
            "description": "Datasource for looking up a Gcp connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGcpConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGcpConnector.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "inheritFromDelegates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGcpConnectorInheritFromDelegate:getGcpConnectorInheritFromDelegate"
                        },
                        "description": "Inherit configuration from delegate.\n"
                    },
                    "manuals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGcpConnectorManual:getGcpConnectorManual"
                        },
                        "description": "Manual credential configuration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "inheritFromDelegates",
                    "manuals",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getGitConnector:getGitConnector": {
            "description": "Datasource for looking up a Git connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGitConnector.\n",
                "properties": {
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitConnectorCredential:getGitConnectorCredential"
                        },
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the git repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "connectionType",
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "tags",
                    "url",
                    "validationRepo",
                    "id"
                ]
            }
        },
        "harness:platform/getGithubConnector:getGithubConnector": {
            "description": "Datasource for looking up a Github connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGithubConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGithubConnector.\n",
                "properties": {
                    "apiAuthentications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGithubConnectorApiAuthentication:getGithubConnectorApiAuthentication"
                        },
                        "description": "Configuration for using the github api. API Access is Computed for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGithubConnectorCredential:getGithubConnectorCredential"
                        },
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the github repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiAuthentications",
                    "connectionType",
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "tags",
                    "url",
                    "validationRepo",
                    "id"
                ]
            }
        },
        "harness:platform/getGitlabConnector:getGitlabConnector": {
            "description": "Datasource for looking up a Gitlab connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitlabConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGitlabConnector.\n",
                "properties": {
                    "apiAuthentications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitlabConnectorApiAuthentication:getGitlabConnectorApiAuthentication"
                        },
                        "description": "Configuration for using the gitlab api. API Access is Computed for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitlabConnectorCredential:getGitlabConnectorCredential"
                        },
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the gitlab repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiAuthentications",
                    "connectionType",
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "tags",
                    "url",
                    "validationRepo",
                    "id"
                ]
            }
        },
        "harness:platform/getHelmConnector:getHelmConnector": {
            "description": "Datasource for looking up a Helm connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getHelmConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getHelmConnector.\n",
                "properties": {
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getHelmConnectorCredential:getHelmConnectorCredential"
                        },
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the helm server.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "tags",
                    "url",
                    "id"
                ]
            }
        },
        "harness:platform/getInputSet:getInputSet": {
            "description": "Data source for retrieving a Harness input set.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInputSet.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "pipelineId": {
                        "type": "string",
                        "description": "Identifier of the pipeline\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId",
                    "pipelineId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInputSet.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "pipelineId": {
                        "type": "string",
                        "description": "Identifier of the pipeline\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Input Set YAML\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "orgId",
                    "pipelineId",
                    "projectId",
                    "tags",
                    "yaml",
                    "id"
                ]
            }
        },
        "harness:platform/getJiraConnector:getJiraConnector": {
            "description": "Datasource for looking up a Jira connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getJiraConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getJiraConnector.\n",
                "properties": {
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "passwordRef": {
                        "type": "string",
                        "description": "Reference to a secret containing the password to use for authentication.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the Jira server.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username to use for authentication.\n"
                    },
                    "usernameRef": {
                        "type": "string",
                        "description": "Reference to a secret containing the username to use for authentication.\n"
                    }
                },
                "type": "object",
                "required": [
                    "delegateSelectors",
                    "description",
                    "passwordRef",
                    "tags",
                    "url",
                    "username",
                    "usernameRef",
                    "id"
                ]
            }
        },
        "harness:platform/getKubernetesConnector:getKubernetesConnector": {
            "description": "Datasource for looking up a Kubernetes connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesConnector.\n",
                "properties": {
                    "clientKeyCerts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getKubernetesConnectorClientKeyCert:getKubernetesConnectorClientKeyCert"
                        },
                        "description": "Client key and certificate config for the connector.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Selectors to use for the delegate.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "inheritFromDelegates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getKubernetesConnectorInheritFromDelegate:getKubernetesConnectorInheritFromDelegate"
                        },
                        "description": "Credentials are inherited from the delegate.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "openidConnects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getKubernetesConnectorOpenidConnect:getKubernetesConnectorOpenidConnect"
                        },
                        "description": "OpenID configuration for the connector.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "serviceAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getKubernetesConnectorServiceAccount:getKubernetesConnectorServiceAccount"
                        },
                        "description": "Service account for the connector.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "usernamePasswords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getKubernetesConnectorUsernamePassword:getKubernetesConnectorUsernamePassword"
                        },
                        "description": "Username and password for the connector.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clientKeyCerts",
                    "delegateSelectors",
                    "description",
                    "inheritFromDelegates",
                    "openidConnects",
                    "serviceAccounts",
                    "tags",
                    "usernamePasswords",
                    "id"
                ]
            }
        },
        "harness:platform/getNexusConnector:getNexusConnector": {
            "description": "Datasource for looking up a Nexus connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNexusConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNexusConnector.\n",
                "properties": {
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getNexusConnectorCredential:getNexusConnectorCredential"
                        },
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Nexus server.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the Nexus server. Valid values are 2.x, 3.x\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "tags",
                    "url",
                    "version",
                    "id"
                ]
            }
        },
        "harness:platform/getOrganization:getOrganization": {
            "description": "Data source for retrieving a Harness organization\n",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganization.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getPagerdutyConnector:getPagerdutyConnector": {
            "description": "Datasource for looking up a PagerDuty connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPagerdutyConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPagerdutyConnector.\n",
                "properties": {
                    "apiTokenRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the api token.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiTokenRef",
                    "delegateSelectors",
                    "description",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getPipeline:getPipeline": {
            "description": "Data source for retrieving a Harness pipeline.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPipeline.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPipeline.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "YAML of the pipeline.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "orgId",
                    "projectId",
                    "tags",
                    "yaml",
                    "id"
                ]
            }
        },
        "harness:platform/getProject:getProject": {
            "description": "Data source for retrieving a Harness project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst exampleById = pulumi.output(harness.platform.getProject({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n}));\nconst exampleByName = pulumi.output(harness.platform.getProject({\n    name: \"name\",\n    orgId: \"org_id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample_by_id = harness.platform.get_project(identifier=\"identifier\",\n    org_id=\"org_id\")\nexample_by_name = harness.platform.get_project(name=\"name\",\n    org_id=\"org_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleById = Harness.Platform.GetProject.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n    });\n\n    var exampleByName = Harness.Platform.GetProject.Invoke(new()\n    {\n        Name = \"name\",\n        OrgId = \"org_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupProject(ctx, \u0026platform.LookupProjectArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tOrgId:      \"org_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.LookupProject(ctx, \u0026platform.LookupProjectArgs{\n\t\t\tName:  pulumi.StringRef(\"name\"),\n\t\t\tOrgId: \"org_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleById = PlatformFunctions.getProject(GetProjectArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .build());\n\n        final var exampleByName = PlatformFunctions.getProject(GetProjectArgs.builder()\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleById:\n    Fn::Invoke:\n      Function: harness:platform:getProject\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n  exampleByName:\n    Fn::Invoke:\n      Function: harness:platform:getProject\n      Arguments:\n        name: name\n        orgId: org_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Color of the project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "modules": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Modules in the project.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "description",
                    "modules",
                    "orgId",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getPrometheusConnector:getPrometheusConnector": {
            "description": "Datasource for looking up a Prometheus connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPrometheusConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPrometheusConnector.\n",
                "properties": {
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the Prometheus server.\n"
                    }
                },
                "type": "object",
                "required": [
                    "delegateSelectors",
                    "description",
                    "tags",
                    "url",
                    "id"
                ]
            }
        },
        "harness:platform/getResourceGroup:getResourceGroup": {
            "description": "DataSource for looking up resource group in harness.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = pulumi.output(harness.platform.getResourceGroup({\n    identifier: \"identifier\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_resource_group(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetResourceGroup.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupResourceGroup(ctx, \u0026platform.LookupResourceGroupArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetResourceGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getResourceGroup(GetResourceGroupArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    Fn::Invoke:\n      Function: harness:platform:getResourceGroup\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getResourceGroup.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getResourceGroup.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier of the account\n"
                    },
                    "allowedScopeLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The scope levels at which this resource group can be used\n"
                    },
                    "color": {
                        "type": "string",
                        "description": "Color of the environment.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "includedScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getResourceGroupIncludedScope:getResourceGroupIncludedScope"
                        },
                        "description": "Included scopes\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "resourceFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getResourceGroupResourceFilter:getResourceGroupResourceFilter"
                        },
                        "description": "Contains resource filter for a resource group\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "allowedScopeLevels",
                    "color",
                    "description",
                    "includedScopes",
                    "resourceFilters",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getRoles:getRoles": {
            "description": "Data source for retrieving roles\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = pulumi.output(harness.platform.getRoles({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_roles(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetRoles.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupRoles(ctx, \u0026platform.LookupRolesArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetRolesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getRoles(GetRolesArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: harness:platform:getRoles\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRoles.\n",
                "properties": {
                    "allowedScopeLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The scope levels at which this role can be used\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the permission identifiers\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRoles.\n",
                "properties": {
                    "allowedScopeLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The scope levels at which this role can be used\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the permission identifiers\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowedScopeLevels",
                    "description",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getSecretFile:getSecretFile": {
            "description": "Datasource for looking up secert file type secret.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = pulumi.output(harness.platform.getSecretFile({\n    identifier: \"identifier\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_secret_file(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetSecretFile.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupSecretFile(ctx, \u0026platform.LookupSecretFileArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetSecretFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getSecretFile(GetSecretFileArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: harness:platform:getSecretFile\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSecretFile.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecretFile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "filePath": {
                        "type": "string",
                        "description": "Path of the file containing secret value\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "secretManagerIdentifier": {
                        "type": "string",
                        "description": "Identifier of the Secret Manager used to manage the secret.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "filePath",
                    "secretManagerIdentifier",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getSecretSshkey:getSecretSshkey": {
            "description": "Resource for looking up an SSH Key type secret.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = pulumi.output(harness.platform.getSecretSshkey({\n    identifier: \"identifier\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_secret_sshkey(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetSecretSshkey.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupSecretSshkey(ctx, \u0026platform.LookupSecretSshkeyArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetSecretSshkeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getSecretSshkey(GetSecretSshkeyArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: harness:platform:getSecretSshkey\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSecretSshkey.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecretSshkey.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "kerberos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getSecretSshkeyKerbero:getSecretSshkeyKerbero"
                        },
                        "description": "Kerberos authentication scheme\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "SSH port\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "sshes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getSecretSshkeySsh:getSecretSshkeySsh"
                        },
                        "description": "Kerberos authentication scheme\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "kerberos",
                    "port",
                    "sshes",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getSecretText:getSecretText": {
            "description": "DataSource for looking up secret of type secret text.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = pulumi.output(harness.platform.getSecretText({\n    identifier: \"identifier\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_secret_text(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetSecretText.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupSecretText(ctx, \u0026platform.LookupSecretTextArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetSecretTextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getSecretText(GetSecretTextArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    Fn::Invoke:\n      Function: harness:platform:getSecretText\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSecretText.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecretText.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "secretManagerIdentifier": {
                        "type": "string",
                        "description": "Identifier of the Secret Manager used to manage the secret.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the Secret\n"
                    },
                    "valueType": {
                        "type": "string",
                        "description": "This has details to specify if the secret value is inline or referenced.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "secretManagerIdentifier",
                    "tags",
                    "value",
                    "valueType",
                    "id"
                ]
            }
        },
        "harness:platform/getService:getService": {
            "description": "Data source for retrieving a Harness service.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = pulumi.output(harness.platform.getService({\n    name: \"name\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_service(name=\"name\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetService.Invoke(new()\n    {\n        Name = \"name\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupService(ctx, \u0026platform.LookupServiceArgs{\n\t\t\tName:      pulumi.StringRef(\"name\"),\n\t\t\tOrgId:     \"org_id\",\n\t\t\tProjectId: \"project_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.inputs.GetServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getService(GetServiceArgs.builder()\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: harness:platform:getService\n      Arguments:\n        name: name\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getService.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getService.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "orgId",
                    "projectId",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getServiceAccount:getServiceAccount": {
            "description": "Data source for retrieving service account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = pulumi.output(harness.platform.getServiceAccount({\n    identifier: \"identifier\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_service_account(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetServiceAccount.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupServiceAccount(ctx, \u0026platform.LookupServiceAccountArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getServiceAccount(GetServiceAccountArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: harness:platform:getServiceAccount\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceAccount.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServiceAccount.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier for the Entity.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email of the Service Account.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "description",
                    "email",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getSplunkConnector:getSplunkConnector": {
            "description": "Datasource for looking up a Splunk connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSplunkConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSplunkConnector.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Splunk account id.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "passwordRef": {
                        "type": "string",
                        "description": "The reference to the Harness secret containing the Splunk password.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the Splunk server.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username used for connecting to Splunk.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "delegateSelectors",
                    "description",
                    "passwordRef",
                    "tags",
                    "url",
                    "username",
                    "id"
                ]
            }
        },
        "harness:platform/getSumologicConnector:getSumologicConnector": {
            "description": "Datasource for looking up a Sumologic connector.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSumologicConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSumologicConnector.\n",
                "properties": {
                    "accessIdRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the access id.\n"
                    },
                    "accessKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the access key.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url of the SumoLogic server.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessIdRef",
                    "accessKeyRef",
                    "delegateSelectors",
                    "description",
                    "tags",
                    "url",
                    "id"
                ]
            }
        },
        "harness:platform/getTriggers:getTriggers": {
            "description": "Data source for retrieving a Harness trigger.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = pulumi.output(harness.platform.getTriggers({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    targetId: \"pipeline_id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_triggers(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    target_id=\"pipeline_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetTriggers.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        TargetId = \"pipeline_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupTriggers(ctx, \u0026platform.LookupTriggersArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tOrgId:      \"org_id\",\n\t\t\tProjectId:  \"project_id\",\n\t\t\tTargetId:   \"pipeline_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetTriggersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getTriggers(GetTriggersArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .targetId(\"pipeline_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    Fn::Invoke:\n      Function: harness:platform:getTriggers\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n        targetId: pipeline_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTriggers.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "ignoreError": {
                        "type": "boolean",
                        "description": "ignore error default false\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "targetId": {
                        "type": "string",
                        "description": "Identifier of the target pipeline\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId",
                    "projectId",
                    "targetId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTriggers.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "ignoreError": {
                        "type": "boolean",
                        "description": "ignore error default false\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "targetId": {
                        "type": "string",
                        "description": "Identifier of the target pipeline\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "trigger yaml\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "orgId",
                    "projectId",
                    "tags",
                    "targetId",
                    "yaml",
                    "id"
                ]
            }
        },
        "harness:platform/getUsergroup:getUsergroup": {
            "description": "Data source for retrieving a Harness User Group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = pulumi.output(harness.platform.getUsergroup({\n    name: \"name\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_usergroup(name=\"name\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetUsergroup.Invoke(new()\n    {\n        Name = \"name\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupUsergroup(ctx, \u0026platform.LookupUsergroupArgs{\n\t\t\tName:      pulumi.StringRef(\"name\"),\n\t\t\tOrgId:     pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId: pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetUsergroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: harness:platform:getUsergroup\n      Arguments:\n        name: name\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUsergroup.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "notificationConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getUsergroupNotificationConfig:getUsergroupNotificationConfig"
                        },
                        "description": "List of notification settings.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsergroup.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "externallyManaged": {
                        "type": "boolean",
                        "description": "Whether the user group is externally managed.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "linkedSsoDisplayName": {
                        "type": "string",
                        "description": "Name of the linked SSO.\n"
                    },
                    "linkedSsoId": {
                        "type": "string",
                        "description": "The SSO account ID that the user group is linked to.\n"
                    },
                    "linkedSsoType": {
                        "type": "string",
                        "description": "Type of linked SSO\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "notificationConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getUsergroupNotificationConfig:getUsergroupNotificationConfig"
                        },
                        "description": "List of notification settings.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "ssoGroupId": {
                        "type": "string",
                        "description": "Identifier of the userGroup in SSO.\n"
                    },
                    "ssoGroupName": {
                        "type": "string",
                        "description": "Name of the SSO userGroup.\n"
                    },
                    "ssoLinked": {
                        "type": "boolean",
                        "description": "Whether sso is linked or not\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of users in the UserGroup.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "externallyManaged",
                    "linkedSsoDisplayName",
                    "linkedSsoId",
                    "linkedSsoType",
                    "ssoGroupId",
                    "ssoGroupName",
                    "ssoLinked",
                    "tags",
                    "users",
                    "id"
                ]
            }
        }
    }
}